
--- START FILE: combine_project.py ---

import os

def combine_files_to_single_file(root_dir, output_filename="combined_project_files.txt"):
    """
    Combines the content of all files in a directory into a single file,
    excluding 'node_modules' directories and 'package-lock.json' files.

    Args:
        root_dir (str): The root directory of the project.
        output_filename (str): The name of the output file.
    """
    combined_content = []
    excluded_dirs = ['node_modules', '.git', '.vscode', '.idea', 'dist', 'build']
    excluded_files = ['portfolio_app.py','1.txt','combined_project.py','package-lock.json', 'yarn.lock', 'bun.lockb', '.env'] # Added .env as it might contain sensitive info

    print(f"Starting to combine files from: {root_dir}")
    print(f"Excluding directories: {excluded_dirs}")
    print(f"Excluding files: {excluded_files}")

    for dirpath, dirnames, filenames in os.walk(root_dir):
        # Modify dirnames in-place to skip excluded directories
        dirnames[:] = [d for d in dirnames if d not in excluded_dirs]

        for filename in filenames:
            if filename in excluded_files:
                print(f"Skipping excluded file: {os.path.join(dirpath, filename)}")
                continue

            file_path = os.path.join(dirpath, filename)
            # Make path relative to root_dir for the header
            relative_file_path = os.path.relpath(file_path, root_dir)

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                combined_content.append(f"\n--- START FILE: {relative_file_path} ---\n\n")
                combined_content.append(content)
                combined_content.append(f"\n\n--- END FILE: {relative_file_path} ---\n")
                print(f"Included file: {relative_file_path}")
            except UnicodeDecodeError:
                print(f"Skipping binary or undecodable file (UnicodeDecodeError): {relative_file_path}")
            except Exception as e:
                print(f"Error reading file {relative_file_path}: {e}")

    output_path = os.path.join(root_dir, output_filename)
    try:
        with open(output_path, 'w', encoding='utf-8') as outfile:
            outfile.write("".join(combined_content))
        print(f"\nSuccessfully combined all files into: {output_path}")
    except Exception as e:
        print(f"Error writing output file {output_path}: {e}")

if __name__ == "__main__":
    # Get the current working directory where the script is run
    # This assumes you run the script from your project's root directory
    project_root = os.getcwd()
    combine_files_to_single_file(project_root)


--- END FILE: combine_project.py ---

--- START FILE: contact.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Souparna Paul - Contact Me</title>
    <!-- SEO Meta Tags -->
    <meta name="description" content="Contact Souparna Paul for collaborations, job opportunities, or general inquiries. AI & Full-Stack Developer based in Kolkata.">
    <meta name="keywords" content="Souparna Paul contact, contact AI developer, contact full-stack developer, hire Souparna Paul, collaboration, job opportunities, email Souparna Paul">
    <meta property="og:title" content="Souparna Paul - Contact Me">
    <meta property="og:description" content="Contact Souparna Paul for collaborations, job opportunities, or general inquiries.">
    <meta property="og:image" content="https://souparna-paul-portfolio.netlify.app/profile.png"> <!-- Replace with your live site's profile image URL -->
    <meta property="og:url" content="https://souparna-paul-portfolio.netlify.app/contact.html"> <!-- Replace with your live site URL -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="https://souparna-paul-portfolio.netlify.app/profile.png"> <!-- Replace with your live site's profile image URL -->

    <!-- Favicon - Replace with your actual favicon.ico or .png -->
    <link rel="icon" href="profile.png" type="image/png">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="static/css/styles.css">
</head>
<body>
    <!-- NOTE: For faster loading, please optimize all images (compress, consider WebP format) -->

    <!-- Header/Navigation Bar -->
    <header class="shadow-lg py-4 sticky top-0 z-20 transition-colors-shadow dark:shadow-none">
        <div class="container mx-auto px-4 flex justify-between items-center">
            <a href="index.html" class="text-2xl font-extrabold text-gray-800 hover:text-blue-600 transition-colors-shadow dark:text-heading-color-dark dark:hover:text-primary-accent-dark">Souparna Paul</a>
            <div class="flex items-center space-x-6">
                <!-- Dark Mode Toggle (Desktop) -->
                <div id="darkModeToggle" class="relative hidden md:flex">
                    <div class="toggle-circle"></div>
                </div>

                <!-- Navigation Links (Desktop) -->
                <nav id="navLinksDesktop" class="nav-links-desktop hidden md:flex md:space-x-6">
                    <a href="index.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Home</a>
                    <a href="projects.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Projects</a>
                    <a href="education-achievements.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Education & Achievements</a>
                    <a href="contact.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Contact</a>
                </nav>
            </div>
        </div>
    </header>

    <main class="container mx-auto px-4 py-8 md:py-12">
        <!-- Contact Section -->
        <section id="contact" class="main-content-card rounded-xl p-6 md:p-10 mb-8 md:mb-12 transition-colors-shadow fade-in-section">
            <h2 class="text-3xl md:text-4xl font-bold mb-6 text-center">Get In Touch!</h2>
            <p class="text-lg leading-relaxed mb-6 text-center dark:text-text-color-dark">
                Feel free to reach out to me for collaborations, job opportunities, or just a chat! I'm always open to new connections.
            </p>

            <form id="contactForm" method="POST" class="max-w-xl mx-auto space-y-4">
                <!-- IMPORTANT: Replace YOUR_WEB3FORMS_ACCESS_KEY with your actual access key from Web3Forms.com -->
                <!-- Sign up at Web3Forms (it's free) to get your key: https://web3forms.com/ -->
                <input type="hidden" name="access_key" value="ecb461f4-b2cd-4200-8ca4-c2d72b566de5">
                <input type="hidden" name="subject" value="New Contact from Portfolio Website">
                <input type="hidden" name="redirect" value="https://souparna-paul-portfolio.netlify.app/thanks.html">
                <input type="hidden" name="from_name" value="Portfolio Contact Form">

                <input type="text" name="name" placeholder="Your Name" required class="form-input w-full rounded-md border focus:ring-2 focus:ring-blue-500 outline-none transition-colors-shadow">
                <input type="email" name="email" placeholder="Your Email" required class="form-input w-full rounded-md border focus:ring-2 focus:ring-blue-500 outline-none transition-colors-shadow">
                <textarea name="message" placeholder="Your Message" rows="6" required class="form-input w-full rounded-md border focus:ring-2 focus:ring-blue-500 outline-none transition-colors-shadow"></textarea>
                <button type="submit" class="btn-primary w-full py-3 rounded-md font-bold text-lg shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">Send Message</button>
            </form>
            <p class="text-center text-lg mt-6 dark:text-text-color-dark">
                Alternatively, you can email me directly at: <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded-md text-gray-800 dark:text-gray-200 transition-colors-shadow">souparnopaulreborn@gmail.com</code>
            </p>
        </section>
    </main>

    <!-- Scroll to Top Button -->
    <button id="scrollToTopBtn" aria-label="Scroll to top">
        <i class="fas fa-arrow-up"></i>
    </button>

    <!-- Mobile Fixed Bottom Navigation -->
    <nav id="mobileFixedNav" class="fixed bottom-0 left-0 w-full bg-white dark:bg-gray-900 shadow-lg md:hidden z-50 transition-colors-shadow border-t dark:border-gray-700">
        <div class="flex justify-around items-center h-16">
            <a href="index.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-home text-xl"></i>
                <span class="mt-1">Home</span>
            </a>
            <a href="projects.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-code text-xl"></i>
                <span class="mt-1">Projects</span>
            </a>
            <a href="education-achievements.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-graduation-cap text-xl"></i>
                <span class="mt-1">Edu & Ach</span>
            </a>
            <a href="contact.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-envelope text-xl"></i>
                <span class="mt-1">Contact</span>
            </a>
            <!-- Dark Mode Toggle moved here for mobile -->
            <button id="mobileDarkModeToggle" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark focus:outline-none transition-colors">
                <i class="fas fa-moon text-xl dark:hidden"></i>
                <i class="fas fa-sun text-xl hidden dark:block"></i>
                <span class="mt-1">Theme</span>
            </button>
        </div>
    </nav>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-6 text-center transition-colors-shadow dark:bg-navbar-bg-dark">
        <div class="container mx-auto px-4">
            <p class="text-sm">&copy; <span id="currentYear"></span> Souparna Paul. All rights reserved.</p>
            <p class="text-sm">Built with ❤️ using HTML, Tailwind CSS, and JavaScript.</p>
            <div class="flex justify-center space-x-4 text-xl mt-3">
                <a href="https://www.linkedin.com/in/souparno-paul-28a75524b/" target="_blank" aria-label="LinkedIn" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fab fa-linkedin"></i>
                </a>
                <a href="https://github.com/sOuL2000s" target="_blank" aria-label="GitHub" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fab fa-github"></i>
                </a>
                <a href="mailto:souparnopaulreborn@gmail.com" aria-label="Email" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fas fa-envelope"></i>
                </a>
            </div>
        </div>
    </footer>

    <!-- Shared Scripts -->
    <script src="static/js/scripts.js" defer></script>
    <!-- Page-specific Scripts -->
    <script>
        // Handle Contact Form Submission
        const contactForm = document.getElementById('contactForm');
        if(contactForm) { // Ensure form exists before attaching listener
            contactForm.addEventListener('submit', async function (e) {
                e.preventDefault(); // Prevent default form submission

                const formButton = contactForm.querySelector('button[type="submit"]');
                formButton.disabled = true; // Disable button to prevent multiple submissions
                formButton.textContent = 'Sending...';

                const formData = new FormData(this);
                const object = {};
                formData.forEach((value, key) => {
                    object[key] = value;
                });
                const json = JSON.stringify(object);

                try {
                    const response = await fetch('https://api.web3forms.com/submit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: json
                    });

                    const result = await response.json();

                    if (result.success) {
                        console.log('Form submission successful:', result);
                        // Redirect to the thanks page as specified in the hidden input
                        window.location.href = this.querySelector('input[name="redirect"]').value;
                    } else {
                        console.error('Form submission failed:', result);
                        alert('There was an error sending your message. Please try again or email me directly.');
                    }
                } catch (error) {
                    console.error('Network or unexpected error:', error);
                    alert('A network error occurred. Please try again or email me directly.');
                } finally {
                    formButton.disabled = false;
                    formButton.textContent = 'Send Message';
                }
            });
        }
    </script>
</body>
</html>

--- END FILE: contact.html ---

--- START FILE: education-achievements.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Souparna Paul - Education & Achievements</title>
    <!-- SEO Meta Tags -->
    <meta name="description" content="Souparna Paul's academic background and professional achievements. B.Tech CSE from Narula Institute of Technology, research paper awards, and hackathon participation.">
    <meta name="keywords" content="Souparna Paul education, Souparna Paul achievements, B.Tech CSE, Narula Institute of Technology, research paper award, Smart India Hackathon, SIH, college achievements, academic background">
    <meta property="og:title" content="Souparna Paul - Education & Achievements">
    <meta property="og:description" content="Souparna Paul's academic background and professional achievements.">
    <meta property="og:image" content="https://souparna-paul-portfolio.netlify.app/profile.png"> <!-- Replace with your live site's profile image URL -->
    <meta property="og:url" content="https://souparna-paul-portfolio.netlify.app/education-achievements.html"> <!-- Replace with your live site URL -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="https://souparna-paul-portfolio.netlify.app/profile.png"> <!-- Replace with your live site's profile image URL -->

    <!-- Favicon - Replace with your actual favicon.ico or .png -->
    <link rel="icon" href="profile.png" type="image/png">

    <!-- Preconnect for Google Fonts to improve loading speed -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter with font-display: swap for better performance -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="static/css/styles.css">
</head>
<body>
    <!-- NOTE: For faster loading, please optimize all images (compress, consider WebP format) -->

    <!-- Header/Navigation Bar -->
    <header class="shadow-lg py-4 sticky top-0 z-20 transition-colors-shadow dark:shadow-none">
        <div class="container mx-auto px-4 flex justify-between items-center">
            <a href="index.html" class="text-2xl font-extrabold text-gray-800 hover:text-blue-600 transition-colors-shadow dark:text-heading-color-dark dark:hover:text-primary-accent-dark">Souparna Paul</a>
            <div class="flex items-center space-x-6">
                <!-- Dark Mode Toggle (Desktop) -->
                <div id="darkModeToggle" class="relative hidden md:flex">
                    <div class="toggle-circle"></div>
                </div>

                <!-- Navigation Links (Desktop) -->
                <nav id="navLinksDesktop" class="nav-links-desktop hidden md:flex md:space-x-6">
                    <a href="index.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Home</a>
                    <a href="projects.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Projects</a>
                    <a href="education-achievements.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Education & Achievements</a>
                    <a href="contact.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Contact</a>
                </nav>
            </div>
        </div>
    </header>

    <main class="container mx-auto px-4 py-8 md:py-12">
        <!-- Education Section -->
        <section id="education" class="main-content-card rounded-xl p-6 md:p-10 mb-8 md:mb-12 transition-colors-shadow fade-in-section">
            <h2 class="text-3xl md:text-4xl font-bold mb-6 text-center">Education</h2>
            <div class="space-y-4">
                <div class="education-entry">
                    <h3 class="text-2xl font-semibold mb-2">B.Tech CSE | Narula Institute of Technology, Kolkata</h3>
                    <p class="text-lg leading-relaxed dark:text-text-color-dark mb-2">2021-2025</p>
                    <ul class="list-disc list-inside text-lg leading-relaxed space-y-1 dark:text-text-color-dark">
                        <li>Relevant coursework: Data Structures & Algorithms, Object-Oriented Programming, Database Management Systems, Machine Learning, Web Technologies</li>
                        <li>Thesis/Capstone Project: Phishing URL Detection (Awarded Best Paper)</li>
                    </ul>
                </div>
                <div class="education-entry">
                    <h3 class="text-2xl font-semibold mb-2">Higher Secondary | Madhyamgram High School, Madhyamgram</h3>
                    <p class="text-lg leading-relaxed dark:text-text-color-dark">2019</p>
                </div>
                <div class="education-entry">
                    <h3 class="text-2xl font-semibold mb-2">Secondary | Barasat Mahatma Gandhi Memorial High School, Barasat</h3>
                    <p class="text-lg leading-relaxed dark:text-text-color-dark">2017</p>
                </div>
            </div>
        </section>

        <!-- Achievements Section -->
        <section id="achievements" class="main-content-card rounded-xl p-6 md:p-10 mb-8 md:mb-12 transition-colors-shadow fade-in-section">
            <h2 class="text-3xl md:text-4xl font-bold mb-6 text-center">Achievements</h2>
            <div class="space-y-4">
                <div class="achievement-entry flex items-start">
                    <i class="fas fa-award achievement-icon"></i>
                    <p class="text-lg leading-relaxed flex-1 dark:text-text-color-dark">
                        <strong class="font-semibold">Research Paper, Best Paper Award:</strong> Recognized for "Phishing URL Detection Using ML" at the 2nd National Conference, RAICCIT 2025.
                    </p>
                </div>
                <div class="achievement-entry flex items-start">
                    <i class="fas fa-lightbulb achievement-icon"></i>
                    <p class="text-lg leading-relaxed flex-1 dark:text-text-color-dark">
                        <strong class="font-semibold">SIH Internal 2023:</strong> Participated in the Smart India Hackathon (SIH) Internal competition 2023 at Narula Institute of Technology, Kolkata, on "Real-Time Vehicle Tracking System."
                    </p>
                </div>
                <div class="achievement-entry flex items-start">
                    <i class="fas fa-microphone achievement-icon"></i>
                    <p class="text-lg leading-relaxed flex-1 dark:text-text-color-dark">
                        <strong class="font-semibold">Singing Contest:</strong> Secured 2nd place in a college singing contest, NiT Jewels, in April 2022.
                    </p>
                </div>
            </div>
        </section>
    </main>

    <!-- Scroll to Top Button -->
    <button id="scrollToTopBtn" aria-label="Scroll to top">
        <i class="fas fa-arrow-up"></i>
    </button>

    <!-- Mobile Fixed Bottom Navigation -->
    <nav id="mobileFixedNav" class="fixed bottom-0 left-0 w-full bg-white dark:bg-gray-900 shadow-lg md:hidden z-50 transition-colors-shadow border-t dark:border-gray-700">
        <div class="flex justify-around items-center h-16">
            <a href="index.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-home text-xl"></i>
                <span class="mt-1">Home</span>
            </a>
            <a href="projects.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-code text-xl"></i>
                <span class="mt-1">Projects</span>
            </a>
            <a href="education-achievements.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-graduation-cap text-xl"></i>
                <span class="mt-1">Edu & Ach</span>
            </a>
            <a href="contact.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-envelope text-xl"></i>
                <span class="mt-1">Contact</span>
            </a>
            <!-- Dark Mode Toggle moved here for mobile -->
            <button id="mobileDarkModeToggle" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark focus:outline-none transition-colors">
                <i class="fas fa-moon text-xl dark:hidden"></i>
                <i class="fas fa-sun text-xl hidden dark:block"></i>
                <span class="mt-1">Theme</span>
            </button>
        </div>
    </nav>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-6 text-center transition-colors-shadow dark:bg-navbar-bg-dark">
        <div class="container mx-auto px-4">
            <p class="text-sm">&copy; <span id="currentYear"></span> Souparna Paul. All rights reserved.</p>
            <p class="text-sm">Built with ❤️ using HTML, Tailwind CSS, and JavaScript.</p>
            <div class="flex justify-center space-x-4 text-xl mt-3">
                <a href="https://www.linkedin.com/in/souparno-paul-28a75524b/" target="_blank" aria-label="LinkedIn" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fab fa-linkedin"></i>
                </a>
                <a href="https://github.com/sOuL2000s" target="_blank" aria-label="GitHub" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fab fa-github"></i>
                </a>
                <a href="mailto:souparnopaulreborn@gmail.com" aria-label="Email" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fas fa-envelope"></i>
                </a>
            </div>
        </div>
    </footer>

    <!-- Shared Scripts -->
    <script src="static/js/scripts.js" defer></script>
    <!-- Page-specific Scripts (None for this page) -->
</body>
</html>

--- END FILE: education-achievements.html ---

--- START FILE: index.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Souparna Paul - AI & Full-Stack Developer Portfolio</title>
    <!-- SEO Meta Tags -->
    <meta name="description" content="Souparna Paul is a passionate AI & Full-Stack Developer from Kolkata, specializing in Python, Machine Learning, Web Development (Streamlit, React, Firebase), and data-driven applications. Explore projects like BTC Probo Predictor, Smart Agritech, and Tournament Manager.">
    <meta name="keywords" content="Souparna Paul, portfolio, AI developer, full-stack developer, Python, Machine Learning, Streamlit, React, Firebase, web development, Kolkata, India, software developer, data science, projects, resume">
    <meta property="og:title" content="Souparna Paul - AI & Full-Stack Developer Portfolio">
    <meta property="og:description" content="Souparna Paul is a passionate AI & Full-Stack Developer from Kolkata, specializing in Python, Machine Learning, Web Development (Streamlit, React, Firebase), and data-driven applications.">
    <meta property="og:image" content="https://souparna-paul-portfolio.netlify.app/profile.png"> <!-- Replace with your live site's profile image URL -->
    <meta property="og:url" content="https://souparna-paul-portfolio.netlify.app/"> <!-- Replace with your live site URL -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="https://souparna-paul-portfolio.netlify.app/profile.png"> <!-- Replace with your live site's profile image URL -->

    <!-- Favicon - Replace with your actual favicon.ico or .png -->
    <link rel="icon" href="profile.png" type="image/png">
    
    <!-- Preconnect for Google Fonts to improve loading speed -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter with font-display: swap for better performance -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="static/css/styles.css">
</head>
<body>
    <!-- NOTE: For faster loading, please optimize all images (compress, consider WebP format) -->

    <!-- Header/Navigation Bar -->
    <header class="shadow-lg py-4 sticky top-0 z-20 transition-colors-shadow dark:shadow-none">
        <div class="container mx-auto px-4 flex justify-between items-center">
            <a href="index.html" class="text-2xl font-extrabold text-gray-800 hover:text-blue-600 transition-colors-shadow dark:text-heading-color-dark dark:hover:text-primary-accent-dark">Souparna Paul</a>
            <div class="flex items-center space-x-6">
                <!-- Dark Mode Toggle (Desktop) -->
                <div id="darkModeToggle" class="relative hidden md:flex">
                    <div class="toggle-circle"></div>
                </div>

                <!-- Navigation Links (Desktop) -->
                <nav id="navLinksDesktop" class="nav-links-desktop hidden md:flex md:space-x-6">
                    <a href="index.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Home</a>
                    <a href="projects.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Projects</a>
                    <a href="education-achievements.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Education & Achievements</a>
                    <a href="contact.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Contact</a>
                </nav>
            </div>
        </div>
    </header>

    <main class="container mx-auto px-4 py-8 md:py-12">
        <!-- Home Section -->
        <section id="home" class="main-content-card hero-section-bg rounded-xl p-6 md:p-10 mb-8 md:mb-12 flex flex-col md:flex-row items-center justify-center text-center md:text-left transition-colors-shadow">
            <div class="md:w-1/3 flex justify-center mb-6 md:mb-0 md:pr-8">
                <img src="profile.png" alt="Souparna Paul" loading="lazy" class="profile-img rounded-full w-24 h-24 sm:w-32 sm:h-32 md:w-48 md:h-48 object-cover transition-colors-shadow">
            </div>
            <div class="md:w-2/3">
                <h1 class="text-4xl md:text-5xl font-extrabold mb-3 leading-tight">
                    Hi, I'm Souparna Paul <span class="wave-emoji">👋</span>
                </h1>
                <h2 class="text-lg sm:text-xl md:text-2xl font-semibold text-gray-700 mb-6 dark:text-text-color-dark">
                    <span class="typewriter-text">AI & Full-Stack Developer | Python, ML, Web | Kolkata, India</span>
                </h2>
                <p class="text-lg leading-relaxed mb-6 dark:text-text-color-dark">
                    I'm a Tech Enthusiast and Innovator from Madhyamgram, West Bengal.
                    I specialize in Python development, AI/ML, and full-stack web development using tools like Streamlit, Firebase, and React.
                    My strengths lie in building diverse and impactful applications, ranging from real-time, data-driven dashboards to robust full-stack web solutions. This is showcased in projects like my <strong class="font-semibold">BTC Probo Predictor</strong>, <strong class="font-semibold">Smart Agritech Streamlit Dashboard</strong>, and the <strong class="font-semibold">Tournament Manager Full-Stack Web Application</strong>.
                    I’m also passionate about applying machine learning to real-world problems, as demonstrated by my <strong class="font-semibold">Phishing URL Detection</strong> project, for which I won a Best Paper Award.
                </p>
                <div class="flex flex-col sm:flex-row justify-center md:justify-start items-center space-y-4 sm:space-y-0 sm:space-x-6 mb-6">
                    <a href="Souparna_Paul_Latest_Resume.pdf" target="_blank" download class="btn-primary flex items-center justify-center">
                        <i class="fas fa-download mr-2"></i> Download Resume
                    </a>
                    <a href="contact.html" class="btn-primary flex items-center justify-center bg-gray-600 hover:bg-gray-700 dark:bg-secondary-accent-dark dark:hover:bg-button-hover-bg-color-dark">
                        <i class="fas fa-envelope mr-2"></i> Contact Me
                    </a>
                </div>
                <div class="flex justify-center md:justify-start space-x-6 text-3xl mt-4">
                    <a href="https://www.linkedin.com/in/souparno-paul-28a75524b/" target="_blank" aria-label="LinkedIn" class="hover:text-blue-700 transition-colors-shadow dark:hover:text-primary-accent-dark">
                        <i class="fab fa-linkedin"></i>
                    </a>
                    <a href="https://github.com/sOuL2000s" target="_blank" aria-label="GitHub" class="hover:text-gray-900 transition-colors-shadow dark:hover:text-primary-accent-dark">
                        <i class="fab fa-github"></i>
                    </a>
                    <a href="mailto:souparnopaulreborn@gmail.com" aria-label="Email" class="hover:text-red-600 transition-colors-shadow dark:hover:text-primary-accent-dark">
                        <i class="fas fa-envelope"></i>
                    </a>
                </div>
            </div>
        </section>

        <!-- About Me Section (Concise with Read More) -->
        <section id="about" class="main-content-card rounded-xl p-6 md:p-10 mb-8 md:mb-12 transition-colors-shadow fade-in-section">
            <h2 class="text-3xl md:text-4xl font-bold mb-6 text-center">About Me</h2>
            <div class="about-me-content dark:text-text-color-dark">
                <p class="text-lg leading-relaxed mb-4">
                    I am a B.Tech CSE student from Narula Institute of Technology, Kolkata, graduating in 2025.
                    My journey in technology began with a strong interest in programming and problem-solving, leading me to delve into Python development, AI/ML, and full-stack web development.
                    I focus on building data-driven applications, highlighted by my <strong class="font-semibold">BTC Probo Predictor</strong>, <strong class="font-semibold">Smart Agritech Streamlit Dashboard</strong>, and a <strong class="font-semibold">Tournament Manager WebApp</strong>.
                </p>
                <!-- Expanded content for About Me -->
                <div id="aboutMore" class="expanded-content">
                    <p class="text-lg leading-relaxed mb-4">
                        My strengths lie in building diverse and impactful applications, ranging from real-time dashboards to robust full-stack web solutions.
                        I am proficient in various Python libraries and frameworks for data science and web development and experienced in developing and deploying machine learning models for real-world applications. I'm skilled in building interactive web applications using Streamlit, Firebase, and React.
                        Additionally, my passion for applying machine learning to real-world problems led to a <strong class="font-semibold">Best Paper Award for Phishing URL Detection</strong>.
                    </p>
                    <p class="text-lg leading-relaxed mt-4">
                        I thrive in environments that challenge me to learn and grow, and I am always eager to contribute to innovative projects.
                        Outside of academics, I enjoy <strong class="font-semibold">Writing Stories</strong> and <strong class="font-semibold">Songs</strong>, <strong class="font-semibold">Singing</strong>, and <strong class="font-semibold">Meditating</strong>.
                    </p>
                </div>
                <button id="toggleAbout" class="read-more-btn mt-4">Read More</button>
            </div>
        </section>

        <!-- Skills Section -->
        <section id="skills" class="main-content-card rounded-xl p-6 md:p-10 mb-8 md:mb-12 transition-colors-shadow fade-in-section">
            <h2 class="text-3xl md:text-4xl font-bold mb-6 text-center">Skills</h2>
            <div class="space-y-6">
                <div>
                    <h3 class="text-2xl font-semibold mb-3 flex items-center"><i class="fas fa-laptop-code mr-3 text-primary-accent dark:text-primary-accent-dark"></i>Programming Languages</h3>
                    <div class="flex flex-wrap gap-3">
                        <span class="skill-tag transition-colors-shadow break-words">Python</span>
                        <span class="skill-tag transition-colors-shadow break-words">JavaScript</span>
                        <span class="skill-tag transition-colors-shadow break-words">SQL</span>
                        <span class="skill-tag transition-colors-shadow break-words">C</span>
                        <span class="skill-tag transition-colors-shadow break-words">Java</span>
                        <span class="skill-tag transition-colors-shadow break-words">C++</span>
                    </div>
                </div>
                <div>
                    <h3 class="text-2xl font-semibold mb-3 flex items-center"><i class="fas fa-globe mr-3 text-primary-accent dark:text-primary-accent-dark"></i>Web Development</h3>
                    <div class="flex flex-wrap gap-3">
                        <span class="skill-tag transition-colors-shadow break-words">Streamlit</span>
                        <span class="skill-tag transition-colors-shadow break-words">React</span>
                        <span class="skill-tag transition-colors-shadow break-words">HTML</span>
                        <span class="skill-tag transition-colors-shadow break-words">CSS</span>
                        <span class="skill-tag transition-colors-shadow break-words">Render</span>
                        <span class="skill-tag transition-colors-shadow break-words">Django</span>
                    </div>
                </div>
                <div>
                    <h3 class="text-2xl font-semibold mb-3 flex items-center"><i class="fas fa-brain mr-3 text-primary-accent dark:text-primary-accent-dark"></i>Data Science & ML</h3>
                    <div class="flex flex-wrap gap-3">
                        <span class="skill-tag transition-colors-shadow break-words">Pandas</span>
                        <span class="skill-tag transition-colors-shadow break-words">NumPy</span>
                        <span class="skill-tag transition-colors-shadow break-words">Scikit-learn</span>
                        <span class="skill-tag transition-colors-shadow break-words">TensorFlow</span>
                        <span class="skill-tag transition-colors-shadow break-words">PyTorch</span>
                        <span class="skill-tag transition-colors-shadow break-words">Data Visualization</span>
                        <span class="skill-tag transition-colors-shadow break-words">Statistical Analysis</span>
                    </div>
                </div>
                <div>
                    <h3 class="text-2xl font-semibold mb-3 flex items-center"><i class="fas fa-database mr-3 text-primary-accent dark:text-primary-accent-dark"></i>Databases</h3>
                    <div class="flex flex-wrap gap-3">
                        <span class="skill-tag transition-colors-shadow break-words">Firebase-FireStore</span>
                        <span class="skill-tag transition-colors-shadow break-words">MongoDB</span>
                        <span class="skill-tag transition-colors-shadow break-words">MySQL</span>
                        <span class="skill-tag transition-colors-shadow break-words">SQLite</span>
                    </div>
                </div>
                <div>
                    <h3 class="text-2xl font-semibold mb-3 flex items-center"><i class="fas fa-tools mr-3 text-primary-accent dark:text-primary-accent-dark"></i>Tools & Platforms</h3>
                    <div class="flex flex-wrap gap-3">
                        <span class="skill-tag transition-colors-shadow break-words">Jupyter Notebooks</span>
                        <span class="skill-tag transition-colors-shadow break-words">VS Code</span>
                        <span class="skill-tag transition-colors-shadow break-words">Colab</span>
                        <span class="skill-tag transition-colors-shadow break-words">Power BI</span>
                        <span class="skill-tag transition-colors-shadow break-words">Excel</span>
                        <span class="skill-tag transition-colors-shadow break-words">GitHub</span>
                    </div>
                </div>
                <div>
                    <h3 class="text-2xl font-semibold mb-3 flex items-center"><i class="fas fa-users-line mr-3 text-primary-accent dark:text-primary-accent-dark"></i>Soft Skills</h3>
                    <div class="flex flex-wrap gap-3">
                        <span class="skill-tag transition-colors-shadow break-words">Problem-solving</span>
                        <span class="skill-tag transition-colors-shadow break-words">Teamwork</span>
                        <span class="skill-tag transition-colors-shadow break-words">Communication</span>
                        <span class="skill-tag transition-colors-shadow break-words">Adaptability</span>
                        <span class="skill-tag transition-colors-shadow break-words">Leadership</span>
                        <span class="skill-tag transition-colors-shadow break-words">Ability To Learn</span>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Scroll to Top Button -->
    <button id="scrollToTopBtn" aria-label="Scroll to top">
        <i class="fas fa-arrow-up"></i>
    </button>

    <!-- Mobile Fixed Bottom Navigation -->
    <nav id="mobileFixedNav" class="fixed bottom-0 left-0 w-full bg-white dark:bg-gray-900 shadow-lg md:hidden z-50 transition-colors-shadow border-t dark:border-gray-700">
        <div class="flex justify-around items-center h-16">
            <a href="index.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-home text-xl"></i>
                <span class="mt-1">Home</span>
            </a>
            <a href="projects.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-code text-xl"></i>
                <span class="mt-1">Projects</span>
            </a>
            <a href="education-achievements.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-graduation-cap text-xl"></i>
                <span class="mt-1">Edu & Ach</span>
            </a>
            <a href="contact.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-envelope text-xl"></i>
                <span class="mt-1">Contact</span>
            </a>
            <!-- Dark Mode Toggle moved here for mobile -->
            <button id="mobileDarkModeToggle" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark focus:outline-none transition-colors">
                <i class="fas fa-moon text-xl dark:hidden"></i>
                <i class="fas fa-sun text-xl hidden dark:block"></i>
                <span class="mt-1">Theme</span>
            </button>
        </div>
    </nav>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-6 text-center transition-colors-shadow dark:bg-navbar-bg-dark">
        <div class="container mx-auto px-4">
            <p class="text-sm">&copy; <span id="currentYear"></span> Souparna Paul. All rights reserved.</p>
            <p class="text-sm">Built with ❤️ using HTML, Tailwind CSS, and JavaScript.</p>
            <div class="flex justify-center space-x-4 text-xl mt-3">
                <a href="https://www.linkedin.com/in/souparno-paul-28a75524b/" target="_blank" aria-label="LinkedIn" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fab fa-linkedin"></i>
                </a>
                <a href="https://github.com/sOuL2000s" target="_blank" aria-label="GitHub" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fab fa-github"></i>
                </a>
                <a href="mailto:souparnopaulreborn@gmail.com" aria-label="Email" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fas fa-envelope"></i>
                </a>
            </div>
        </div>
    </footer>

    <!-- Shared Scripts -->
    <script src="static/js/scripts.js" defer></script>
    <!-- Page-specific Scripts -->
    <script>
        // Typewriter Effect - Adjusted for mobile responsiveness
        const typewriterTextElement = document.querySelector('.typewriter-text');
        const textToType = "AI & Full-Stack Developer | Python, ML, Web | Kolkata, India"; // Updated text

        function typeWriter(element, text, i = 0) {
            if (i < text.length) {
                element.textContent += text.charAt(i);
                setTimeout(() => typeWriter(element, text, i + 1), 50); // Typing speed
            } else {
                element.style.borderRight = 'none'; // Remove cursor after typing
            }
        }

        const applyTypewriterEffect = () => {
            if (!typewriterTextElement) return;

            const isMobile = window.matchMedia('(max-width: 639px)').matches; // Corresponds to Tailwind's 'sm' breakpoint

            if (isMobile) {
                typewriterTextElement.textContent = textToType; // Show full text immediately
                typewriterTextElement.style.borderRight = 'none'; // Ensure no blinking caret
            } else {
                // Only re-type if content is different or caret is missing
                if (typewriterTextElement.textContent !== textToType || typewriterTextElement.style.borderRight === 'none') {
                    typewriterTextElement.textContent = ''; // Clear text before typing
                    typewriterTextElement.style.removeProperty('border-right'); // Ensure caret can appear
                    typeWriter(typewriterTextElement, textToType); // Run typing animation for larger screens
                }
            }
        };

        // Apply on initial load
        document.addEventListener('DOMContentLoaded', applyTypewriterEffect);

        // Re-apply if screen size changes (e.g., rotating tablet or resizing desktop window)
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(applyTypewriterEffect, 200); // Debounce for performance
        });

        // Toggle "About Me" section on index.html
        const toggleAboutButton = document.getElementById('toggleAbout');
        const aboutMoreContent = document.getElementById('aboutMore');

        if(toggleAboutButton && aboutMoreContent) { // Check if elements exist on this page
            toggleAboutButton.addEventListener('click', () => {
                const isExpanded = aboutMoreContent.classList.toggle('show');
                toggleAboutButton.textContent = isExpanded ? 'Show Less' : 'Read More';
            });
        }
    </script>
</body>
</html>

--- END FILE: index.html ---

--- START FILE: projects.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Souparna Paul - Projects</title>
    <!-- SEO Meta Tags -->
    <meta name="description" content="Explore Souparna Paul's AI and Full-Stack development projects, including BTC Probo Predictor, Smart Agritech, Tournament Manager, and Phishing URL Detection.">
    <meta name="keywords" content="Souparna Paul projects, AI projects, full-stack projects, Python projects, Machine Learning projects, Streamlit projects, React projects, web development projects, portfolio projects">
    <meta property="og:title" content="Souparna Paul - Projects">
    <meta property="og:description" content="Explore Souparna Paul's AI and Full-Stack development projects.">
    <meta property="og:image" content="https://souparna-paul-portfolio.netlify.app/profile.png"> <!-- Replace with your live site's profile image URL -->
    <meta property="og:url" content="https://souparna-paul-portfolio.netlify.app/projects.html"> <!-- Replace with your live site URL -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="https://souparna-paul-portfolio.netlify.app/profile.png"> <!-- Replace with your live site's profile image URL -->

    <!-- Favicon - Replace with your actual favicon.ico or .png -->
    <link rel="icon" href="profile.png" type="image/png">

    <!-- Preconnect for Google Fonts to improve loading speed -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter with font-display: swap for better performance -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="static/css/styles.css">
</head>
<body>
    <!-- NOTE: For faster loading, please optimize all images (compress, consider WebP format) -->

    <!-- Header/Navigation Bar -->
    <header class="shadow-lg py-4 sticky top-0 z-20 transition-colors-shadow dark:shadow-none">
        <div class="container mx-auto px-4 flex justify-between items-center">
            <a href="index.html" class="text-2xl font-extrabold text-gray-800 hover:text-blue-600 transition-colors-shadow dark:text-heading-color-dark dark:hover:text-primary-accent-dark">Souparna Paul</a>
            <div class="flex items-center space-x-6">
                <!-- Dark Mode Toggle (Desktop) -->
                <div id="darkModeToggle" class="relative hidden md:flex">
                    <div class="toggle-circle"></div>
                </div>

                <!-- Navigation Links (Desktop) -->
                <nav id="navLinksDesktop" class="nav-links-desktop hidden md:flex md:space-x-6">
                    <a href="index.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Home</a>
                    <a href="projects.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Projects</a>
                    <a href="education-achievements.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Education & Achievements</a>
                    <a href="contact.html" class="text-gray-600 hover:text-blue-600 font-medium transition-colors-shadow dark:text-text-color-dark dark:hover:text-primary-accent-dark">Contact</a>
                </nav>
            </div>
        </div>
    </header>

    <main class="container mx-auto px-4 py-8 md:py-12">
        <!-- Projects Section -->
        <section id="projects" class="main-content-card rounded-xl p-6 md:p-10 mb-8 md:mb-12 transition-colors-shadow fade-in-section">
            <h2 class="text-3xl md:text-4xl font-bold mb-6 text-center">My Projects</h2>

            <!-- Project Filter Buttons -->
            <div class="mb-8 flex flex-wrap gap-3 justify-center md:justify-start">
                <button class="filter-btn skill-tag active" data-filter="all">All</button>
                <button class="filter-btn skill-tag" data-filter="ai-ml">AI/ML</button>
                <button class="filter-btn skill-tag" data-filter="full-stack">Full-Stack</button>
                <button class="filter-btn skill-tag" data-filter="streamlit">Streamlit</button>
                <button class="filter-btn skill-tag" data-filter="react">React</button>
                <button class="filter-btn skill-tag" data-filter="python">Python</button>
                <button class="filter-btn skill-tag" data-filter="web-dev">Web Development</button>
                <button class="filter-btn skill-tag" data-filter="team">Team Projects</button>
            </div>

            <h3 class="text-2xl md:text-3xl font-bold mb-4">Individual Projects</h3>
            <div id="individual-projects-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                <!-- Project cards will be dynamically inserted here -->
            </div>

            <h3 class="text-2xl md:text-3xl font-bold mt-10 mb-4">Team Projects</h3>
            <div id="team-projects-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                <!-- Team project cards will be dynamically inserted here -->
            </div>
        </section>
    </main>

    <!-- Project Details Modal Overlay -->
    <div id="projectModal" class="modal-overlay" role="dialog" aria-modal="true" aria-labelledby="modal-project-title">
        <div class="modal-content transition-colors-shadow">
            <button class="modal-close-btn" aria-label="Close project details"><i class="fas fa-times"></i></button>
            <img id="modal-project-image" src="" alt="Project Image" loading="lazy" class="modal-image">
            <h3 id="modal-project-title" class="text-3xl font-bold mb-4 dark:text-heading-color-dark"></h3>
            <p id="modal-project-description" class="text-lg leading-relaxed mb-6 dark:text-text-color-dark"></p>
            <p class="font-semibold mb-2 dark:text-text-color-dark">Tools Used:</p>
            <div id="modal-project-tools" class="flex flex-wrap gap-2 mb-4">
                <!-- Skill tags will be injected here -->
            </div>
            <p class="text-sm text-gray-600 mb-4 dark:text-text-color-dark">Date: <span id="modal-project-date"></span></p>
            <div class="modal-links flex flex-wrap gap-x-4 gap-y-2">
                <a id="modal-github-link" href="#" target="_blank" class="text-blue-600 hover:underline dark:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover flex items-center break-words"><i class="fab fa-github mr-1"></i>GitHub</a>
                <a id="modal-livedemo-link" href="#" target="_blank" class="text-blue-600 hover:underline dark:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover flex items-center break-words"><i class="fas fa-external-link-alt mr-1"></i>Live Demo</a>
            </div>
        </div>
    </div>

    <!-- Scroll to Top Button -->
    <button id="scrollToTopBtn" aria-label="Scroll to top">
        <i class="fas fa-arrow-up"></i>
    </button>

    <!-- Mobile Fixed Bottom Navigation -->
    <nav id="mobileFixedNav" class="fixed bottom-0 left-0 w-full bg-white dark:bg-gray-900 shadow-lg md:hidden z-50 transition-colors-shadow border-t dark:border-gray-700">
        <div class="flex justify-around items-center h-16">
            <a href="index.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-home text-xl"></i>
                <span class="mt-1">Home</span>
            </a>
            <a href="projects.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-code text-xl"></i>
                <span class="mt-1">Projects</span>
            </a>
            <a href="education-achievements.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-graduation-cap text-xl"></i>
                <span class="mt-1">Edu & Ach</span>
            </a>
            <a href="contact.html" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark transition-colors">
                <i class="fas fa-envelope text-xl"></i>
                <span class="mt-1">Contact</span>
            </a>
            <!-- Dark Mode Toggle moved here for mobile -->
            <button id="mobileDarkModeToggle" class="nav-item flex flex-col items-center text-xs px-2 py-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-primary-accent-dark focus:outline-none transition-colors">
                <i class="fas fa-moon text-xl dark:hidden"></i>
                <i class="fas fa-sun text-xl hidden dark:block"></i>
                <span class="mt-1">Theme</span>
            </button>
        </div>
    </nav>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-6 text-center transition-colors-shadow dark:bg-navbar-bg-dark">
        <div class="container mx-auto px-4">
            <p class="text-sm">&copy; <span id="currentYear"></span> Souparna Paul. All rights reserved.</p>
            <p class="text-sm">Built with ❤️ using HTML, Tailwind CSS, and JavaScript.</p>
            <div class="flex justify-center space-x-4 text-xl mt-3">
                <a href="https://www.linkedin.com/in/souparno-paul-28a75524b/" target="_blank" aria-label="LinkedIn" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fab fa-linkedin"></i>
                </a>
                <a href="https://github.com/sOuL2000s" target="_blank" aria-label="GitHub" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fab fa-github"></i>
                </a>
                <a href="mailto:souparnopaulreborn@gmail.com" aria-label="Email" class="hover:text-primary-accent-dark dark:hover:text-primary-accent-dark-hover">
                    <i class="fas fa-envelope"></i>
                </a>
            </div>
        </div>
    </footer>

    <!-- Shared Scripts -->
    <script src="static/js/scripts.js" defer></script>
    <!-- Page-specific Scripts -->
    <script>
        // --- Project Data and Modal Logic (Specific to projects.html) ---

        const projectsData = [
            // Individual Projects
            {
                id: 'python-syllabus',
                type: 'individual',
                title: 'Python Syllabus Website',
                image: 'python.png',
                shortDescription: 'An interactive Python learning portal from basics to advanced OOP.',
                fullDescription: 'A structured and interactive Python learning portal designed for beginners. It covers everything from fundamental programming concepts to advanced Object-Oriented Programming (OOP) principles. The website features a clean user interface, embedded code examples for hands-on practice, and a clear, syllabus-like roadmap to guide users through self-paced learning, making complex topics accessible and engaging.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Python'],
                tags: ['web-dev', 'python'],
                date: '2024',
                github: 'https://github.com/sOuL2000s/python-syllabus-website.git',
                livedemo: 'https://python-syllabus-website.netlify.app/'
            },
            {
                id: 'btc-probo',
                type: 'individual',
                title: 'BTC Probo Predictor (Mobile Friendly)',
                image: 'probo.PNG',
                shortDescription: 'AI Bitcoin price predictor with real-time data & sentiment analysis.',
                fullDescription: 'An AI-driven Bitcoin price prediction application designed with a mobile-friendly interface. This tool actively compares real-time market values from the Binance API with user-defined target prices. It integrates sentiment analysis for a more nuanced prediction and visualizes complex data with interactive Plotly charts, making it an invaluable resource for both cryptocurrency traders and enthusiasts of platforms like Probo.',
                tools: ['Python', 'Streamlit', 'Plotly', 'Pandas', 'Binance API'],
                tags: ['ai-ml', 'python', 'streamlit', 'web-dev'],
                date: 'July 2025',
                github: 'https://github.com/sOuL2000s/html-probo-predictor-website.git',
                livedemo: 'https://probo-crypto-predictor.netlify.app/'
            },
            {
                id: 'smart-agritech',
                type: 'individual',
                title: 'Smart AgriTech Dashboard',
                image: 'agritech.PNG',
                shortDescription: 'AI-powered farming assistant monitoring soil, weather, and crops.',
                fullDescription: 'A sophisticated, next-generation farming assistant implemented as a Streamlit dashboard. It offers real-time monitoring of crucial agricultural data including soil conditions, weather patterns, and crop health. The system employs AI-powered time-series forecasting to predict soil moisture levels and provides farmers with personalized, data-driven crop recommendations, optimizing yield and resource management.',
                tools: ['Python', 'Streamlit', 'TensorFlow', 'Firebase', 'Plotly'],
                tags: ['ai-ml', 'python', 'streamlit', 'web-dev'],
                date: 'June 2025',
                github: 'https://github.com/sOuL2000s/Smart-AgriTech-Streamlit-Dashbard.git',
                livedemo: 'https://smart-agritech-dashbard.netlify.app/'
            },
            {
                id: 'mathematico',
                type: 'individual',
                title: 'MATHEMATICO - Special Mathematics Coaching Website',
                image: 'mathematico.PNG',
                shortDescription: 'Modern coaching site with dynamic courses, blog, and admin CMS.',
                fullDescription: 'A modern and feature-rich website for a mathematics coaching institute. This platform boasts dynamic course management capabilities, allowing for easy updates and scheduling. It includes sections for testimonials, a comprehensive gallery, and an engaging blog system. Integrated with Google Maps for location services and featuring both dark/light themes, the website is built with an admin-controlled Content Management System (CMS) for effortless content updates, providing a seamless experience for students and administrators alike.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Tailwind CSS', 'Firebase'],
                tags: ['web-dev', 'full-stack'],
                date: 'July 2025',
                github: 'https://github.com/sOuL2000s/mathematico-coaching-website.git',
                livedemo: 'https://mathematico-special-coaching-center.netlify.app/'
            },
            {
                id: 'tournament-manager-fullstack',
                type: 'individual',
                title: 'Tournament Manager Full-Stack Web Application',
                image: 'tournament.PNG',
                shortDescription: 'Full-stack app managing tournaments with automated fixtures and live scores.',
                fullDescription: 'A robust full-stack web application designed to efficiently manage cricket and football tournaments. The system automates fixture generation, provides real-time live score updates, and automatically calculates and generates leaderboards. This application significantly streamlines the entire sports event management process for organizers and offers a transparent, engaging experience for players and fans.',
                tools: ['React.js', 'Node.js', 'Express.js', 'MongoDB'],
                tags: ['full-stack', 'react', 'web-dev'],
                date: 'May 2025',
                github: 'https://github.com/sOuL2000s/tournament-manager-FULL-STACK.git',
                livedemo: 'https://tournament-manager-website.netlify.app/'
            },
            {
                id: 'portfolio-website',
                type: 'individual',
                title: 'My Personal Portfolio Website',
                image: 'portfolio.PNG',
                shortDescription: 'Showcasing skills, projects, and achievements with responsive design.',
                fullDescription: 'This is my personal portfolio website, a dynamic platform built to showcase my diverse skills, impactful projects, and notable achievements as an AI & Full-Stack Developer. It features a fully responsive design, ensuring optimal viewing across all devices, smooth scroll navigation for an intuitive user experience, and a flexible theme-switching functionality (light/dark mode) to cater to user preferences, all contributing to an engaging and professional online presence.',
                tools: ['HTML', 'CSS', 'Tailwind CSS', 'JavaScript'],
                tags: ['web-dev'],
                date: '2024 (Ongoing)',
                github: 'https://github.com/sOuL2000s/My-Portfolio-Website-Streamlit.git',
                livedemo: 'https://souparna-paul-portfolio.netlify.app/'
            },
            {
                id: 'dream11-ai-predictor',
                type: 'individual',
                title: 'Dream11 AI Team Predictor',
                image: 'dream11.PNG',
                shortDescription: 'AI fantasy cricket assistant for optimal Dream11 team suggestions.',
                fullDescription: 'An intelligent, AI-powered fantasy cricket assistant designed to give users a competitive edge in Dream11. This application utilizes sophisticated machine learning algorithms to analyze extensive match data, evaluate individual player performance statistics, and generate highly optimized team suggestions. It\'s built for fantasy sports enthusiasts seeking data-driven insights for strategic team selection.',
                tools: ['Python', 'Streamlit', 'Pandas', 'Machine Learning'],
                tags: ['ai-ml', 'python', 'streamlit', 'web-dev'],
                date: '2024',
                github: 'https://github.com/sOuL2000s/dream11-team-predictor-ai.git',
                livedemo: 'https://dream11-ai-team-predictor.netlify.app/'
            },
            {
                id: 'mystic-vision-chatbot',
                type: 'individual',
                title: 'Mystic Vision AI Standalone Chatbot',
                image: 'mystic.PNG',
                shortDescription: 'Customizable AI chatbot with NLP, offered in multiple versions.',
                fullDescription: 'A highly customizable AI chatbot offered in multiple deployment versions, including basic, mini, lite, and a standalone full version. This chatbot is built with advanced Natural Language Processing (NLP) capabilities, enabling sophisticated conversational intelligence. Each version is packaged with a sleek and intuitive Streamlit user interface, providing a refined and engaging interaction experience.',
                tools: ['Python', 'Streamlit', 'Natural Language Processing (NLP)', 'Machine Learning'],
                tags: ['ai-ml', 'python', 'streamlit', 'web-dev'],
                date: 'July 2024',
                github: 'https://github.com/sOuL2000s/Mystic-Vision-AI-Standalone-Chatbot.git',
                livedemo: 'https://mystic-vision-ai-standalone-chatbot.netlify.app/'
            },
            {
                id: 'metier-institute',
                type: 'individual',
                title: 'Metier Institute - Full-Stack Website',
                image: 'metier.PNG',
                shortDescription: 'Full-stack website for an educational institute with CMS and auth.',
                fullDescription: 'A comprehensive, responsive full-stack website developed specifically for an educational institute. It features robust content management capabilities, secure user authentication systems, detailed course listings with flexible categorization, and a suite of administrative functionalities for efficient school management. Built to provide a dynamic online presence and streamline institutional operations, this project ensures an optimal user experience and easy content updates through a scalable architecture designed for growth.',
                tools: ['React.js', 'Node.js', 'Express.js', 'MongoDB', 'Firebase'],
                tags: ['full-stack', 'react', 'web-dev'],
                date: 'August 2024',
                github: 'https://github.com/sOuL2000s/Metier-Institute-Full-Stack-Website.git',
                livedemo: 'https://metier-institute-your-path-to-success.netlify.app/'
            },
            {
                id: 'astromaestro-ai',
                type: 'individual',
                title: 'AstroMaestro AI - Personalized Vedic Astrology',
                image: 'astromaestro.PNG',
                shortDescription: 'AI astrology app for personalized Vedic insights using NLP/ML.',
                fullDescription: 'An innovative AI-powered astrology application that generates personalized Vedic insights based on comprehensive user input. This project uniquely blends traditional astrological wisdom with modern Natural Language Processing (NLP) and Machine Learning (ML) techniques to create a nuanced and digital astrology experience. Users receive tailored readings, predictions, and guidance, making ancient practices accessible through cutting-edge technology.',
                tools: ['Python', 'Streamlit', 'Machine Learning', 'Natural Language Processing (NLP)'],
                tags: ['ai-ml', 'python', 'streamlit', 'web-dev'],
                date: 'August 2024',
                github: 'https://github.com/sOuL2000s/AstroMaestro-AI.git',
                livedemo: 'https://astromaestro-ai.netlify.app/'
            },
            {
                id: 'multi-game-hub',
                type: 'individual',
                title: 'Multi-Game HUB Website',
                image: 'multi-game-hub.PNG',
                shortDescription: 'Online hub for mini-games with interactive design and smooth gameplay.',
                fullDescription: 'An engaging online hub designed to centralize multiple mini-games within a single, interactive portal. This website showcases creative JavaScript-based game development with smooth gameplay and a user-friendly interface. It provides a fun, accessible platform for users to enjoy various casual games without needing to navigate between different sites, demonstrating proficiency in front-end game integration and web design.',
                tools: ['HTML', 'CSS', 'JavaScript'],
                tags: ['web-dev'],
                date: 'August 2024',
                github: 'https://github.com/sOuL2000s/Multi-game-HUB-Website.git',
                livedemo: 'https://multi-game-hub-website.netlify.app/'
            },
            {
                id: 'meditation-companion',
                type: 'individual',
                title: 'Yogify - Meditation Companion App',
                image: 'meditation-companion-app.png',
                shortDescription: 'Wellness app for guided meditation, mood tracking, and AI practices.',
                fullDescription: 'A comprehensive wellness application, \'Yogify,\' designed to enhance mental health and focus through guided meditation. The app intelligently tracks user moods over time and suggests personalized mindfulness practices using AI personalization. It offers a structured approach to meditation, catering to individual needs and progress, making it an ideal companion for anyone looking to integrate mindfulness into their daily routine.',
                tools: ['Python', 'Streamlit', 'Natural Language Processing (NLP)', 'Machine Learning'],
                tags: ['ai-ml', 'python', 'streamlit', 'web-dev'],
                date: 'August 2024',
                github: 'https://github.com/sOuL2000s/Meditation-Companion-App.git',
                livedemo: 'https://mysticvision-meditation-companion-app.netlify.app/'
            },
            {
                id: 'cosmic-chat-ai',
                type: 'individual',
                title: 'Cosmic Chat AI - Simple AI Chatbot',
                image: 'cosmic.png',
                shortDescription: 'Lightweight AI chatbot with Gemini API, file upload, dark/light mode.',
                fullDescription: 'A lightweight and user-friendly AI chatbot, \'Cosmic Chat AI,\' seamlessly integrated with the Gemini API for advanced conversational capabilities. This application features comprehensive file upload support, allowing users to interact with the AI using various document types. It offers both dark and light modes for personalized viewing, all presented within a sleek user interface powered by Tailwind CSS, ensuring a modern and intuitive interaction.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Tailwind CSS', 'AI/NLP', 'Gemini API'],
                tags: ['ai-ml', 'web-dev'],
                date: 'December 2023',
                github: 'https://github.com/sOuL2000s/Cosmic-Chat-AI-simple-ai-chatbot-.git',
                livedemo: 'https://cosmic-chat-ai-simple-ai-chatbot.netlify.app/'
            },
            {
                id: 'small-ai-big-vision',
                type: 'individual',
                title: 'Small AI - Big Vision AI Chatbot',
                image: 'small-ai.PNG',
                shortDescription: 'AI chat assistant with Gemini API, markdown, voice input, file attachments.',
                fullDescription: 'An intelligent AI chat assistant, \'Small AI - Big Vision,\' that integrates the powerful Gemini API to provide advanced conversational capabilities. It boasts a clean, highly responsive user interface with comprehensive markdown support for rich text interactions. Key features include dynamic dark/light themes, voice input for hands-free communication, and support for file attachments, creating a versatile and engaging conversational experience.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Tailwind CSS', 'Gemini API', 'AI/NLP', 'Web Speech API', 'Marked.js'],
                tags: ['ai-ml', 'web-dev'],
                date: 'December 2023',
                github: 'https://github.com/sOuL2000s/SMALL-AI.git',
                livedemo: 'https://small-ai-big-vision.netlify.app/'
            },
            {
                id: 'journal-ai',
                type: 'individual',
                title: 'The Journal AI - Personal AI Journaling App',
                image: 'journal-ai.PNG',
                shortDescription: 'AI journaling app for entry analysis, mood tracking, and self-reflection prompts.',
                fullDescription: 'A personal AI journaling assistant designed to revolutionize self-reflection and mood tracking. This application intelligently analyzes daily journal entries, provides concise summaries of content and themes, tracks mood fluctuations over time, and offers personalized prompts to encourage deeper introspection. Leveraging advanced AI and Large Language Models (LLM), \'The Journal AI\' transforms a simple journaling practice into a powerful tool for personal growth and mental well-being.',
                tools: ['Python', 'Streamlit', 'Natural Language Processing (NLP)', 'Machine Learning', 'AI/LLM'],
                tags: ['ai-ml', 'python', 'streamlit', 'web-dev'],
                date: 'August 2024',
                github: 'https://github.com/sOuL2000s/The-Journal-AI.git',
                livedemo: 'https://the-journal-ai.netlify.app/'
            },
            {
                id: 'simple-tournament-manager',
                type: 'individual',
                title: 'Simple Tournament Manager App',
                image: 'simple-tourny.PNG',
                shortDescription: 'Lightweight web app for creating and managing tournaments with ease.',
                fullDescription: 'A lightweight and intuitive web application designed to simplify tournament creation and management. Users can easily add teams, set up match schedules, and track results in a seamless and straightforward manner. Built with a focus on simplicity and usability, this app is an ideal solution for organizing small competitions, casual tournaments, or any event requiring basic fixture and score management.',
                tools: ['HTML', 'CSS', 'JavaScript'],
                tags: ['web-dev'],
                date: 'September 2024',
                github: 'https://github.com/sOuL2000s/Simple-Tournament-Manager-App.git',
                livedemo: 'https://simple-tournament-manager-app.netlify.app/'
            },
            {
                id: 'excel-exporter-extension',
                type: 'individual',
                title: 'Excel Exporter Browser Extension',
                image: 'excel-exporter.png',
                shortDescription: 'Browser extension for automated form filling from spreadsheets.',
                fullDescription: 'A powerful and highly efficient browser extension designed to significantly streamline data entry workflows. This tool allows users to upload a spreadsheet (supporting various formats like .xlsx, .csv), intelligently map its columns to specific form fields found on any webpage, and then automatically fill those fields. It includes advanced features such as batch filling, conditional filling (only populating empty fields), and automated button clicking, enabling comprehensive workflow automation for repetitive data entry tasks.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Fuse.js', 'SheetJS'],
                tags: ['web-dev'],
                date: 'September 2024',
                github: 'https://github.com/sOuL2000s/Excel-Exporter-Browser-Extension.git',
                livedemo: null // No live demo for browser extension
            },
            {
                id: 'ai-shape-shifter',
                type: 'individual',
                title: 'AI Shape Shifter Website',
                image: 'ai-shape-shifter.PNG',
                shortDescription: 'AI-powered website builder with chatbot interaction and real-time customization.',
                fullDescription: 'An innovative AI-powered website builder that redefines web page creation. Users interact with an intelligent chatbot to instantly generate and customize web page elements and layouts. This dynamic platform features local storage capabilities for saving ongoing changes, robust dynamic section management, and real-time style updates, offering a highly interactive and intuitive experience for building and modifying web content on the fly.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Gemini API'],
                tags: ['ai-ml', 'web-dev'],
                date: '2023',
                github: 'https://github.com/sOuL2000s/AI-Shape-Shifter-Website.git',
                livedemo: 'https://ai-shape-shifter-website.netlify.app/'
            },
            {
                id: 'football-tournament-hub',
                type: 'individual',
                title: 'The Winner Challenge - Football Tournament Hub',
                image: 'football-tournament-hub.png',
                shortDescription: 'Football tournament manager with League, Champions League, World Cup modes.',
                fullDescription: 'A comprehensive football tournament manager web application designed to handle various competition formats, including League, Champions League, and World Cup modes. It provides a complete suite of tools for tournament organizers, allowing them to effortlessly create and manage tournaments, add and track teams and players, generate detailed fixtures, record live score updates, view real-time standings, compile player statistics, and visualize knockout brackets. Enhanced with dark/light theme options and robust data import/export functionalities, this hub delivers a powerful and user-friendly experience for any football event.',
                tools: ['HTML', 'CSS', 'JavaScript'],
                tags: ['web-dev'],
                date: 'September 2024',
                github: 'https://github.com/sOuL2000s/The-Winner-Challenge-Football-Tournament-Hub.git',
                livedemo: 'https://the-winner-challenge-tournament-hub.netlify.app/'
            },
            {
                id: 'small-ai-v2',
                type: 'individual',
                title: 'Small AI v2 - Multi-Themed AI Chatbot',
                image: 'small-ai-v2.PNG',
                shortDescription: 'Advanced, multi-themed AI chatbot with Gemini API, PWA, voice input.',
                fullDescription: 'An advanced, multi-themed AI chat assistant, \'Small AI v2,\' that significantly enhances the original \'Small AI - Big Vision\' with expanded features and a refined user experience. Integrating the Gemini API, it provides a sleek, responsive UI with comprehensive markdown support, dynamic dark/light themes, voice input capabilities, and support for file attachments. A key improvement is the comprehensive chat session management system, allowing users to save, load, and manage multiple conversations. This version also offers Progressive Web App (PWA) capabilities, providing a native app-like experience directly from the browser.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Tailwind CSS', 'Gemini API', 'AI/NLP', 'Web Speech API', 'Marked.js', 'Local Storage', 'PWA'],
                tags: ['ai-ml', 'web-dev'],
                date: 'October 2024 (v2 Update)',
                github: 'https://github.com/sOuL2000s/SMALL-AI-v2.git',
                livedemo: 'https://small-ai-big-vision-v2.netlify.app/'
            },
            {
                id: 'ai-text-beautifier',
                type: 'individual',
                title: 'AI Text Beautifier & Chatbot',
                image: 'beautifier-ai.png',
                shortDescription: 'AI web app for text beautification & real-time chatbot with Gemini API.',
                fullDescription: 'An innovative AI-powered web application that offers intelligent text beautification and real-time conversational capabilities. It transforms plain text into elegantly formatted Markdown using the Gemini API, ensuring professional and readable output. The application boasts dynamic theme selection (dark/light mode), Progressive Web App (PWA) support for an app-like experience, and an integrated chatbot with voice input and file attachment functionalities. This project demonstrates a blend of utility and advanced AI interaction within a sleek, user-friendly interface.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Tailwind CSS', 'Gemini API', 'AI/NLP', 'Web Speech API', 'Marked.js', 'PWA', 'Local Storage'],
                tags: ['ai-ml', 'web-dev'],
                date: 'September 2024',
                github: 'https://github.com/sOuL2000s/AI-Text-Beautifier.git',
                livedemo: 'https://ai-text-beautifier.netlify.app/'
            },
            {
                id: 'community-notice-board',
                type: 'individual',
                title: 'Community Notice Board',
                image: 'community-notice-board.png',
                shortDescription: 'Web app to centralize community announcements and urgent notices.',
                fullDescription: 'A lightweight and efficient web application meticulously designed to centralize community announcements, upcoming events, and urgent notices. This platform serves as a powerful alternative to fragmented communication methods like WhatsApp groups or scattered Facebook posts, providing authorized administrators with a structured, easy-to-manage environment to share critical information effectively, ensuring all community members stay informed.',
                tools: ['HTML', 'CSS', 'JavaScript'],
                tags: ['web-dev'],
                date: 'October 2024',
                github: 'https://github.com/sOuL2000s/Community-Notice-Board.git',
                livedemo: null
            },
            {
                id: 'lost-found-tracker',
                type: 'individual',
                title: 'Lost & Found Tracker Web Application',
                image: 'lost-found-tracker.png',
                shortDescription: 'Web app for reporting/searching lost & found items with filters.',
                fullDescription: 'An intuitive web application meticulously crafted to assist individuals in efficiently reporting and searching for lost or found items. This platform establishes a central, easily accessible hub with robust filtering capabilities, allowing users to quickly narrow down searches by location, item category, and specific item type. The aim is to streamline the often-stressful process of reuniting owners with their lost belongings, enhancing community collaboration and efficiency.',
                tools: ['HTML', 'CSS', 'JavaScript', 'Firebase'],
                tags: ['web-dev', 'full-stack'],
                date: 'October 2024',
                github: 'https://github.com/sOuL2000s/Lost-Found-Tracker-Web-Application.git',
                livedemo: null
            },

            // Team Projects
            {
                id: 'parkinsons-detection',
                type: 'team',
                title: 'Early Detection of Parkinson’s Disease Using ML',
                image: 'parkinson\'s.png',
                shortDescription: 'ML model for early Parkinson’s disease detection using voice/motion data.',
                fullDescription: 'This research project focuses on developing a machine learning model for the early detection of Parkinson’s disease. Utilizing a dataset of biomedical voice and motion data, the model aims to identify subtle indicators of the disease in its nascent stages. The primary objective is to contribute to medical research by providing a predictive healthcare tool that could facilitate earlier diagnosis and intervention, potentially improving patient outcomes and quality of life.',
                tools: ['Python', 'Scikit-learn', 'Pandas', 'Machine Learning'],
                tags: ['ai-ml', 'python', 'team'],
                date: '2023',
                github: 'https://github.com/sOuL2000s/early-parkinsons-detection-ml.git',
                livedemo: null
            },
            {
                id: 'employee-management-system',
                type: 'team',
                title: 'Employee Management System Website',
                image: 'ems.PNG',
                shortDescription: 'Web-based employee portal with role-based authentication & HR workflows.',
                fullDescription: 'A robust web-based employee management portal designed to streamline human resources workflows. This system features secure role-based authentication, ensuring data integrity and access control. It facilitates various HR operations, from onboarding to performance tracking, with real-time database integration (Firebase Firestore) for immediate data accessibility and updates. The application helps companies efficiently manage their workforce, improving operational efficiency and employee experience.',
                tools: ['Node.js', 'React.js', 'Firebase Firestore', 'HTML', 'CSS'],
                tags: ['full-stack', 'react', 'web-dev', 'team'],
                date: 'Jan 2024 - June 2024',
                github: 'https://github.com/sOuL2000s/simple-employee-management-system.git',
                livedemo: 'https://employee-management-system21.netlify.app/'
            },
            {
                id: 'phishing-url-detection',
                type: 'team',
                title: 'Phishing URL Detection Using Machine Learning',
                image: 'phishing.png',
                shortDescription: 'ML model to detect malicious phishing URLs. (Awarded Best Paper)',
                fullDescription: 'A critical machine learning project focused on the detection of malicious phishing URLs. This research involved comprehensive data collection, meticulous feature engineering to extract distinguishing characteristics from URLs, and the training of various ML models (including TensorFlow-based deep learning and Scikit-learn algorithms) to identify and flag potential phishing attempts. The project aims to enhance cybersecurity defenses by providing an automated and intelligent system for real-time threat detection, and it was recognized with a Best Paper Award.',
                tools: ['Python', 'TensorFlow', 'Scikit-learn', 'Machine Learning'],
                tags: ['ai-ml', 'python', 'team'],
                date: '2024',
                github: null, // No GitHub link provided in original
                livedemo: null // No Live Demo link provided in original
            }
        ];

        // Function to create a project card HTML element
        function createProjectCard(project) {
            const card = document.createElement('div');
            card.className = 'project-card rounded-lg p-6 transition-colors-shadow flex flex-col min-w-0';
            card.dataset.tags = project.tags.join(' '); // Add tags for filtering

            card.innerHTML = `
                <img src="${project.image}" alt="${project.title}" loading="lazy" class="project-image">
                <h4 class="text-xl font-semibold mb-3 break-words">${project.title}</h4>
                <p class="short-summary text-base mb-2 flex-grow break-words">${project.shortDescription}</p>
                <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 mt-auto">
                    <button class="read-more-btn toggle-project-details w-full" data-project-id="${project.id}">Show Details</button>
                </div>
            `;
            return card;
        }

        // Function to render projects into their respective grids
        function renderProjects(filter = 'all') {
            const individualGrid = document.getElementById('individual-projects-grid');
            const teamGrid = document.getElementById('team-projects-grid');

            if (!individualGrid || !teamGrid) return;

            individualGrid.innerHTML = ''; // Clear existing content
            teamGrid.innerHTML = ''; // Clear existing content

            const filteredProjects = projectsData.filter(project => {
                if (filter === 'all') return true;
                if (filter === 'team') return project.type === 'team';
                return project.tags && project.tags.includes(filter);
            });

            filteredProjects.forEach(project => {
                const card = createProjectCard(project);
                if (project.type === 'individual') {
                    individualGrid.appendChild(card);
                } else if (project.type === 'team') {
                    teamGrid.appendChild(card);
                }
            });

            // Re-attach event listeners for dynamically created buttons
            document.querySelectorAll('.toggle-project-details').forEach(button => {
                button.addEventListener('click', (e) => {
                    const projectId = e.target.dataset.projectId;
                    const project = projectsData.find(p => p.id === projectId);
                    if (project) {
                        openProjectModal(project);
                    }
                });
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            renderProjects(); // Call on page load

            // Project Filtering Logic
            const filterButtons = document.querySelectorAll('.filter-btn');
            filterButtons.forEach(button => {
                button.addEventListener('click', () => {
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    const filter = button.dataset.filter;
                    renderProjects(filter);
                });
            });
        });


        // Project Modal Logic
        const projectModal = document.getElementById('projectModal');
        const modalCloseBtn = projectModal.querySelector('.modal-close-btn');

        const modalImage = document.getElementById('modal-project-image');
        const modalTitle = document.getElementById('modal-project-title');
        const modalDescription = document.getElementById('modal-project-description');
        const modalTools = document.getElementById('modal-project-tools');
        const modalDate = document.getElementById('modal-project-date');
        const modalGithubLink = document.getElementById('modal-github-link');
        const modalLivedemoLink = document.getElementById('modal-livedemo-link');

        function openProjectModal(projectData) {
            modalImage.src = projectData.image;
            modalImage.alt = projectData.title;
            modalTitle.textContent = projectData.title;
            modalDescription.textContent = projectData.fullDescription; // Use full description
            modalDate.textContent = projectData.date;

            // Clear previous tools
            modalTools.innerHTML = '';
            projectData.tools.forEach(tool => { // Iterate array directly
                const span = document.createElement('span');
                span.className = 'skill-tag rounded-md px-3 py-1 text-xs font-medium break-words';
                span.textContent = tool;
                modalTools.appendChild(span);
            });

            // Set links, hide if not present
            if (projectData.github) {
                modalGithubLink.href = projectData.github;
                modalGithubLink.style.display = 'flex';
            } else {
                modalGithubLink.style.display = 'none';
            }
            if (projectData.livedemo) {
                modalLivedemoLink.href = projectData.livedemo;
                modalLivedemoLink.style.display = 'flex';
            } else {
                modalLivedemoLink.style.display = 'none';
            }

            projectModal.classList.add('show');
            document.body.classList.add('no-scroll');
            projectModal.focus(); // Set focus to the modal for accessibility
        }

        function closeProjectModal() {
            projectModal.classList.remove('show');
            document.body.classList.remove('no-scroll');
        }

        modalCloseBtn.addEventListener('click', closeProjectModal);
        projectModal.addEventListener('click', (e) => {
            if (e.target === projectModal) { // Only close if clicking on the overlay itself
                closeProjectModal();
            }
        });
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && projectModal.classList.contains('show')) {
                closeProjectModal();
            }
        });
    </script>
</body>
</html>

--- END FILE: projects.html ---

--- START FILE: README.md ---

Website : https://souparna-paul-portfolio.netlify.app/


--- END FILE: README.md ---

--- START FILE: requirements.txt ---

streamlit 
Pillow

--- END FILE: requirements.txt ---

--- START FILE: thanks.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thank You! - Souparna Paul</title>
    <!-- Favicon -->
    <link rel="icon" href="profile.png" type="image/png">

    <!-- Preconnect for Google Fonts to improve loading speed -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter with font-display: swap for better performance -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="static/css/styles.css">
</head>
<body>
    <div id="darkModeToggle" class="relative hidden">
        <div class="toggle-circle"></div>
    </div>
    <div class="thank-you-container">
        <div class="main-content-card">
            <h1 class="text-4xl font-extrabold mb-4">Thank You! <i class="far fa-smile-beam text-blue-500"></i></h1>
            <p class="text-lg leading-relaxed mb-6">
                Your message has been successfully sent. I appreciate you taking the time to reach out and will get back to you as soon as possible.
            </p>
            <a href="index.html" class="btn-primary">
                <i class="fas fa-home mr-2"></i> Go to Home
            </a>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-6 text-center transition-colors-shadow dark:bg-navbar-bg-dark">
        <div class="container mx-auto px-4">
            <p class="text-sm">&copy; <span id="currentYear"></span> Souparna Paul. All rights reserved.</p>
            <p class="text-sm">Built with ❤️ using HTML, Tailwind CSS, and JavaScript.</p>
            <div class="flex justify-center space-x-4 text-xl mt-3">
                <a href="https://www.linkedin.com/in/souparno-paul-28a75524b/" target="_blank" aria-label="LinkedIn">
                    <i class="fab fa-linkedin"></i>
                </a>
                <a href="https://github.com/sOuL2000s" target="_blank" aria-label="GitHub">
                    <i class="fab fa-github"></i>
                </a>
                <a href="mailto:souparnopaulreborn@gmail.com" aria-label="Email">
                    <i class="fas fa-envelope"></i>
                </a>
            </div>
        </div>
    </footer>

    <!-- Shared Scripts -->
    <script src="static/js/scripts.js" defer></script>
    <!-- Page-specific Scripts -->
    <script>
        // The Dark Mode Toggle for this specific page (which was at the top of the body)
        // is now hidden with `hidden` class in its HTML.
        // The core dark mode logic is in scripts.js and will still correctly apply the theme.
    </script>
</body>
</html>

--- END FILE: thanks.html ---

--- START FILE: static\css\styles.css ---

/* Custom CSS for dark mode transition and scroll behavior */
:root {
    /* Light Mode Variables - Refined for a softer, modern look */
    --bg-color-light: #f8f9fa; /* Very light gray */
    --main-bg-light: #ffffff; /* Pure white for cards */
    --text-color-light: #343a40; /* Dark charcoal for body text */
    --heading-color-light: #212529; /* Even darker for headings */
    --primary-accent: #007bff; /* Vibrant blue for primary accent */
    --primary-accent-darker: #0056b3; /* Darker blue for hover */
    --secondary-accent: #6c757d; /* Muted gray for secondary */
    --skill-tag-bg: #e9ecef; /* Light gray for skill tags */
    --skill-tag-border: #dee2e6; /* Subtle border for skill tags */
    --border-color-light: #e0e0e0; /* Light border */
    --shadow-color-light: rgba(0, 0, 0, 0.08); /* Soft shadow */
    --navbar-bg-light: #ffffff; /* White for navbar in light mode */

    /* Dark Mode Variables - Adjusted for better contrast and aesthetics */
    --bg-color-dark: #1a1a1a; /* Deep dark background */
    --main-bg-dark: #2c2c2c; /* Slightly lighter dark card background */
    --text-color-dark: #e0e0e0; /* Light gray text */
    --heading-color-dark: #f8f9fa; /* White headings */
    --primary-accent-dark: #8be9fd; /* Light blue/cyan accent */
    --primary-accent-dark-hover: #50fa7b; /* Green accent for hover */
    --secondary-accent-dark: #9da3af; /* Lighter gray for secondary */
    --button-bg-color-dark: #6272a4; /* Muted blue for buttons */
    --button-hover-bg-color-dark: #44475a; /* Darker muted blue for button hover */
    --skill-tag-bg-dark: #3a3a3a; /* Darker gray for skill tags */
    --skill-tag-border-dark: #495057; /* Darker border for skill tags */
    --border-color-dark: #444444; /* Dark border color */
    --shadow-color-dark: rgba(0, 0, 0, 0.4); /* Darker shadow color */
    --navbar-bg-dark: #121212; /* Very dark blue for navbar */

    /* NEW: Variable for caret color */
    --caret-color: var(--primary-accent); /* Default caret color (light mode) */
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-color-light);
    color: var(--text-color-light);
    transition: background-color 0.4s ease, color 0.4s ease;
    scroll-behavior: smooth;
    overflow-x: hidden; /* GLOBAL FIX: Prevent horizontal scrollbar caused by any rogue elements */
    line-height: 1.7; /* Adjusted for better readability */
}

@media (max-width: 767px) { /* Apply padding only on mobile */
    body {
        padding-bottom: 4rem; /* Height of the mobile fixed nav */
    }
}

body.dark-mode {
    background-color: var(--bg-color-dark);
    color: var(--text-color-dark);
    /* NEW: Override caret color for dark mode */
    --caret-color: var(--primary-accent-dark);
}

/* Prevent scrolling when modal is open */
body.no-scroll {
    overflow: hidden;
}

/* General element transitions for dark mode */
.transition-colors-shadow {
    transition: background-color 0.4s ease, color 0.4s ease, border-color 0.4s ease, box-shadow 0.4s ease;
}

/* Main content area styling */
.main-content-card {
    background-color: var(--main-bg-light);
    box-shadow: 0px 10px 30px var(--shadow-color-light);
    border-radius: 1.5rem; /* Even more rounded */
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    border: 1px solid var(--border-color-light); /* Subtle border */
}
.main-content-card:hover {
    transform: translateY(-5px) scale(1.01); /* More subtle lift, slight scale */
    box-shadow: 0px 10px 25px var(--shadow-color-light); /* Softer shadow on hover */
    border-color: var(--primary-accent); /* Accent border on hover */
}
body.dark-mode .main-content-card {
    background-color: var(--main-bg-dark);
    box-shadow: 0px 10px 30px var(--shadow-color-dark);
    border: 1px solid var(--border-color-dark);
}
body.dark-mode .main-content-card:hover {
    box-shadow: 0px 10px 25px var(--shadow-color-dark);
    border-color: var(--primary-accent-dark); /* Accent border on hover */
}


/* Headings */
h1, h2, h3, h4, h5, h6 {
    color: var(--heading-color-light);
    letter-spacing: -0.02em; /* Slightly tighter letter-spacing */
}
body.dark-mode h1, body.dark-mode h2, body.dark-mode h3, body.dark-mode h4, body.dark-mode h5, body.dark-mode h6 {
    color: var(--heading-color-dark);
}

/* Links */
a {
    color: var(--primary-accent);
    transition: color 0.3s ease;
}
body.dark-mode a {
    color: var(--primary-accent-dark);
}
a:hover {
    filter: brightness(1.2);
    text-decoration: underline; /* Add underline on hover for clarity */
}

/* Buttons */
.btn-primary {
    background-color: var(--primary-accent);
    color: white;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    border-radius: 9999px; /* Pill shape */
    padding: 0.85rem 2.2rem; /* Slightly larger padding */
    font-weight: 600;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15); /* Deeper initial shadow */
    position: relative;
    overflow: hidden; /* For ripple effect */
}
.btn-primary:hover {
    background-color: var(--primary-accent-darker);
    transform: translateY(-3px) scale(1.01); /* More pronounced lift + scale */
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2); /* Even deeper shadow on hover */
}
.btn-primary:active {
    transform: translateY(-1px) scale(0.99); /* Slight press effect */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}
body.dark-mode .btn-primary {
    background-color: var(--button-bg-color-dark);
}
body.dark-mode .btn-primary:hover {
    background-color: var(--button-hover-bg-color-dark);
}

/* Skill Tags */
.skill-tag {
    display: inline-block; /* Ensure tags respect margin/padding correctly */
    background-color: var(--skill-tag-bg);
    color: var(--text-color-light);
    border: 1px solid var(--skill-tag-border);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.07); /* Slightly deeper shadow */
    border-radius: 0.75rem; /* More rounded */
    padding: 0.7rem 1.2rem; /* Slightly larger padding */
    font-size: 0.95rem; /* Slightly larger font */
    transition: background-color 0.3s ease, color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
}
.skill-tag:hover {
    transform: translateY(-3px) scale(1.02); /* More pronounced lift + scale */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); /* Deeper shadow on hover */
    background-color: var(--primary-accent); /* Highlight on hover */
    color: white;
}
body.dark-mode .skill-tag {
    background-color: var(--skill-tag-bg-dark);
    color: var(--text-color-dark);
    border: 1px solid var(--skill-tag-border-dark);
}
body.dark-mode .skill-tag:hover {
    background-color: var(--primary-accent-dark);
    color: #121212; /* Dark text on light hover for contrast */
}

/* Project Card */
.project-card {
    background-color: var(--main-bg-light);
    border: 1px solid var(--border-color-light);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08); /* Deeper initial shadow */
    border-radius: 1.25rem; /* More rounded */
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;
    display: flex; /* Make it a flex container */
    flex-direction: column; /* Stack children vertically */
}
.project-card:hover {
    transform: translateY(-5px) scale(1.01); /* More subtle lift + scale */
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15); /* Deeper shadow on hover */
    border-color: var(--primary-accent); /* Accent border on hover */
}
body.dark-mode .project-card {
    background-color: var(--main-bg-dark);
    border: 1px solid var(--border-color-dark);
}
body.dark-mode .project-card:hover {
    box-shadow: 0 10px 25px var(--shadow-color-dark);
    border-color: var(--primary-accent-dark); /* Accent border on hover */
}
/* Project card text color fix */
.project-card p,
.project-card ul li {
    color: var(--text-color-light);
}
body.dark-mode .project-card p,
body.dark-mode .project-card ul li {
    color: var(--text-color-dark);
}
.project-image {
    border-radius: 0.75rem; /* Match card radius */
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    max-width: 100%; /* Ensure images never overflow their container */
    height: 12rem; /* Fixed height for consistency */
    object-fit: cover; /* Cover the area, crop if necessary */
    margin-bottom: 1rem;
}
body.dark-mode .project-image {
    box-shadow: 0 4px 10px rgba(0,0,0,0.3);
}

/* Contact Form */
.form-input {
    background-color: var(--skill-tag-bg);
    border: 1px solid var(--skill-tag-border);
    color: var(--text-color-light);
    border-radius: 0.75rem;
    padding: 0.9rem 1.2rem;
    transition: border-color 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
}
.form-input:focus {
    border-color: var(--primary-accent);
    box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.25);
    background-color: var(--main-bg-light);
}
.form-input::placeholder {
    color: var(--text-color-light);
    opacity: 0.7;
}
body.dark-mode .form-input {
    background-color: var(--skill-tag-bg-dark);
    border: 1px solid var(--skill-tag-border-dark);
    color: var(--text-color-dark);
}
body.dark-mode .form-input:focus {
    border-color: var(--primary-accent-dark);
    box-shadow: 0 0 0 4px rgba(139, 233, 253, 0.25);
    background-color: var(--main-bg-dark);
}
body.dark-mode .form-input::placeholder {
    color: var(--text-color-dark);
    opacity: 0.7;
}

/* Dark mode toggle */
#darkModeToggle {
    cursor: pointer;
    width: 55px; /* Wider toggle */
    height: 28px; /* Taller toggle */
    background-color: #ccc;
    border-radius: 14px;
    position: relative;
    transition: background-color 0.3s;
    display: flex;
    align-items: center;
    justify-content: space-around;
    padding: 0 5px;
    box-shadow: inset 0 1px 4px rgba(0,0,0,0.25); /* Deeper inset shadow */
}
#darkModeToggle.dark {
    background-color: #4a5568; /* Darker background for toggle in dark mode */
}
#darkModeToggle::before { /* Sun icon */
    content: '☀️';
    position: absolute;
    left: 6px; /* Adjusted position */
    font-size: 15px;
    opacity: 1;
    transition: opacity 0.3s;
}
#darkModeToggle.dark::before {
    opacity: 0;
}
#darkModeToggle::after { /* Moon icon */
    content: '🌙'; /* Changed to a more reliable moon emoji */
    position: absolute;
    right: 6px; /* Adjusted position */
    font-size: 15px;
    opacity: 0;
    transition: opacity 0.3s;
}
#darkModeToggle.dark::after {
    opacity: 1;
}
#darkModeToggle .toggle-circle {
    content: '';
    position: absolute;
    top: 3px;
    left: 3px;
    width: 22px; /* Slightly larger circle */
    height: 22px;
    background-color: white;
    border-radius: 50%;
    transition: transform 0.3s ease-in-out, background-color 0.3s;
    box-shadow: 0 1px 4px rgba(0,0,0,0.35); /* Deeper shadow for circle */
}
#darkModeToggle.dark .toggle-circle {
    transform: translateX(27px); /* Move further */
    background-color: #2c3e50; /* Darker circle in dark mode */
}

/* Profile image animation */
.profile-img {
    animation: float 3s ease-in-out infinite;
    border-color: var(--primary-accent); /* Use accent color for border */
    box-shadow: 0 0 0 6px var(--primary-accent), 0 10px 20px rgba(0,0,0,0.2); /* Double border effect */
}
body.dark-mode .profile-img {
    border-color: var(--primary-accent-dark);
    box-shadow: 0 0 0 6px var(--primary-accent-dark), 0 10px 20px var(--shadow-color-dark);
}
@keyframes float {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-12px); } /* Increased float distance */
    100% { transform: translateY(0px); }
}

/* Section fade-in on scroll */
.fade-in-section {
    opacity: 0;
    transform: translateY(30px); /* More pronounced slide-up */
    transition: opacity 0.8s ease-out, transform 0.8s ease-out; /* Slower, smoother transition */
}
.fade-in-section.is-visible {
    opacity: 1;
    transform: translateY(0);
}

/* Specific styling for Education and Achievement entries */
.education-entry, .achievement-entry {
    background-color: var(--main-bg-light);
    border: 1px solid var(--border-color-light);
    border-radius: 1rem; /* More rounded */
    padding: 1.8rem; /* More padding */
    margin-bottom: 1.25rem; /* Slightly more space */
    box-shadow: 0 5px 12px rgba(0, 0, 0, 0.06); /* Softer shadow */
    transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease, border-color 0.3s ease;
}

.education-entry:hover, .achievement-entry:hover {
    transform: translateY(-5px); /* More lift */
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12); /* Deeper shadow on hover */
    border-color: var(--primary-accent); /* Accent border on hover */
}

body.dark-mode .education-entry, body.dark-mode .achievement-entry {
    background-color: var(--main-bg-dark);
    border: 1px solid var(--border-color-dark);
    box-shadow: 0 5px 12px var(--shadow-color-dark);
}

body.dark-mode .education-entry:hover, body.dark-mode .achievement-entry:hover {
    box-shadow: 0 10px 25px var(--shadow-color-dark);
    border-color: var(--primary-accent-dark); /* Accent border on hover */
}

/* Icons for achievements */
.achievement-icon {
    color: var(--primary-accent); /* Use accent color for icons */
    margin-right: 1rem; /* More space */
    font-size: 1.8rem; /* Larger icons */
    min-width: 1.8rem; /* Ensure consistent alignment */
}
body.dark-mode .achievement-icon {
    color: var(--primary-accent-dark);
}

/* Footer */
footer {
    background-color: var(--navbar-bg-dark); /* Darker footer */
    color: var(--text-color-dark); /* Ensure text is visible in dark footer */
    padding: 2rem 0; /* More padding */
    box-shadow: inset 0 5px 15px rgba(0,0,0,0.2); /* Inset shadow for depth */
}
footer p {
    margin-bottom: 0.5rem;
}
/* Consistent footer social icon hover colors */
footer a.hover\:text-red-600 { /* Target specific mailto to override */
    color: var(--text-color-dark); /* Reset base color for consistency */
}
footer a:hover {
    color: var(--primary-accent-dark) !important; /* Force accent color on hover for all footer links */
}

/* Header background styling */
header {
    background-color: var(--navbar-bg-light); /* Use variable for light mode */
}
body.dark-mode header {
    background-color: var(--navbar-bg-dark); /* Use variable for dark mode */
}

/* Navbar active link highlighting */
.nav-links-desktop a.active, .nav-item.active-nav-link { /* Adjusted for new mobile nav */
    color: var(--primary-accent) !important; /* Force accent color */
    font-weight: 700;
    text-decoration: underline;
    text-underline-offset: 4px;
}
body.dark-mode .nav-links-desktop a.active, body.dark-mode .nav-item.active-nav-link {
    color: var(--primary-accent-dark) !important;
}

/* Scroll-to-top button */
#scrollToTopBtn {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background-color: var(--primary-accent);
    color: white;
    padding: 1rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    cursor: pointer;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out, transform 0.3s ease;
    z-index: 30;
}
#scrollToTopBtn:hover {
    background-color: var(--primary-accent-darker);
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.3);
}
body.dark-mode #scrollToTopBtn {
    background-color: var(--primary-accent-dark);
}
body.dark-mode #scrollToTopBtn:hover {
    background-color: var(--primary-accent-dark-hover);
}
#scrollToTopBtn.show {
    opacity: 1;
    visibility: visible;
}

/* Hero section specific styling */
.hero-section-bg {
    background: linear-gradient(135deg, var(--bg-color-light) 0%, var(--main-bg-light) 100%);
    position: relative;
    overflow: hidden;
}
body.dark-mode .hero-section-bg {
    background: linear-gradient(135deg, var(--bg-color-dark) 0%, var(--main-bg-dark) 100%);
}
.hero-section-bg::before {
    content: '';
    position: absolute;
    top: -20%;
    left: -20%;
    width: 140%;
    height: 140%;
    background: radial-gradient(circle at top left, var(--primary-accent) 0%, transparent 25%),
                radial-gradient(circle at bottom right, var(--secondary-accent) 0%, transparent 25%);
    opacity: 0.05;
    z-index: -1;
    animation: rotateBackground 20s linear infinite;
}
body.dark-mode .hero-section-bg::before {
    background: radial-gradient(circle at top left, var(--primary-accent-dark) 0%, transparent 25%),
                radial-gradient(circle at bottom right, var(--secondary-accent-dark) 0%, transparent 25%);
    opacity: 0.1;
}
@keyframes rotateBackground {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

/* Typewriter effect */
.typewriter-text {
    border-right: 2px solid;
    white-space: nowrap; /* Default for larger screens */
    overflow: hidden;
    animation: typing 3s steps(40, end), blink-caret .75s step-end infinite;
    display: inline-block;
    vertical-align: bottom; /* Adjusts vertical alignment for underline */
    min-height: 1.2em; /* Prevents text from jumping */
}
@keyframes typing {
    from { width: 0 }
    to { width: 100% }
}
@keyframes blink-caret {
    from, to { border-color: transparent }
    50% { border-color: var(--caret-color); }
}

/* Responsive adjustments for typewriter text on small screens */
@media (max-width: 639px) { /* Targets screens smaller than 'sm' breakpoint */
    .typewriter-text {
        white-space: normal; /* Allow text to wrap */
        overflow: visible; /* Ensure wrapped text is visible */
        animation: none; /* Disable the typing animation */
        border-right: none; /* Remove the blinking caret */
        width: auto; /* Remove width constraint from animation */
        display: block; /* Change to block to allow full width and wrapping */
    }
}

/* Expandable content styling */
.expanded-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease-out; /* Smooth slide-down animation */
}

.expanded-content.show {
    max-height: 1000px; /* Arbitrarily large value to allow full content to show */
    transition: max-height 0.7s ease-in;
}

.read-more-btn {
    background-color: var(--skill-tag-bg);
    color: var(--text-color-light);
    border: 1px solid var(--skill-tag-border);
    border-radius: 0.5rem;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
}
.read-more-btn:hover {
    background-color: var(--primary-accent);
    color: white;
    border-color: var(--primary-accent);
}
body.dark-mode .read-more-btn {
    background-color: var(--skill-tag-bg-dark);
    color: var(--text-color-dark);
    border: 1px solid var(--skill-tag-border-dark);
}
body.dark-mode .read-more-btn:hover {
    background-color: var(--primary-accent-dark);
    color: #121212;
    border-color: var(--primary-accent-dark);
}

/* Project Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 50;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease;
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
}

.modal-overlay.show {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background-color: var(--main-bg-light);
    padding: 2.5rem;
    border-radius: 1.5rem;
    max-width: 900px;
    max-height: 90vh; /* Max height to allow scrolling */
    overflow-y: auto; /* Enable vertical scrolling */
    position: relative;
    transform: translateY(20px);
    opacity: 0;
    transition: transform 0.3s ease, opacity 0.3s ease, background-color 0.4s ease, color 0.4s ease, border-color 0.4s ease, box-shadow 0.4s ease;
    border: 1px solid var(--border-color-light);
    box-shadow: 0 10px 30px var(--shadow-color-light);
}
.modal-overlay.show .modal-content {
    transform: translateY(0);
    opacity: 1;
}
body.dark-mode .modal-content {
    background-color: var(--main-bg-dark);
    border: 1px solid var(--border-color-dark);
    box-shadow: 0 10px 30px var(--shadow-color-dark);
}

.modal-close-btn {
    position: absolute;
    top: 1rem;
    right: 1.25rem;
    font-size: 2rem;
    cursor: pointer;
    color: var(--text-color-light);
    transition: color 0.3s ease;
}
.modal-close-btn:hover {
    color: var(--primary-accent);
}
body.dark-mode .modal-close-btn {
    color: var(--text-color-dark);
}
body.dark-mode .modal-close-btn:hover {
    color: var(--primary-accent-dark);
}

.modal-image {
    border-radius: 0.75rem;
    margin-bottom: 1.5rem;
    max-height: 250px;
    width: 100%;
    object-fit: cover;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
}
body.dark-mode .modal-image {
    box-shadow: 0 4px 10px rgba(0,0,0,0.3);
}
.modal-links a {
    font-size: 1.1rem;
    padding: 0.5rem 0;
    margin-right: 1rem;
}
.modal-links a:last-child {
    margin-right: 0;
}
/* Ensure text wraps correctly */
.project-card .short-summary, .project-card .full-description p,
#projectModal .modal-project-description {
    word-break: break-word;
    overflow-wrap: break-word;
}

/* Toast Message for Contact Form */
.toast-message {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    background-color: #28a745; /* Green for success */
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 0.75rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
    z-index: 100;
    text-align: center;
    min-width: 250px;
}
.toast-message.error {
    background-color: #dc3545; /* Red for error */
}
.toast-message.show {
    opacity: 1;
    visibility: visible;
}

--- END FILE: static\css\styles.css ---

--- START FILE: static\js\scripts.js ---

// Shared JavaScript for portfolio website

// Set current year in footer
document.addEventListener('DOMContentLoaded', () => {
    const currentYearElement = document.getElementById('currentYear');
    if (currentYearElement) {
        currentYearElement.textContent = new Date().getFullYear();
    }
});

// Dark Mode Toggle Logic
const darkModeToggle = document.getElementById('darkModeToggle'); // Desktop header toggle
const mobileDarkModeToggle = document.getElementById('mobileDarkModeToggle'); // Mobile fixed nav toggle

const applyDarkMode = (isDark) => {
    if (isDark) {
        document.body.classList.add('dark-mode');
        if (darkModeToggle) darkModeToggle.classList.add('dark');
    } else {
        document.body.classList.remove('dark-mode');
        if (darkModeToggle) darkModeToggle.classList.remove('dark');
    }
};

// Apply saved dark mode preference on load
document.addEventListener('DOMContentLoaded', () => {
    const savedDarkMode = localStorage.getItem('darkMode') === 'true';
    applyDarkMode(savedDarkMode);
});

// Event listener for desktop dark mode toggle
if (darkModeToggle) {
    darkModeToggle.addEventListener('click', () => {
        const isCurrentlyDark = document.body.classList.contains('dark-mode');
        applyDarkMode(!isCurrentlyDark);
        localStorage.setItem('darkMode', !isCurrentlyDark);
    });
}

// Event listener for mobile dark mode toggle
if (mobileDarkModeToggle) {
    mobileDarkModeToggle.addEventListener('click', () => {
        const isCurrentlyDark = document.body.classList.contains('dark-mode');
        applyDarkMode(!isCurrentlyDark);
        localStorage.setItem('darkMode', !isCurrentlyDark);
    });
}


// Smooth scrolling for internal anchor links (excluding multi-page navigation)
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        const currentFileName = window.location.pathname.split("/").pop();
        if (currentFileName === "index.html" || currentFileName === "" || currentFileName === "education-achievements.html") {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);

            if (targetElement) {
                const headerOffset = document.querySelector('header').offsetHeight;
                const offsetPosition = targetElement.getBoundingClientRect().top + window.scrollY - headerOffset - 20;

                window.scrollTo({
                    top: offsetPosition,
                    behavior: 'smooth'
                });
            }
        }
    });
});

// Intersection Observer for fade-in effect
const fadeInSections = document.querySelectorAll('.fade-in-section');
const observerOptions = {
    root: null,
    rootMargin: '0px 0px -50px 0px',
    threshold: 0.01
};
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
            // observer.unobserve(entry.target); // Uncomment to animate only once
        } else {
            // entry.target.classList.remove('is-visible'); // Uncomment to re-animate on scroll
        }
    });
}, observerOptions);
fadeInSections.forEach(section => {
    observer.observe(section);
});

// Highlight active navigation link based on current page
const setActiveNav = () => {
    const path = window.location.pathname.split("/").pop(); // Get filename
    const desktopNavLinks = document.querySelectorAll('#navLinksDesktop a');
    const mobileNavItems = document.querySelectorAll('#mobileFixedNav .nav-item'); // New selector for mobile

    [...desktopNavLinks, ...mobileNavItems].forEach(link => {
        link.classList.remove('active'); // For desktop nav links
        link.classList.remove('active-nav-link'); // For mobile nav items

        let linkPath = link.getAttribute('href');
        if (linkPath) { // Check if href exists
            linkPath = linkPath.split("/").pop();

            if (linkPath === path || (path === "" && linkPath === "index.html")) {
                link.classList.add('active'); // Applies to both desktop and mobile for consistent styling
                link.classList.add('active-nav-link'); // Specific for mobile bottom nav
            }
        }
    });
};
document.addEventListener('DOMContentLoaded', setActiveNav); // Run on page load


// Scroll to Top Button functionality
const scrollToTopBtn = document.getElementById("scrollToTopBtn");

window.addEventListener("scroll", () => {
    if (window.scrollY > 300) {
        scrollToTopBtn.classList.add("show");
    } else {
        scrollToTopBtn.classList.remove("show");
    }
});

scrollToTopBtn.addEventListener("click", () => {
    window.scrollTo({
        top: 0,
        behavior: "smooth"
    });
});

--- END FILE: static\js\scripts.js ---

----------------------------------------------------------------------------------------------------

I'm providing you my 2 projects and their GitHub link and demo website links I want you to add them under my individual projects use your creativity for writing about them I am also going to share the codes of those websites of those projects so you'll get some contacts of how to work with and what to work with you got it?

-------------------------------------------------------------------------------------------------

https://github.com/sOuL2000s/Study-Buddy-AI.git
https://study-buddy-ai-studyhelper.netlify.app/

code : 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study Buddy AI</title>
    <!-- PWA Manifest -->
    <link rel="manifest" href="manifest.json">
    <!-- Favicon -->
    <link rel="icon" href="logo.png" type="image/x-icon">
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter for modern typography -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Marked.js CDN for Markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Lucide Icons for a modern, futuristic feel -->
    <script src="https://cdn.jsdelivr.net/npm/lucide-dynamic@latest/dist/lucide.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        /*
         * --- Custom Styles for AI Chat Assistant (Enhanced) ---
         * This section enhances the Tailwind CSS with a modern, futuristic theme,
         * including a vibrant color palette, subtle animations, and improved
         * responsiveness and UI elements, specifically for a chat-only interface.
         */
        
        /* Base font and transition settings for the whole page */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden; /* Prevent body scroll if content overflows, let individual sections scroll */
        }
        
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.6s ease, color 0.6s ease;
            display: flex; /* Main flex container for sidebar and chat window */
            color: var(--text-primary); /* Use theme variables */
        }

        /* --- Theme Definitions --- */
        /*
         * Each theme has a dark and light variant defined by `body[data-theme="theme-name-mode"]`.
         * This allows for unique color palettes and background designs for each theme and its mode.
         */

        /* Default Theme: Light Mode */
        body[data-theme="default-light"] {
            --bg-primary: #f3f4f6;
            --bg-secondary: #ffffff;
            --text-primary: #1f2937;
            --text-secondary: #4b5563;
            --border-color: #e5e7eb;
            --card-bg: #ffffff;
            --card-border: #e5e7eb;
            --header-bg: #f9fafb;
            --accent-primary: #6366f1;
            --accent-primary-hover: #4f46e5;
            --accent-secondary: #22d3ee;
            --accent-error: #ef4444;
            --accent-success: #22c55e;
            --user-bubble-bg: #e0f2fe;
            --user-bubble-text: #1e40af;
            --ai-bubble-bg: #f3f4f6;
            --ai-bubble-text: #374151;
            --sidebar-bg: #ffffff;
            --sidebar-border: #e5e7eb;
            --sidebar-item-hover: #f3f4f6;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8); /* Slightly transparent */
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #1f2937;
            --conversation-indicator: #6366f1;


            background-image: radial-gradient(at 0% 0%, hsl(210, 30%, 95%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(200, 20%, 90%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Default Theme: Dark Mode */
        body[data-theme="default-dark"] {
            --bg-primary: #0a0a0f;
            --bg-secondary: #13131a;
            --text-primary: #e5e7eb;
            --text-secondary: #a1a1aa;
            --border-color: #2d3748;
            --card-bg: #13131a;
            --card-border: #2d3748;
            --header-bg: #1f2937;
            --accent-primary: #818cf8;
            --accent-primary-hover: #6366f1;
            --accent-secondary: #67e8f9;
            --accent-error: #f87171;
            --accent-success: #4ade80;
            --user-bubble-bg: #1a237e;
            --user-bubble-text: #e0e7ff;
            --ai-bubble-bg: #2d3748;
            --ai-bubble-text: #f9fafb;
            --sidebar-bg: #13131a;
            --sidebar-border: #2d3748;
            --sidebar-item-hover: #1f2937;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(19, 19, 26, 0.9); /* Slightly transparent */
            --conversation-bg: rgba(19, 19, 26, 0.95);
            --conversation-text: #e5e7eb;
            --conversation-indicator: #818cf8;

            background-image: radial-gradient(at 0% 0%, hsl(240, 60%, 8%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(260, 50%, 8%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Celestial Horizon Theme: Dark Mode */
        body[data-theme="celestial-horizon-dark"] {
            --bg-primary: #0D1117;
            --bg-secondary: #161B22;
            --text-primary: #C9D1D9;
            --text-secondary: #8B949E;
            --border-color: #30363D;
            --card-bg: #1F2633;
            --card-border: #30363D;
            --header-bg: #161B22;
            --accent-primary: #58A6FF;
            --accent-primary-hover: #388BF2;
            --accent-secondary: #B1B8C1;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #253B64;
            --user-bubble-text: #E0F2FE;
            --ai-bubble-bg: #1F2633;
            --ai-bubble-text: #C9D1D9;
            --sidebar-bg: #161B22;
            --sidebar-border: #30363D;
            --sidebar-item-hover: #1F2633;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(22, 27, 34, 0.9);
            --conversation-bg: rgba(22, 27, 34, 0.95);
            --conversation-text: #C9D1D9;
            --conversation-indicator: #58A6FF;

            background-image: radial-gradient(at 0% 0%, hsl(220, 40%, 10%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(260, 40%, 10%) 0%, transparent 50%),
                              url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><filter id="f1" x="-50%" y="-50%" width="200%" height="200%"><feGaussianBlur in="SourceGraphic" stdDeviation="0.3" /></filter></defs><rect width="100" height="100" fill="%230D1117" /><g filter="url(%23f1)" opacity="0.6"><circle cx="10" cy="15" r="0.2" fill="%23c9d1d9" /><circle cx="30" cy="5" r="0.3" fill="%2358A6FF" /><circle cx="50" cy="20" r="0.25" fill="%23c9d1d9" /><circle cx="70" cy="10" r="0.35" fill="%2358A6FF" /><circle cx="90" cy="25" r="0.3" fill="%23c9d1d9" /><circle cx="20" cy="40" r="0.3" fill="%2358A6FF" /><circle cx="45" cy="35" r="0.2" fill="%23c9d1d9" /><circle cx="65" cy="50" r="0.35" fill="%2358A6FF" /><circle cx="85" cy="40" r="0.25" fill="%23c9d1d9" /><circle cx="5" cy="60" r="0.35" fill="%2358A6FF" /><circle cx="25" cy="70" r="0.25" fill="%23c9d1d9" /><circle cx="40" cy="85" r="0.3" fill="%2358A6FF" /><circle cx="60" cy="75" r="0.2" fill="%23c9d1d9" /><circle cx="80" cy="90" r="0.35" fill="%2358A6FF" /><circle cx="95" cy="65" r="0.3" fill="%23c9d1d9" /></g></svg>');
            background-size: cover, cover, cover;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Celestial Horizon Theme: Light Mode */
        body[data-theme="celestial-horizon-light"] {
            --bg-primary: #F0F4F8;
            --bg-secondary: #FFFFFF;
            --text-primary: #2D3748;
            --text-secondary: #718096;
            --border-color: #E2E8F0;
            --card-bg: #FFFFFF;
            --card-border: #E2E8F0;
            --header-bg: #EDF2F7;
            --accent-primary: #3B82F6;
            --accent-primary-hover: #2563EB;
            --accent-secondary: #60A5FA;
            --accent-error: #EF4444;
            --accent-success: #22C55E;
            --user-bubble-bg: #DBEAFE;
            --user-bubble-text: #1E40AF;
            --ai-bubble-bg: #EBF4FF;
            --ai-bubble-text: #2D3748;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #E2E8F0;
            --sidebar-item-hover: #F0F4F8;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #2D3748;
            --conversation-indicator: #3B82F6;

            background-image: radial-gradient(at 0% 0%, hsl(200, 50%, 98%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(240, 50%, 95%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Verdant Calm Theme: Dark Mode (Renamed from Forest Whisper) */
        body[data-theme="verdant-calm-dark"] {
            --bg-primary: #1a2a22;
            --bg-secondary: #21362d;
            --text-primary: #e0f2e8;
            --text-secondary: #99bbaa;
            --border-color: #3f544c;
            --card-bg: #294237;
            --card-border: #4a6356;
            --header-bg: #2c493c;
            --accent-primary: #3cb878;
            --accent-primary-hover: #2fa163;
            --accent-secondary: #60c58e;
            --accent-error: #f87171;
            --accent-success: #4ade80;
            --user-bubble-bg: #1e8449;
            --user-bubble-text: #e0f2e8;
            --ai-bubble-bg: #34495e;
            --ai-bubble-text: #e0f2e8;
            --sidebar-bg: #21362d;
            --sidebar-border: #3f544c;
            --sidebar-item-hover: #2c493c;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(33, 54, 45, 0.9);
            --conversation-bg: rgba(33, 54, 45, 0.95);
            --conversation-text: #e0f2e8;
            --conversation-indicator: #3cb878;

            background-image: radial-gradient(at 0% 0%, hsl(150, 20%, 15%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(120, 20%, 12%) 0%, transparent 50%),
                              linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)),
                              url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><filter id="f2" x="-50%" y="-50%" width="200%" height="200%"><feTurbulence type="fractalNoise" baseFrequency="0.6" numOctaves="3" result="noise" /><feDiffuseLighting in="noise" lightingColor="%234A6356" surfaceScale="5" result="light"><feDistantLight azimuth="235" elevation="60" /></feDiffuseLighting><feComposite in="SourceGraphic" in2="light" operator="arithmetic" k1="0" k2="1" k3="1" k4="0" /></filter></defs><rect width="100" height="100" fill="%231a2a22" filter="url(%23f2)" /></svg>');
            background-size: cover, cover, cover, cover;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Verdant Calm Theme: Light Mode */
        body[data-theme="verdant-calm-light"] {
            --bg-primary: #edf9f5;
            --bg-secondary: #ffffff;
            --text-primary: #2d3f35;
            --text-secondary: #5e7d6b;
            --border-color: #dbeae5;
            --card-bg: #ffffff;
            --card-border: #dbeae5;
            --header-bg: #f5fcf9;
            --accent-primary: #3cb878;
            --accent-primary-hover: #2fa163;
            --accent-secondary: #60c58e;
            --accent-error: #ef4444;
            --accent-success: #22c55e;
            --user-bubble-bg: #c8e6c9;
            --user-bubble-text: #1b5e20;
            --ai-bubble-bg: #e8f5e9;
            --ai-bubble-text: #388e3c;
            --sidebar-bg: #ffffff;
            --sidebar-border: #dbeae5;
            --sidebar-item-hover: #edf9f5;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #2d3f35;
            --conversation-indicator: #3cb878;

            background-image: radial-gradient(at 0% 0%, hsl(140, 20%, 98%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(100, 15%, 95%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Cybernetic Pulse Theme: Dark Mode */
        body[data-theme="cybernetic-pulse-dark"] {
            --bg-primary: #0a0e1a;
            --bg-secondary: #161c28;
            --text-primary: #e2e8f0;
            --text-secondary: #94a3b8;
            --border-color: #2f3e52;
            --card-bg: #1f2a3a;
            --card-border: #3a4b5e;
            --header-bg: #1f2a3a;
            --accent-primary: #0ea5e9;
            --accent-primary-hover: #0284c7;
            --accent-secondary: #38bdf8;
            --accent-error: #f87171;
            --accent-success: #4ade80;
            --user-bubble-bg: #0c4a6e;
            --user-bubble-text: #e0f2fe;
            --ai-bubble-bg: #2d3748;
            --ai-bubble-text: #f0f8ff;
            --sidebar-bg: #161c28;
            --sidebar-border: #2f3e52;
            --sidebar-item-hover: #1f2a3a;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(22, 28, 40, 0.9);
            --conversation-bg: rgba(22, 28, 40, 0.95);
            --conversation-text: #e2e8f0;
            --conversation-indicator: #0ea5e9;

            background-image: radial-gradient(at 0% 0%, hsl(210, 50%, 8%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(230, 40%, 8%) 0%, transparent 50%),
                              linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)),
                              url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><pattern id="circuit" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 L 0 10" fill="none" stroke="%232f3e52" stroke-width="0.3" /></pattern></defs><rect width="100" height="100" fill="url(%23circuit)" /></svg>');
            background-size: cover, cover, cover, auto;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Cybernetic Pulse Theme: Light Mode */
        body[data-theme="cybernetic-pulse-light"] {
            --bg-primary: #f8fafc;
            --bg-secondary: #ffffff;
            --text-primary: #1e293b;
            --text-secondary: #475569;
            --border-color: #e0e7f2;
            --card-bg: #ffffff;
            --card-border: #e0e7f2;
            --header-bg: #f1f5f9;
            --accent-primary: #0ea5e9;
            --accent-primary-hover: #0284c7;
            --accent-secondary: #38bdf8;
            --accent-error: #ef4444;
            --accent-success: #22c55e;
            --user-bubble-bg: #bfdbfe;
            --user-bubble-text: #1e3a8a;
            --ai-bubble-bg: #e0f2fe;
            --ai-bubble-text: #0284c7;
            --sidebar-bg: #ffffff;
            --sidebar-border: #e0e7f2;
            --sidebar-item-hover: #f1f5f9;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #1e293b;
            --conversation-indicator: #0ea5e9;

            background-image: radial-gradient(at 0% 0%, hsl(200, 30%, 98%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(220, 20%, 95%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Urban Pulse Theme: Dark Mode */
        body[data-theme="urban-pulse-dark"] {
            --bg-primary: #1A1A1D;
            --bg-secondary: #242426;
            --text-primary: #F0F0F0;
            --text-secondary: #A0A0A0;
            --border-color: #38383B;
            --card-bg: #242426;
            --card-border: #38383B;
            --header-bg: #1A1A1D;
            --accent-primary: #00BFFF; /* Deep Sky Blue */
            --accent-primary-hover: #009ACD;
            --accent-secondary: #66CCFF;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #0F4C81;
            --user-bubble-text: #E0FFFF;
            --ai-bubble-bg: #36454F;
            --ai-bubble-text: #F0F0F0;
            --sidebar-bg: #1A1A1D;
            --sidebar-border: #38383B;
            --sidebar-item-hover: #242426;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(36, 36, 38, 0.9);
            --conversation-bg: rgba(36, 36, 38, 0.95);
            --conversation-text: #F0F0F0;
            --conversation-indicator: #00BFFF;

            background-image: linear-gradient(rgba(0,0,0,0.7), rgba(0,0,0,0.7)), url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 L 0 10" fill="none" stroke="%23303030" stroke-width="0.3" /></pattern></defs><rect width="100" height="100" fill="url(%23grid)" /></svg>');
            background-size: cover, auto;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Urban Pulse Theme: Light Mode */
        body[data-theme="urban-pulse-light"] {
            --bg-primary: #F2F4F8;
            --bg-secondary: #FFFFFF;
            --text-primary: #333333;
            --text-secondary: #777777;
            --border-color: #DDE2E8;
            --card-bg: #FFFFFF;
            --card-border: #DDE2E8;
            --header-bg: #E8ECF2;
            --accent-primary: #1E90FF; /* Dodger Blue */
            --accent-primary-hover: #107EEB;
            --accent-secondary: #63B2FF;
            --accent-error: #EF4444;
            --accent-success: #22C55E;
            --user-bubble-bg: #CCE5FF;
            --user-bubble-text: #003F8C;
            --ai-bubble-bg: #E8F0F5;
            --ai-bubble-text: #333333;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #DDE2E8;
            --sidebar-item-hover: #E8F0F5;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #333333;
            --conversation-indicator: #1E90FF;

            background-image: radial-gradient(at 0% 0%, hsl(210, 30%, 98%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(200, 20%, 95%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Rustic Ember Theme: Dark Mode */
        body[data-theme="rustic-ember-dark"] {
            --bg-primary: #3E2723;
            --bg-secondary: #4E342E;
            --text-primary: #FBE9E7;
            --text-secondary: #BCAAA4;
            --border-color: #5D4037;
            --card-bg: #4E342E;
            --card-border: #5D4037;
            --header-bg: #3E2723;
            --accent-primary: #D84315;
            --accent-primary-hover: #BF360C;
            --accent-secondary: #FF8A65;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #8D6E63;
            --user-bubble-text: #FBE9E7;
            --ai-bubble-bg: #5D4037;
            --ai-bubble-text: #FBE9E7;
            --sidebar-bg: #3E2723;
            --sidebar-border: #5D4037;
            --sidebar-item-hover: #4E342E;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(78, 52, 46, 0.9);
            --conversation-bg: rgba(78, 52, 46, 0.95);
            --conversation-text: #FBE9E7;
            --conversation-indicator: #D84315;

            background-image: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)), url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><filter id="woodgrain" x="-50%" y="-50%" width="200%" height="200%"><feTurbulence type="fractalNoise" baseFrequency="0.05" numOctaves="4" stitchTiles="stitch" result="texture"/><feColorMatrix type="saturate" values="0.2"/><feComponentTransfer><feFuncR type="linear" slope="0.5" intercept="0.2"/><feFuncG type="linear" slope="0.5" intercept="0.1"/><feFuncB type="linear" slope="0.5" intercept="0"/></feComponentTransfer></filter></defs><rect width="100" height="100" fill="%233E2723" filter="url(%23woodgrain)"/></svg>');
            background-size: cover, cover;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Rustic Ember Theme: Light Mode */
        body[data-theme="rustic-ember-light"] {
            --bg-primary: #F5E8DC;
            --bg-secondary: #FFFFFF;
            --text-primary: #4E342E;
            --text-secondary: #8D6E63;
            --border-color: #E6DCCD;
            --card-bg: #FFFFFF;
            --card-border: #E6DCCD;
            --header-bg: #F8EFE5;
            --accent-primary: #E65100;
            --accent-primary-hover: #D84315;
            --accent-secondary: #FFB74D;
            --accent-error: #EF4444;
            --accent-success: #22C55E;
            --user-bubble-bg: #FFCCBC;
            --user-bubble-text: #BF360C;
            --ai-bubble-bg: #FBE9E7;
            --ai-bubble-text: #4E342E;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #E6DCCD;
            --sidebar-item-hover: #F8EFE5;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #4E342E;
            --conversation-indicator: #E65100;

            background-image: radial-gradient(at 0% 0%, hsl(30, 40%, 98%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(15, 30%, 95%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Neon Mirage Theme: Dark Mode */
        body[data-theme="neon-mirage-dark"] {
            --bg-primary: #05001C;
            --bg-secondary: #120033;
            --text-primary: #E0FFFF;
            --text-secondary: #8A2BE2;
            --border-color: #2F004F;
            --card-bg: #1A0040;
            --card-border: #2F004F;
            --header-bg: #120033;
            --accent-primary: #FF1493;
            --accent-primary-hover: #C7007C;
            --accent-secondary: #00BFFF;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #4B0082;
            --user-bubble-text: #E0FFFF;
            --ai-bubble-bg: #2E0854;
            --ai-bubble-text: #E0FFFF;
            --sidebar-bg: #120033;
            --sidebar-border: #2F004F;
            --sidebar-item-hover: #1A0040;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(26, 0, 64, 0.9);
            --conversation-bg: rgba(26, 0, 64, 0.95);
            --conversation-text: #E0FFFF;
            --conversation-indicator: #FF1493;

            background-image: radial-gradient(at 0% 0%, hsl(300, 80%, 15%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(240, 80%, 15%) 0%, transparent 50%),
                              linear-gradient(to top right, rgba(255, 20, 147, 0.1), transparent),
                              linear-gradient(to bottom left, rgba(0, 191, 255, 0.1), transparent);
            background-size: cover, cover, cover, cover;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Neon Mirage Theme: Light Mode */
        body[data-theme="neon-mirage-light"] {
            --bg-primary: #F8F0FF;
            --bg-secondary: #FFFFFF;
            --text-primary: #330066;
            --text-secondary: #663399;
            --border-color: #EBD9FC;
            --card-bg: #FFFFFF;
            --card-border: #EBD9FC;
            --header-bg: #F2E0FF;
            --accent-primary: #FF69B4;
            --accent-primary-hover: #E0509B;
            --accent-secondary: #87CEEB;
            --accent-error: #EF4444;
            --accent-success: #22C55E;
            --user-bubble-bg: #FCE4EC;
            --user-bubble-text: #C2185B;
            --ai-bubble-bg: #F3E5F5;
            --ai-bubble-text: #330066;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #EBD9FC;
            --sidebar-item-hover: #F2E0FF;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #330066;
            --conversation-indicator: #FF69B4;

            background-image: radial-gradient(at 0% 0%, hsl(330, 80%, 98%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(270, 80%, 95%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Ivory Bloom Theme: Dark Mode */
        body[data-theme="ivory-bloom-dark"] {
            --bg-primary: #2B2D42;
            --bg-secondary: #4A4E69;
            --text-primary: #DCDCDC;
            --text-secondary: #A0A4B8;
            --border-color: #5D607E;
            --card-bg: #4A4E69;
            --card-border: #5D607E;
            --header-bg: #373A50;
            --accent-primary: #9B59B6;
            --accent-primary-hover: #8E44AD;
            --accent-secondary: #66CCFF;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #7C4F9B;
            --user-bubble-text: #FFFFFF;
            --ai-bubble-bg: #5D607E;
            --ai-bubble-text: #DCDCDC;
            --sidebar-bg: #2B2D42;
            --sidebar-border: #5D607E;
            --sidebar-item-hover: #373A50;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(74, 78, 105, 0.9);
            --conversation-bg: rgba(74, 78, 105, 0.95);
            --conversation-text: #DCDCDC;
            --conversation-indicator: #9B59B6;

            background-image: radial-gradient(at 0% 0%, hsl(240, 20%, 20%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(200, 20%, 18%) 0%, transparent 50%),
                              linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)),
                              url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><pattern id="petal" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M5 0 L6 4 L10 5 L6 6 L5 10 L4 6 L0 5 L4 4 Z" fill="%234A4E69" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23petal)"/></svg>');
            background-size: cover, cover, cover, auto;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Ivory Bloom Theme: Light Mode */
        body[data-theme="ivory-bloom-light"] {
            --bg-primary: #FDFDFD;
            --bg-secondary: #FFFFFF;
            --text-primary: #333333;
            --text-secondary: #777777;
            --border-color: #EAEAEA;
            --card-bg: #FFFFFF;
            --card-border: #EAEAEA;
            --header-bg: #F5F5F5;
            --accent-primary: #8E44AD;
            --accent-primary-hover: #7F3C9E;
            --accent-secondary: #BA68C8;
            --accent-error: #EF4444;
            --accent-success: #22C55E;
            --user-bubble-bg: #F2E6F7;
            --user-bubble-text: #5D2C7B;
            --ai-bubble-bg: #EAE0F0;
            --ai-bubble-text: #333333;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #EAEAEA;
            --sidebar-item-hover: #F5F5F5;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #333333;
            --conversation-indicator: #8E44AD;

            background-image: radial-gradient(at 0% 0%, hsl(300, 10%, 99%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(280, 15%, 97%) 0%, transparent 50%),
                              url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><pattern id="flower" width="15" height="15" patternUnits="userSpaceOnUse"><path d="M7.5 0 L9 4 L13 6 L9 8 L7.5 12 L6 8 L2 6 L6 4 Z" fill="%23EAEAEA" opacity="0.3"/></pattern></defs><rect width="100" height="100" fill="url(%23flower)"/></svg>');
            background-size: cover, cover, auto;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Obsidian Night Theme: Dark Mode */
        body[data-theme="obsidian-night-dark"] {
            --bg-primary: #121212;
            --bg-secondary: #1E1E1E;
            --text-primary: #F0F0F0;
            --text-secondary: #A0A0A0;
            --border-color: #333333;
            --card-bg: #1E1E1E;
            --card-border: #333333;
            --header-bg: #121212;
            --accent-primary: #BB86FC;
            --accent-primary-hover: #9E65E2;
            --accent-secondary: #03DAC6;
            --accent-error: #CF6679;
            --accent-success: #03DAC6;
            --user-bubble-bg: #3700B3;
            --user-bubble-text: #FFFFFF;
            --ai-bubble-bg: #2C2C2C;
            --ai-bubble-text: #F0F0F0;
            --sidebar-bg: #121212;
            --sidebar-border: #333333;
            --sidebar-item-hover: #1E1E1E;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(30, 30, 30, 0.9);
            --conversation-bg: rgba(30, 30, 30, 0.95);
            --conversation-text: #F0F0F0;
            --conversation-indicator: #BB86FC;

            background-image: radial-gradient(at 0% 0%, hsl(250, 10%, 10%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(200, 10%, 10%) 0%, transparent 50%),
                              linear-gradient(rgba(0,0,0,0.8), rgba(0,0,0,0.8)),
                              url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><pattern id="dark-hex" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M0 5 L5 0 L10 5 L5 10 Z" fill="none" stroke="%23333333" stroke-width="0.2"/></pattern></defs><rect width="100" height="100" fill="url(%23dark-hex)"/></svg>');
            background-size: cover, cover, cover, auto;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Obsidian Night Theme: Light Mode */
        body[data-theme="obsidian-night-light"] {
            --bg-primary: #E0E0E0;
            --bg-secondary: #FFFFFF;
            --text-primary: #2C2C2C;
            --text-secondary: #6B6B6B;
            --border-color: #C0C0C0;
            --card-bg: #FFFFFF;
            --card-border: #C0C0C0;
            --header-bg: #D0D0D0;
            --accent-primary: #6200EE;
            --accent-primary-hover: #5B00D9;
            --accent-secondary: #018786;
            --accent-error: #B00020;
            --accent-success: #018786;
            --user-bubble-bg: #BBDEFB;
            --user-bubble-text: #1A237E;
            --ai-bubble-bg: #E0E0E0;
            --ai-bubble-text: #2C2C2C;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #C0C0C0;
            --sidebar-item-hover: #D0D0D0;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #2C2C2C;
            --conversation-indicator: #6200EE;

            background-image: radial-gradient(at 0% 0%, hsl(240, 10%, 95%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(200, 10%, 92%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Solar Dawn Theme: Dark Mode */
        body[data-theme="solar-dawn-dark"] {
            --bg-primary: #1A0E2A;
            --bg-secondary: #2C1840;
            --text-primary: #FCE8D8;
            --text-secondary: #D8BFD8;
            --border-color: #40265B;
            --card-bg: #2C1840;
            --card-border: #40265B;
            --header-bg: #1A0E2A;
            --accent-primary: #FF5722;
            --accent-primary-hover: #E64A19;
            --accent-secondary: #FFCC80;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #7C4F9B;
            --user-bubble-text: #FCE8D8;
            --ai-bubble-bg: #40265B;
            --ai-bubble-text: #FCE8D8;
            --sidebar-bg: #1A0E2A;
            --sidebar-border: #40265B;
            --sidebar-item-hover: #2C1840;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(44, 24, 64, 0.9);
            --conversation-bg: rgba(44, 24, 64, 0.95);
            --conversation-text: #FCE8D8;
            --conversation-indicator: #FF5722;

            background-image: linear-gradient(to top right, #3C096C, #6D2B7E, #FF5722);
            background-size: cover;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Solar Dawn Theme: Light Mode */
        body[data-theme="solar-dawn-light"] {
            --bg-primary: #FFFBEA;
            --bg-secondary: #FFFFFF;
            --text-primary: #3E2723;
            --text-secondary: #8D6E63;
            --border-color: #FFE0B2;
            --card-bg: #FFFFFF;
            --card-border: #FFE0B2;
            --header-bg: #FFF3E0;
            --accent-primary: #FF8F00;
            --accent-primary-hover: #FF6F00;
            --accent-secondary: #FFD54F;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #FFE0B2;
            --user-bubble-text: #E65100;
            --ai-bubble-bg: #FFF3E0;
            --ai-bubble-text: #3E2723;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #FFE0B2;
            --sidebar-item-hover: #FFF3E0;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #3E2723;
            --conversation-indicator: #FF8F00;

            background-image: linear-gradient(to top left, #FFD54F, #FFECB3, #FFFDE7);
            background-size: cover;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Aurora Drift Theme: Dark Mode */
        body[data-theme="aurora-drift-dark"] {
            --bg-primary: #0A192F;
            --bg-secondary: #172A45;
            --text-primary: #E6F0FF;
            --text-secondary: #A0B3D6;
            --border-color: #2F476D;
            --card-bg: #172A45;
            --card-border: #2F476D;
            --header-bg: #0A192F;
            --accent-primary: #66CCCC;
            --accent-primary-hover: #55B3B3;
            --accent-secondary: #99CCFF;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #336699;
            --user-bubble-text: #E6F0FF;
            --ai-bubble-bg: #2F476D;
            --ai-bubble-text: #E6F0FF;
            --sidebar-bg: #0A192F;
            --sidebar-border: #2F476D;
            --sidebar-item-hover: #172A45;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(23, 42, 69, 0.9);
            --conversation-bg: rgba(23, 42, 69, 0.95);
            --conversation-text: #E6F0FF;
            --conversation-indicator: #66CCCC;

            background-image: linear-gradient(to top right, #0A192F, #172A45, #2F476D, #336699);
            background-size: cover;
            background-position: center center;
            background-attachment: fixed;
            animation: aurora-move 60s infinite alternate;
        }

        /* Aurora Drift Theme: Light Mode */
        body[data-theme="aurora-drift-light"] {
            --bg-primary: #E0F2F7;
            --bg-secondary: #FFFFFF;
            --text-primary: #2B4550;
            --text-secondary: #5E7A8A;
            --border-color: #B2EBF2;
            --card-bg: #FFFFFF;
            --card-border: #B2EBF2;
            --header-bg: #CCEEF0;
            --accent-primary: #00BCD4;
            --accent-primary-hover: #00ACC1;
            --accent-secondary: #4DD0E1;
            --accent-error: #EF4444;
            --accent-success: #22C55E;
            --user-bubble-bg: #B2EBF2;
            --user-bubble-text: #006064;
            --ai-bubble-bg: #CCEEF0;
            --ai-bubble-text: #2B4550;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #B2EBF2;
            --sidebar-item-hover: #CCEEF0;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #2B4550;
            --conversation-indicator: #00BCD4;

            background-image: linear-gradient(to bottom left, #E0F7FA, #B2EBF2, #80DEEA);
            background-size: cover;
            background-position: center center;
            background-attachment: fixed;
        }
        @keyframes aurora-move {
            0% { background-position: 0% 0%; }
            100% { background-position: 100% 100%; }
        }

        /* Timeless Echo Theme: Dark Mode */
        body[data-theme="timeless-echo-dark"] {
            --bg-primary: #2C2C2C;
            --bg-secondary: #3D3D3D;
            --text-primary: #E0E0E0;
            --text-secondary: #B0B0B0;
            --border-color: #555555;
            --card-bg: #3D3D3D;
            --card-border: #555555;
            --header-bg: #2C2C2C;
            --accent-primary: #A57C52;
            --accent-primary-hover: #8B653D;
            --accent-secondary: #C8A87C;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #785A3D;
            --user-bubble-text: #E0E0E0;
            --ai-bubble-bg: #555555;
            --ai-bubble-text: #E0E0E0;
            --sidebar-bg: #2C2C2C;
            --sidebar-border: #555555;
            --sidebar-item-hover: #3D3D3D;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(61, 61, 61, 0.9);
            --conversation-bg: rgba(61, 61, 61, 0.95);
            --conversation-text: #E0E0E0;
            --conversation-indicator: #A57C52;

            background-image: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)), url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><filter id="f3" x="-50%" y="-50%" width="200%" height="200%"><feTurbulence type="fractalNoise" baseFrequency="0.01" numOctaves="3" result="noise" /><feColorMatrix type="saturate" values="0.3"/><feComponentTransfer><feFuncR type="linear" slope="0.8" intercept="0.1"/><feFuncG type="linear" slope="0.7" intercept="0.1"/><feFuncB type="linear" slope="0.6" intercept="0.1"/></feComponentTransfer></filter></defs><rect width="100" height="100" fill="%232C2C2C" filter="url(%23f3)" /></svg>');
            background-size: cover, cover;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Timeless Echo Theme: Light Mode */
        body[data-theme="timeless-echo-light"] {
            --bg-primary: #FDF7E5;
            --bg-secondary: #FFFFFF;
            --text-primary: #4A4A4A;
            --text-secondary: #808080;
            --border-color: #E6E0D3;
            --card-bg: #FFFFFF;
            --card-border: #E6E0D3;
            --header-bg: #F5EFEB;
            --accent-primary: #8D6E63;
            --accent-primary-hover: #795548;
            --accent-secondary: #BCAAA4;
            --accent-error: #EF4444;
            --accent-success: #22C55E;
            --user-bubble-bg: #D7CCC8;
            --user-bubble-text: #5D4037;
            --ai-bubble-bg: #EFEBE9;
            --ai-bubble-text: #4A4A4A;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #E6E0D3;
            --sidebar-item-hover: #F5EFEB;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #4A4A4A;
            --conversation-indicator: #8D6E63;

            background-image: radial-gradient(at 0% 0%, hsl(40, 30%, 98%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(200, 20%, 95%) 0%, transparent 50%),
                              url('data:image/svg+xml;utf8,<svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><pattern id="vintage-pattern" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 0 0 L 10 10 M 10 0 L 0 10" stroke="%23E6E0D3" stroke-width="0.5" opacity="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23vintage-pattern)"/></svg>');
            background-size: cover, cover, auto;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Mystic Void Theme: Dark Mode (Bonus Theme) */
        body[data-theme="mystic-void-dark"] {
            --bg-primary: #110B1D;
            --bg-secondary: #1F1731;
            --text-primary: #ECE4F7;
            --text-secondary: #B29BCE;
            --border-color: #372A4F;
            --card-bg: #1F1731;
            --card-border: #372A4F;
            --header-bg: #110B1D;
            --accent-primary: #9400D3;
            --accent-primary-hover: #7B00B0;
            --accent-secondary: #8A2BE2;
            --accent-error: #F87171;
            --accent-success: #4ADE80;
            --user-bubble-bg: #5B2C7B;
            --user-bubble-text: #ECE4F7;
            --ai-bubble-bg: #372A4F;
            --ai-bubble-text: #ECE4F7;
            --sidebar-bg: #110B1D;
            --sidebar-border: #372A4F;
            --sidebar-item-hover: #1F1731;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(31, 23, 49, 0.9);
            --conversation-bg: rgba(31, 23, 49, 0.95);
            --conversation-text: #ECE4F7;
            --conversation-indicator: #9400D3;

            background-image: radial-gradient(at 0% 0%, hsl(270, 60%, 10%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(300, 50%, 10%) 0%, transparent 50%),
                              linear-gradient(to top right, rgba(138, 43, 226, 0.1), transparent),
                              linear-gradient(to bottom left, rgba(148, 0, 211, 0.1), transparent);
            background-size: cover, cover, cover, cover;
            background-position: center center;
            background-attachment: fixed;
        }

        /* Mystic Void Theme: Light Mode */
        body[data-theme="mystic-void-light"] {
            --bg-primary: #F7EDFF;
            --bg-secondary: #FFFFFF;
            --text-primary: #330066;
            --text-secondary: #663399;
            --border-color: #EBD9FC;
            --card-bg: #FFFFFF;
            --card-border: #EBD9FC;
            --header-bg: #F2E0FF;
            --accent-primary: #8A2BE2;
            --accent-primary-hover: #7B1FB2;
            --accent-secondary: #9370DB;
            --accent-error: #EF4444;
            --accent-success: #22C55E;
            --user-bubble-bg: #E6D2F2;
            --user-bubble-text: #4B0082;
            --ai-bubble-bg: #F0E6F8;
            --ai-bubble-text: #330066;
            --sidebar-bg: #FFFFFF;
            --sidebar-border: #EBD9FC;
            --sidebar-item-hover: #F2E0FF;
            --loader-dot-color: var(--accent-primary);
            --main-chat-window-bg: rgba(255, 255, 255, 0.8);
            --conversation-bg: rgba(255, 255, 255, 0.95);
            --conversation-text: #330066;
            --conversation-indicator: #8A2BE2;

            background-image: radial-gradient(at 0% 0%, hsl(270, 30%, 98%) 0%, transparent 50%),
                              radial-gradient(at 100% 100%, hsl(300, 20%, 95%) 0%, transparent 50%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* --- Global Styles & Overrides --- */

        /* Apply theme colors */
        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
        }

        /* Specific Tailwind overrides for consistency with theme variables */
        .bg-white { background-color: var(--card-bg); }
        .bg-gray-50 { background-color: var(--header-bg); }
        .border-gray-100 { border-color: var(--card-border); }
        .border-gray-200 { border-color: var(--card-border); }
        .text-gray-800 { color: var(--text-primary); }
        .text-gray-900 { color: var(--text-primary); }
        .text-gray-600 { color: var(--text-secondary); }
        .text-gray-700 { color: var(--text-secondary); }
        .bg-gray-200 { background-color: var(--bg-primary); color: var(--text-primary); }
        .hover\:bg-gray-300:hover { background-color: var(--sidebar-item-hover); }
        .bg-gray-100 { background-color: var(--bg-primary); }
        .shadow-2xl { box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); }
        body[data-theme$="-dark"] .shadow-2xl { box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.45); }
        #error-message { background-color: var(--accent-error); color: white; } /* Light red for error, always visible */
        body[data-theme$="-dark"] #error-message { background-color: var(--accent-error); color: white; }

        /* Custom styles for glowing effects on buttons */
        .glow-button {
            position: relative;
            z-index: 10;
            transition: all 0.4s ease;
            box-shadow: 0 0 10px var(--accent-primary);
            background-color: var(--accent-primary); /* Ensure button uses accent primary directly */
        }
        .glow-button:hover {
            box-shadow: 0 0 15px var(--accent-primary), 0 0 25px var(--accent-primary), 0 0 35px var(--accent-primary);
            transform: translateY(-2px) scale(1.02);
            background-image: linear-gradient(to right, var(--accent-primary), var(--accent-primary-hover));
        }
        
        /* Markdown content styling for better readability */
        .markdown-content h1, .markdown-content h2, .markdown-content h3 { font-weight: 800; margin-bottom: 0.75em; margin-top: 1.5em; line-height: 1.2; color: var(--accent-primary); }
        .markdown-content h1 { font-size: 2.25rem; }
        .markdown-content h2 { font-size: 1.875rem; }
        .markdown-content h3 { font-size: 1.5rem; }
        .markdown-content ul, .markdown-content ol { list-style-position: inside; margin-left: 1.5em; margin-bottom: 1em; }
        .markdown-content li { margin-bottom: 0.5em; }
        .markdown-content strong { color: var(--accent-secondary); font-weight: 700; }
        .markdown-content p { margin-bottom: 1em; }
        .markdown-content p:last-child { margin-bottom: 0; }

        /* Custom styles for dark mode toggle switch */
        .switch { margin-left: 0.5rem; }
        .slider { background-color: var(--text-secondary); transition: .4s; } /* Use theme secondary text for inactive */
        input:checked + .slider { background-color: var(--accent-primary); }
        input:checked + .slider:before { transform: translateX(24px); }
        .slider:before { background-color: var(--bg-secondary); transition: .4s; } /* Use a lighter background for the thumb */

        /* Custom scrollbar for a sleek look (hidden) */
        #sidebar-chat-list::-webkit-scrollbar,
        #chat-input::-webkit-scrollbar {
            width: 0 !important;
            height: 0 !important;
        }
        #sidebar-chat-list,
        #chat-input {
            -ms-overflow-style: none; /* Internet Explorer and Edge */
            scrollbar-width: none; /* Firefox */
        }

        /* Styles specifically for #chat-history scrollbar */
        #chat-history {
            overflow-y: auto; /* Ensure vertical scrolling is enabled */
            overflow-x: hidden; /* Keep hidden to prevent horizontal content overflow */

            /* Firefox scrollbar styles */
            scrollbar-width: thin; /* 'auto' or 'thin' */
            scrollbar-color: var(--accent-primary) var(--sidebar-item-hover); /* thumb color track color */
        }

        /* Webkit (Chrome, Safari, Edge) scrollbar styles for #chat-history */
        #chat-history::-webkit-scrollbar {
            width: 8px; /* Width of the vertical scrollbar */
        }

        #chat-history::-webkit-scrollbar-track {
            background: var(--sidebar-item-hover); /* Background of the scrollbar track */
            border-radius: 10px;
        }

        #chat-history::-webkit-scrollbar-thumb {
            background-color: var(--accent-primary); /* Color of the scrollbar thumb */
            border-radius: 10px; /* Rounded corners for the thumb */
            border: 2px solid var(--sidebar-item-hover); /* Creates a border effect and separates from track */
        }

        #chat-history::-webkit-scrollbar-thumb:hover {
            background-color: var(--accent-primary-hover); /* Darker thumb on hover */
        }
        
        /* Modern loading animation */
        .loader-container { display: flex; justify-content: center; align-items: center; width: 100%; height: 100%; }
        .loader-dot {
            width: 12px; height: 12px; margin: 0 4px;
            background-color: var(--loader-dot-color);
            border-radius: 50%; display: inline-block;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .loader-dot:nth-child(1) { animation-delay: -0.32s; }
        .loader-dot:nth-child(2) { animation-delay: -0.16s; }
        .loader-dot:nth-child(3) { animation-delay: 0s; }
        
        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); opacity: 0.5; }
            40% { transform: scale(1.0); opacity: 1; }
        }

        /* Main Chat Window Styling */
        #main-chat-window {
            flex: 1;
            max-width: 100%;
            min-height: 100vh;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: var(--main-chat-window-bg); /* Use theme variable for transparency */
            border-radius: 0;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            border-left: 1px solid var(--border-color); /* Use theme border color */
            transition: all 0.3s ease-in-out;
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
        }
        body[data-theme$="-dark"] #main-chat-window {
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.45);
        }

        /* Sidebar Styling */
        #sidebar {
            width: 280px;
            min-width: 280px;
            background-color: var(--sidebar-bg);
            border-right: 1px solid var(--sidebar-border);
            display: flex;
            flex-direction: column;
            padding: 1rem;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            position: relative;
            z-index: 30;
            height: 100vh;
            overflow-y: auto;
            transition: transform 0.3s ease-out, box-shadow 0.3s ease-out;
        }
        #sidebar.hidden-mobile {
            transform: translateX(-100%);
            position: absolute;
            left: 0;
            box-shadow: none;
        }
        @media (min-width: 768px) { /* md breakpoint */
            body {
                justify-content: flex-start;
                align-items: stretch;
            }
            #sidebar {
                position: relative;
                transform: translateX(0%);
                border-radius: 0;
            }
            #sidebar.hidden-mobile {
                transform: translateX(0%);
                position: relative;
            }
            #main-chat-window {
                max-width: none;
                border-radius: 0;
            }
            #hamburger-menu-button { display: none !important; }
        }
        
        /* New chat message styles */
        .chat-message {
            margin-bottom: 0.75rem; padding: 1rem; border-radius: 1.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            word-break: break-word; transition: all 0.3s ease; transform: scale(0.95);
            transform-origin: bottom; max-width: 85%; position: relative; padding-bottom: 2.5rem;
        }

        .chat-message.user {
            background-color: var(--user-bubble-bg); color: var(--user-bubble-text);
            margin-left: auto; border-bottom-right-radius: 0.5rem;
            background-image: linear-gradient(to bottom right, var(--user-bubble-bg), color-mix(in srgb, var(--user-bubble-bg) 80%, var(--accent-primary) 20%));
        }

        .chat-message.ai {
            background-color: var(--ai-bubble-bg); color: var(--ai-bubble-text);
            margin-right: auto; border-bottom-left-radius: 0.5rem;
            background-image: linear-gradient(to bottom left, var(--ai-bubble-bg), color-mix(in srgb, var(--ai-bubble-bg) 80%, var(--border-color) 20%));
        }

        /* Styling for chat attachments */
        .chat-image { max-width: 100%; height: auto; border-radius: 0.75rem; margin-top: 0.5rem; display: block; }
        .chat-attachment-preview-item {
            display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem 0.75rem;
            border-radius: 1rem; background-color: color-mix(in srgb, var(--accent-primary) 15%, transparent);
            color: var(--accent-primary); font-size: 0.875rem; box-shadow: 0 1px 2px rgba(0,0,0,0.08);
            transition: all 0.2s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn {
            background: none; border: none; color: var(--accent-primary); cursor: pointer;
            padding: 0.1rem; border-radius: 50%; transition: background-color 0.2s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn:hover {
            background-color: color-mix(in srgb, var(--accent-primary) 20%, transparent);
        }

        /* Styling for the copy message */
        #copy-message {
            position: fixed; bottom: 2rem; left: 50%; transform: translateX(-50%);
            padding: 0.75rem 1.5rem; background-color: var(--accent-success); color: white;
            border-radius: 9999px; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            opacity: 0; visibility: hidden; transition: all 0.5s ease-in-out; z-index: 100;
        }
        #copy-message.show { opacity: 1; visibility: visible; bottom: 4rem; }

        /* --- New/Enhanced Styles for Chat AI Responses & Code Blocks --- */
        
        .chat-message .message-content { padding: 0; margin: 0; }
        .chat-message.ai .message-content p, .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol, .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2, .chat-message.ai .message-content h3,
        .chat-message.ai .message-content blockquote { margin-bottom: 1em; }
        .chat-message.ai .message-content p:last-child, .chat-message.ai .message-content ul:last-child,
        .chat-message.ai .message-content ol:last-child, .chat-message.ai .message-content blockquote:last-child { margin-bottom: 0; }
        .chat-message.ai .message-content ul, .chat-message.ai .message-content ol { padding-left: 1.5em; }
        .chat-message.ai .message-content li { margin-bottom: 0.5em; }
        .chat-message.ai .message-content strong { font-weight: bold; color: var(--accent-primary); }
        .chat-message.ai .message-content em { font-style: italic; }
        .chat-message.ai .message-content blockquote {
            border-left: 4px solid var(--accent-secondary); padding-left: 1em;
            margin-left: 0; color: var(--text-secondary);
        }

        /* Code block specific styling */
        .code-block-container {
            position: relative; background-color: #27272a; color: #f8f8f2; /* Hardcoded for contrast on any theme, can be themed if desired */
            border-radius: 0.75rem; margin-top: 1rem; margin-bottom: 1rem;
            overflow: hidden; border: 1px solid #3f3f46; box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        .code-block-container pre {
            margin: 0; padding: 1rem; overflow-x: auto;
            font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace;
            font-size: 0.9em; line-height: 1.4;
        }
        .code-block-header {
            display: flex; justify-content: space-between; align-items: center;
            background-color: #374151; color: #d1d5db; padding: 0.5rem 1rem; /* Hardcoded */
            border-bottom: 1px solid #4b5563; font-size: 0.85em; /* Hardcoded */
            border-top-left-radius: 0.75rem; border-top-right-radius: 0.75rem;
        }
        .code-block-copy-button {
            background-color: transparent; border: none; color: #d1d5db; /* Hardcoded */
            cursor: pointer; padding: 0.25rem 0.5rem; border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex; align-items: center; gap: 0.25rem; font-size: 0.85em;
        }
        .code-block-copy-button:hover { background-color: #4b5563; color: white; } /* Hardcoded */
        .code-block-copy-button:active { transform: scale(0.95); }

        /* Smallest font size for inline code blocks if any */
        .chat-message.ai .message-content code:not(pre > code) {
            background-color: color-mix(in srgb, var(--accent-primary) 15%, transparent); /* Themed */
            border-radius: 0.25rem;
            padding: 0.2em 0.4em; font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace;
            font-size: 0.9em; color: var(--accent-primary); /* Themed */
        }

        /* Ensure links are distinguishable */
        .chat-message.ai .message-content a {
            color: var(--accent-primary); text-decoration: underline; transition: color 0.2s ease;
        }
        .chat-message.ai .message-content a:hover { color: var(--accent-primary-hover); }

        /* Styles for message action buttons (copy/dictate) */
        .message-actions {
            position: absolute; bottom: 0.5rem; right: 1rem; display: flex; gap: 0.5rem;
            padding: 0.25rem 0.5rem; background-color: var(--header-bg); /* Use a themed background for the actions panel */
            border-radius: 0.75rem; backdrop-filter: blur(5px); transition: opacity 0.3s ease;
            opacity: 0; z-index: 10;
            border: 1px solid var(--border-color);
        }
        .chat-message:hover .message-actions { opacity: 1; }
        .message-actions button {
            background: none; border: none; cursor: pointer; padding: 0.25rem;
            border-radius: 0.375rem; transition: background-color 0.2s ease, color 0.2s ease;
            display: flex; align-items: center; justify-content: center;
        }
        .message-actions button .lucide { color: var(--text-secondary); width: 1rem; height: 1rem; }
        .message-actions button:hover .lucide { color: var(--text-primary); }
        .message-actions button:hover { background-color: var(--sidebar-item-hover); } /* Themed hover */
        .chat-message.user .message-actions { right: 1rem; left: auto; }
        .chat-message.ai .message-actions { left: 1rem; right: auto; }

        /* New style for speech recognition button when active */
        .voice-input-active {
            background-color: var(--accent-error) !important;
            animation: pulse-red 1s infinite cubic-bezier(0.4, 0, 0.6, 1);
        }
        @keyframes pulse-red {
            0%, 100% { box-shadow: 0 0 0 0 color-mix(in srgb, var(--accent-error) 70%, transparent); }
            50% { box-shadow: 0 0 0 10px color-mix(in srgb, var(--accent-error) 0%, transparent); }
        }
        
        /* Drag and Drop visual feedback for chat input area */
        #chat-input-area-container.drag-over-active {
            border: 2px dashed var(--accent-primary);
            box-shadow: 0 0 20px var(--accent-primary), 0 0 30px var(--accent-primary) inset;
        }
        
        /* Sidebar chat list item styling */
        .sidebar-chat-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem 1rem;
            border-radius: 0.75rem;
            cursor: pointer;
            transition: background-color 0.2s ease, color 0.2s ease;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            text-align: left;
        }
        .sidebar-chat-item:hover {
            background-color: var(--sidebar-item-hover);
            color: var(--text-primary);
        }
        .sidebar-chat-item.active {
            background-color: var(--accent-primary);
            color: white;
            font-weight: 600;
        }
        .sidebar-chat-item.active .lucide {
            color: white;
        }
        .sidebar-chat-item.active:hover {
            background-color: var(--accent-primary-hover);
        }
        .sidebar-chat-item-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex-grow: 1;
            min-width: 0;
        }
        .sidebar-chat-item-title {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            min-width: 0;
        }
        .sidebar-chat-item-actions {
            display: flex;
            gap: 0.25rem;
            flex-shrink: 0;
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        .sidebar-chat-item:hover .sidebar-chat-item-actions {
            opacity: 1;
        }
        .sidebar-chat-item-actions button {
            background: none;
            border: none;
            padding: 0.25rem;
            border-radius: 0.375rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        .sidebar-chat-item-actions button .lucide {
            width: 1rem;
            height: 1rem;
            color: var(--text-secondary);
        }
        .sidebar-chat-item-actions button:hover {
            background-color: var(--sidebar-item-hover);
        }
        .sidebar-chat-item.active .sidebar-chat-item-actions button .lucide {
            color: white;
        }

        /* Responsive menu button for sidebar */
        #hamburger-menu-button {
            display: flex;
            margin-right: 1rem;
            align-items: center;
            justify-content: center;
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 0.5rem;
            background-color: var(--header-bg);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            cursor: pointer;
            transition: background-color 0.2s;
        }
        #hamburger-menu-button:hover {
            background-color: var(--sidebar-item-hover);
        }

        /* Overlay for mobile sidebar */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            z-index: 29;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
        }
        .sidebar-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        /* --- Conversation Mode Overlay Styles --- */
        #conversation-mode-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: var(--conversation-bg); /* Themed background */
            color: var(--conversation-text); /* Themed text */
            z-index: 100; /* Ensure it's on top */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            transition: opacity 0.5s ease-in-out;
            opacity: 0;
            visibility: hidden;
            backdrop-filter: blur(10px) brightness(0.8); /* Stronger blur, slightly darker */
            -webkit-backdrop-filter: blur(10px) brightness(0.8);
            padding: 1rem;
            overflow-y: auto; /* Allow scrolling if content overflows on small screens */

            /* Add a subtle animated background for depth */
            background-image: radial-gradient(circle at 15% 50%, color-mix(in srgb, var(--accent-primary) 20%, transparent), transparent 70%),
                              radial-gradient(circle at 85% 50%, color-mix(in srgb, var(--accent-secondary) 20%, transparent), transparent 70%),
                              linear-gradient(135deg, color-mix(in srgb, var(--conversation-bg) 90%, black 10%) 0%, transparent 50%);
            background-size: 200% 200%; /* Larger to allow animation */
            background-position: center center;
            animation: background-drift 30s infinite alternate ease-in-out;
        }

        #conversation-mode-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        @keyframes background-drift {
            0% { background-position: 0% 0%; }
            100% { background-position: 100% 100%; }
        }

        #conversation-mode-close-btn {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            background: none;
            border: none;
            color: var(--text-secondary); /* Use a more subtle color */
            cursor: pointer;
            z-index: 110;
            padding: 0.5rem;
            border-radius: 50%;
            transition: color 0.3s ease, transform 0.2s ease;
        }
        #conversation-mode-close-btn:hover {
            color: var(--text-primary); /* Brighter on hover */
            transform: scale(1.1);
        }

        .conversation-controls {
            position: absolute; /* Position controls at the top */
            top: 1.5rem;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1rem;
            z-index: 105;
            flex-wrap: wrap;
            justify-content: center;
            background-color: color-mix(in srgb, var(--conversation-bg) 60%, transparent); /* Semi-transparent background */
            padding: 0.75rem 1.5rem;
            border-radius: 9999px; /* Pill shape */
            border: 1px solid var(--border-color);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            max-width: 90%;
        }
        @media (max-width: 768px) {
            .conversation-controls {
                top: 0.5rem;
                padding: 0.5rem 1rem;
                flex-direction: column;
                gap: 0.5rem;
                width: auto;
                border-radius: 0.75rem;
            }
        }


        .conversation-controls label { /* Added label for clarity, not strictly needed for current HTML */
            color: var(--text-secondary);
            font-size: 0.85rem;
            align-self: center; /* Align with dropdowns */
            margin-right: -0.5rem; /* bring closer to dropdown */
        }
        .conversation-controls select {
            background-color: var(--card-bg); /* Use card-bg for better contrast */
            border-color: var(--border-color);
            color: var(--text-primary);
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.9rem;
            transition: all 0.2s ease;
            min-width: 120px;
        }
        .conversation-controls select:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px color-mix(in srgb, var(--accent-primary) 30%, transparent);
        }

        .sound-blob-wrapper { /* New wrapper for multiple blobs */
            position: relative;
            width: 300px; /* Larger base size */
            height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
            perspective: 1000px; /* For potential 3D effects */
            margin-top: 8rem; /* Push down due to controls at top */
        }
        @media (max-width: 768px) {
            .sound-blob-wrapper {
                width: 200px;
                height: 200px;
                margin-top: 12rem; /* Even more for stacked controls */
            }
        }

        /* Base blob styles */
        .sound-blob {
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: var(--conversation-indicator);
            border-radius: 50% 30% 60% 40% / 40% 60% 30% 50%; /* Organic, fluid shape */
            opacity: 0.7;
            filter: blur(8px) drop-shadow(0 0 25px var(--conversation-indicator)); /* Glowing effect */
            transition: all 0.5s ease;
            will-change: transform, opacity, background-color, filter;
            animation: idle-blob-morph 15s infinite alternate ease-in-out;
        }

        /* Additional concentric blobs */
        .sound-blob::before,
        .sound-blob::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: inherit; /* Inherit parent's organic shape */
            background-color: inherit;
            opacity: 0.5;
            filter: blur(15px);
            animation: idle-blob-morph 18s infinite alternate-reverse ease-in-out;
            transform: scale(1.05);
            z-index: -1; /* Behind the main blob */
        }

        .sound-blob::after {
            opacity: 0.3;
            filter: blur(20px);
            animation: idle-blob-morph 20s infinite alternate ease-in-out;
            transform: scale(1.1);
            animation-delay: 2s; /* Stagger animation */
        }

        @keyframes idle-blob-morph {
            0% {
                border-radius: 50% 30% 60% 40% / 40% 60% 30% 50%;
                transform: scale(0.95) rotate(0deg);
                opacity: 0.6;
            }
            50% {
                border-radius: 30% 50% 40% 60% / 60% 40% 50% 30%;
                transform: scale(1.05) rotate(10deg);
                opacity: 0.8;
            }
            100% {
                border-radius: 50% 30% 60% 40% / 40% 60% 30% 50%;
                transform: scale(0.95) rotate(0deg);
                opacity: 0.6;
            }
        }

        .sound-blob.listening-animation {
            animation: listen-pulse 1.2s infinite ease-out, listen-color-shift 3s infinite alternate;
            border-radius: 50%; /* More circular when active */
            filter: blur(5px) drop-shadow(0 0 30px var(--conversation-indicator));
            opacity: 0.9;
        }
        .sound-blob.listening-animation::before,
        .sound-blob.listening-animation::after {
            animation: listen-ring-pulse 1.5s infinite ease-out;
            border-radius: 50%;
        }

        @keyframes listen-pulse {
            0% { transform: scale(0.9) rotate(0deg); opacity: 0.7; }
            50% { transform: scale(1.05) rotate(5deg); opacity: 1; filter: blur(5px) drop-shadow(0 0 40px var(--conversation-indicator)); }
            100% { transform: scale(0.9) rotate(0deg); opacity: 0.7; }
        }
        @keyframes listen-ring-pulse {
            0% { transform: scale(1.05); opacity: 0.5; filter: blur(10px); }
            50% { transform: scale(1.15); opacity: 0.8; filter: blur(18px); }
            100% { transform: scale(1.05); opacity: 0.5; filter: blur(10px); }
        }
        @keyframes listen-color-shift {
            0% { background-color: var(--conversation-indicator); }
            50% { background-color: color-mix(in srgb, var(--conversation-indicator) 80%, var(--accent-secondary) 20%); }
            100% { background-color: var(--conversation-indicator); }
        }

        .sound-blob.speaking-animation {
            animation: speak-pulse 1s infinite cubic-bezier(0.4, 0, 0.6, 1), speak-color-shift 2.5s infinite alternate;
            border-radius: 60% 40% 50% 50% / 50% 50% 40% 60%; /* More elliptical, "mouth-like" */
            filter: blur(3px) drop-shadow(0 0 40px var(--conversation-indicator));
            opacity: 1;
        }
        .sound-blob.speaking-animation::before,
        .sound-blob.speaking-animation::after {
            animation: speak-ring-pulse 1.3s infinite ease-in-out;
            border-radius: 60% 40% 50% 50% / 50% 50% 40% 60%;
        }

        @keyframes speak-pulse {
            0% { transform: scale(0.98) rotate(0deg); }
            25% { transform: scale(1.05) rotate(3deg); }
            50% { transform: scale(1.02) rotate(-3deg); }
            75% { transform: scale(1.08) rotate(3deg); }
            100% { transform: scale(0.98) rotate(0deg); }
        }
        @keyframes speak-ring-pulse {
            0% { transform: scale(1.02); opacity: 0.6; filter: blur(8px); }
            50% { transform: scale(1.1); opacity: 0.9; filter: blur(12px); }
            100% { transform: scale(1.02); opacity: 0.6; filter: blur(8px); }
        }
        @keyframes speak-color-shift {
            0% { background-color: var(--conversation-indicator); }
            50% { background-color: color-mix(in srgb, var(--conversation-indicator) 70%, white 30%); }
            100% { background-color: var(--conversation-indicator); }
        }

        .sound-blob.idle-animation {
            animation: idle-blob-morph 15s infinite alternate ease-in-out;
            opacity: 0.6;
            filter: blur(8px) drop-shadow(0 0 20px var(--conversation-indicator));
            transform: scale(0.9);
        }

        .conversation-status-text {
            font-size: 2.2rem; /* Larger */
            font-weight: 800; /* Bolder */
            text-align: center;
            margin-bottom: 1.5rem;
            min-height: 2.5em;
            color: var(--text-primary);
            text-shadow: 0 0 10px color-mix(in srgb, var(--conversation-indicator) 50%, transparent); /* Subtle glow */
            transition: color 0.3s ease, text-shadow 0.3s ease;
        }
        .conversation-status-text.listening-state { color: var(--accent-secondary); text-shadow: 0 0 15px var(--accent-secondary); }
        .conversation-status-text.speaking-state { color: var(--accent-primary); text-shadow: 0 0 15px var(--accent-primary); }
        .conversation-status-text.error-state { color: var(--accent-error); text-shadow: 0 0 15px var(--accent-error); }


        .conversation-history-display {
            max-width: 600px; /* Slightly narrower to focus */
            width: 90%; /* Responsive width */
            height: 120px; /* Consistent height */
            overflow-y: auto;
            border: 1px solid var(--border-color);
            border-radius: 1.5rem; /* More rounded */
            padding: 1.2rem;
            text-align: left; /* Align text left for readability */
            font-size: 1.1rem;
            line-height: 1.6;
            background: linear-gradient(to top, var(--card-bg) 70%, color-mix(in srgb, var(--card-bg) 20%, transparent) 100%); /* Fade out top */
            box-shadow: 0 8px 20px rgba(0,0,0,0.25); /* Stronger shadow */
            color: var(--text-primary);
            scrollbar-width: none;
            -ms-overflow-style: none;
            position: relative;
            contain: layout style; /* Performance hint */
        }
        .conversation-history-display::-webkit-scrollbar {
            width: 0;
        }
        .conversation-history-display p { margin-bottom: 0.5rem; }
        .conversation-history-display p:last-child { margin-bottom: 0; }
        .user-utterance { color: var(--user-bubble-text); font-weight: 600; } /* Bolder */
        .ai-utterance { color: var(--ai-bubble-text); font-weight: 600; } /* Bolder */

        .conversation-mic-btn {
            width: 80px; /* Larger button */
            height: 80px;
            margin-top: 3rem !important; /* Push it further down for separation */
            background-color: var(--accent-primary); /* Directly use accent primary for glow effect */
            color: white; /* Ensure icon is white */
            box-shadow: 0 0 15px var(--accent-primary);
        }
        .conversation-mic-btn:hover {
            box-shadow: 0 0 25px var(--accent-primary), 0 0 40px var(--accent-primary-hover);
            transform: scale(1.05);
        }
        .conversation-mic-btn.voice-input-active {
            background-color: var(--accent-error) !important;
            box-shadow: 0 0 20px var(--accent-error), 0 0 35px var(--accent-error), 0 0 50px var(--accent-error);
            animation: pulse-red 1s infinite cubic-bezier(0.4, 0, 0.6, 1);
        }
        /* Re-define pulse-red to use var(--accent-error) */
        @keyframes pulse-red {
            0%, 100% { box-shadow: 0 0 0 0 color-mix(in srgb, var(--accent-error) 70%, transparent); }
            50% { box-shadow: 0 0 0 15px color-mix(in srgb, var(--accent-error) 0%, transparent); } /* Larger pulse */
        }

        /* Responsive layout for Study Helper and Chat */
        #main-app-container {
            display: flex;
            flex-direction: column; /* Stack on small screens */
            flex: 1;
            min-height: 100vh; /* Ensure it takes full height */
            background-color: var(--bg-primary); /* Use theme primary background */
        }

        @media (min-width: 1024px) { /* Adjust for larger screens (lg breakpoint) */
            #main-app-container {
                flex-direction: row; /* Side-by-side on large screens */
            }
            #study-helper-section {
                width: 380px; /* Fixed width for the study helper section */
                flex-shrink: 0;
                height: 100vh; /* Take full height */
                overflow-y: auto; /* Allow scrolling if content overflows */
            }
            #main-chat-window {
                flex: 1; /* Chat takes remaining space */
                max-width: 900px; /* Keep chat content readable, but allow flexibility */
                margin-left: auto;
                margin-right: auto;
                height: 100vh; /* Ensure chat window takes full height */
            }
        }
        /* Additional styling for study helper section to match theme */
        #study-helper-section {
            background-color: var(--bg-primary);
            border-right: 1px solid var(--border-color);
        }
        #study-topic-input {
            background-color: var(--card-bg);
            border-color: var(--border-color);
            color: var(--text-primary);
        }
        #study-topic-input:focus {
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px color-mix(in srgb, var(--accent-primary) 30%, transparent);
        }

    </style>
</head>
<body class="antialiased" data-theme="default-dark">

    <!-- Conversation Mode Overlay (NEW SECTION) -->
    <div id="conversation-mode-overlay" class="hidden">
        <button id="conversation-mode-close-btn" aria-label="Close Conversation Mode" title="Close Conversation Mode">
            <span data-lucide="x" class="w-8 h-8"></span>
        </button>

        <div class="conversation-controls">
            <label for="voice-select">Voice:</label>
            <select id="voice-select" aria-label="Select AI Voice" class="p-2 rounded-md border text-sm">
                <option value="">Default Voice</option>
                <!-- Voices will be populated dynamically -->
            </select>

            <label for="personality-select">Personality:</label>
            <select id="personality-select" aria-label="Select AI Personality" class="p-2 rounded-md border text-sm">
                <!-- Personalities will be populated dynamically -->
            </select>
        </div>

        <div class="sound-blob-wrapper">
            <div id="sound-blob" class="sound-blob idle-animation"></div>
        </div>

        <div id="conversation-status-text" class="conversation-status-text">
            Tap the button to start conversing!
        </div>

        <div id="conversation-history-display" class="conversation-history-display">
            <!-- Last few spoken phrases will appear here -->
        </div>

        <button id="conversation-mic-btn" aria-label="Toggle Microphone" class="flex items-center justify-center rounded-full shadow-lg cursor-pointer transition-all duration-300 glow-button conversation-mic-btn">
            <span data-lucide="mic" class="w-8 h-8"></span>
        </button>
    </div>
    <!-- END Conversation Mode Overlay -->

    <!-- Overlay for mobile sidebar -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>

    <!-- Sidebar -->
    <aside id="sidebar" class="hidden-mobile">
        <div class="flex items-center justify-between pb-4 border-b border-[var(--sidebar-border)] mb-4">
            <h2 class="text-xl font-bold flex items-center gap-2" style="color: var(--text-primary);">
                <span data-lucide="sparkles" class="w-6 h-6" style="color: var(--accent-primary);"></span> Study Buddy AI
            </h2>
            <button id="close-sidebar-btn" aria-label="Close Sidebar" title="Close Sidebar" class="md:hidden" style="color: var(--text-secondary); background-color: transparent; border: none;">
                <span data-lucide="x" class="w-6 h-6"></span>
            </button>
        </div>

        <!-- New Chat Button -->
        <button id="new-chat-button" class="w-full flex items-center justify-center p-3 rounded-xl font-semibold shadow-lg transition-colors mb-4 glow-button" style="background-color: var(--accent-primary); color: white;">
            <span data-lucide="plus" class="w-5 h-5 mr-2"></span> New Chat
        </button>

        <!-- Previous Chats Section -->
        <div class="flex-1 overflow-y-auto mb-4">
            <h3 class="text-sm font-semibold uppercase" style="color: var(--text-secondary);">Previous Chats</h3>
            <ul id="sidebar-chat-list" class="space-y-1">
                <!-- Chat items will be dynamically loaded here -->
            </ul>
        </div>

        <!-- Theme Selector (Dropdown for different themes) -->
        <div class="mt-auto pt-4 border-t border-[var(--sidebar-border)]">
            <h3 class="text-sm font-semibold uppercase" style="color: var(--text-secondary);">Themes</h3>
            <select id="app-theme-select-sidebar" class="w-full p-2 rounded-md border text-sm focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)]" style="background-color: var(--card-bg); border-color: var(--border-color); color: var(--text-primary);" aria-label="Select App Theme">
                <option value="default">Study Buddy AI (Default)</option>
                <option value="celestial-horizon">Celestial Horizon</option>
                <option value="verdant-calm">Verdant Calm</option>
                <option value="cybernetic-pulse">Cybernetic Pulse</option>
                <option value="urban-pulse">Urban Pulse</option>
                <option value="rustic-ember">Rustic Ember</option>
                <option value="neon-mirage">Neon Mirage</option>
                <option value="ivory-bloom">Ivory Bloom</option>
                <option value="obsidian-night">Obsidian Night</option>
                <option value="solar-dawn">Solar Dawn</option>
                <option value="aurora-drift">Aurora Drift</option>
                <option value="timeless-echo">Timeless Echo</option>
                <option value="mystic-void">Mystic Void</option>
            </select>
        </div>

        <!-- Version Selector -->
        <div class="mt-4 pt-4 border-t border-[var(--sidebar-border)]">
            <h3 class="text-sm font-semibold uppercase" style="color: var(--text-secondary);">Version</h3>
            <select id="version-select-sidebar" class="w-full p-2 rounded-md border text-sm focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)]" style="background-color: var(--card-bg); border-color: var(--border-color); color: var(--text-primary);" aria-label="Select Chatbot Version">
                <option value="https://mystic-vision-ai-standalone-chatbot.netlify.app/">Main Version</option>
                <option value="https://mystic-vision-ai-lite.netlify.app/">Lite Version</option>
                <option value="https://mystic-vision-ai-basic.netlify.app/">Basic Version</option>
                <option value="https://mystic-vision-ai-mini.netlify.app/">Mini Version</option>
                <option value="https://cosmic-chat-ai-simple-ai-chatbot.netlify.app/">Cosmic Chat AI</option>
                <option value="https://small-ai-big-vision.netlify.app/">Small AI (Legacy)</option>
                <option value="https://small-ai-big-vision-v2.netlify.app/" selected>Small AI v2 (Current)</option>
            </select>
        </div>
    </aside>

    <!-- Main Application Container -->
    <div id="main-app-container">
        <!-- Study Helper Section (NEW) -->
        <div id="study-helper-section" class="w-full lg:w-[380px] p-6 lg:border-r border-[var(--border-color)] flex flex-col justify-start items-center text-center overflow-y-auto">
            <h2 class="text-3xl font-extrabold mb-4" style="color: var(--accent-primary);">Study Buddy AI</h2>
            <p class="text-lg mb-6" style="color: var(--text-secondary);">Your intelligent companion for understanding any topic on the web!</p>

            <div class="w-full max-w-md bg-[var(--card-bg)] p-6 rounded-xl shadow-lg border border-[var(--card-border)] mb-8">
                <h3 class="text-xl font-bold mb-4" style="color: var(--text-primary);">What do you want to learn today?</h3>
                <input type="text" id="study-topic-input" class="w-full p-3 rounded-md border focus:ring-2 focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)] mb-4" placeholder="e.g., Quantum Physics, Photosynthesis, HTML basics" style="background-color: var(--bg-secondary); border-color: var(--border-color); color: var(--text-primary);">
                <button id="search-google-btn" class="w-full p-3 rounded-md font-semibold transition-colors glow-button mb-4" style="background-color: var(--accent-primary); color: white;">
                    <span data-lucide="search" class="w-5 h-5 mr-2 inline-block align-middle"></span> Search Google for Topic
                </button>
                <div id="google-search-link-container" class="mt-4 p-3 rounded-md border border-[var(--border-color)] bg-[var(--header-bg)] text-left hidden">
                    <p class="text-sm" style="color: var(--text-secondary);">Click to search (opens in new tab):</p>
                    <a id="google-search-link" target="_blank" rel="noopener noreferrer" class="text-base font-medium underline break-all" style="color: var(--accent-primary-hover);"></a>
                </div>
            </div>

            <div class="w-full max-w-md bg-[var(--card-bg)] p-6 rounded-xl shadow-lg border border-[var(--card-border)]">
                <h3 class="text-xl font-bold mb-4" style="color: var(--text-primary);">How it Works:</h3>
                <ol class="list-decimal list-inside text-left space-y-3" style="color: var(--text-secondary);">
                    <li>Enter your topic above and click "Search Google".</li>
                    <li>A Google search link will appear. Click it to find relevant articles.</li>
                    <li><strong>Copy important text</strong> (e.g., definitions, explanations, examples) from the articles you find on Google.</li>
                    <li><strong>Paste the copied text into the chat box below</strong> and tell the AI what you want to understand (e.g., "Explain this simply:", "Summarize this for me:").</li>
                    <li>The AI will analyze the text you provide and help you understand it in the easiest way possible!</li>
                </ol>
                <p class="text-sm mt-4 italic" style="color: var(--text-secondary);">Remember: The AI doesn't search Google directly; you provide the context!</p>
            </div>
        </div>

        <!-- Main Chat Container (from original AI) -->
        <div id="main-chat-window" class="flex-1 min-w-0 max-w-screen-lg mx-auto">
            <!-- Header for the chat -->
            <div class="flex justify-between items-center p-4 border-b border-[var(--border-color)]" style="background-color: var(--header-bg);">
                <div class="flex items-center">
                    <!-- Hamburger menu button for mobile -->
                    <button id="hamburger-menu-button" aria-label="Open Sidebar Menu" title="Open Menu" style="background-color: var(--header-bg); border-color: var(--border-color); color: var(--text-primary);">
                        <span data-lucide="menu" class="w-6 h-6"></span>
                    </button>
                    <h1 class="text-xl font-bold flex items-center gap-2" style="color: var(--text-primary);">
                        <span data-lucide="sparkles" class="w-6 h-6" style="color: var(--accent-primary);"></span> Chat with AI
                    </h1>
                </div>
                <!-- Right side of header -->
                <div class="flex items-center gap-4">
                    <!-- Conversation Mode Toggle Button (NEW) -->
                    <button id="conversation-mode-toggle-btn" aria-label="Conversation Mode" title="Start Voice Conversation" class="flex items-center justify-center p-2 rounded-full shadow-md transition-all duration-300" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
                        <span data-lucide="messages-square" class="w-5 h-5"></span>
                    </button>
                    <!-- Dark Mode Toggle -->
                    <div class="flex items-center gap-2">
                        <span class="text-sm" style="color: var(--text-secondary);">Dark Mode</span>
                        <label class="switch relative inline-block w-14 h-8">
                            <input type="checkbox" id="dark-mode-toggle" class="opacity-0 w-0 h-0">
                            <span class="slider absolute cursor-pointer top-0 left-0 right-0 bottom-0 rounded-full before:absolute before:content-[''] before:h-6 before:w-6 before:left-1 before:bottom-1 before:rounded-full"></span>
                        </label>
                    </div>
                </div>
            </div>
            
            <!-- Chat history div with a minimum height and scroll -->
            <div id="chat-history" class="p-4 overflow-y-auto flex-1 flex flex-col">
                <!-- Initial AI message will be appended here by JS -->
            </div>
            
            <!-- Chat input section with attachment, voice and send button -->
            <div id="chat-input-area-container" class="p-4 border-t border-[var(--border-color)] relative transition-all duration-300" style="background-color: var(--header-bg);">
                <!-- Attachment preview -->
                <div id="chat-attachments-preview-container" class="mb-2 flex flex-wrap items-center gap-2 hidden">
                    <!-- Attachments previews will be dynamically added here -->
                </div>

                <div class="flex gap-2 items-end flex-wrap">
                    <!-- Voice Input Button -->
                    <button id="voice-input-btn" aria-label="Voice Input" title="Voice Input (Speech-to-Text)" class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg cursor-pointer transition-all duration-300 flex-shrink-0" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
                        <span data-lucide="mic" class="w-5 h-5"></span>
                    </button>
                    
                    <!-- Attach File Button -->
                    <label for="chat-file-upload" aria-label="Attach File" title="Attach Files" class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg cursor-pointer transition-all duration-300 flex-shrink-0" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
                        <span data-lucide="paperclip" class="w-5 h-5"></span>
                    </label>
                    <input type="file" id="chat-file-upload" accept="image/*, .txt, .pdf, .csv, .json, .xml, .md" class="hidden" multiple>

                    <textarea id="chat-input" class="flex-1 p-3 rounded-2xl border focus:ring-2 focus:ring-[var(--accent-primary)] focus:border-[var(--accent-primary)] transition-colors shadow-sm min-w-0 resize-none max-h-[120px] overflow-y-auto" placeholder="Type your message or paste text from Google here..." rows="1" style="background-color: var(--card-bg); border-color: var(--border-color); color: var(--text-primary);"></textarea>
                    
                    <button id="send-chat-btn" aria-label="Send Message" class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg focus:outline-none focus:ring-4 focus:ring-[var(--accent-primary)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed glow-button flex-shrink-0" style="background-color: var(--accent-primary); color: white;">
                        <span data-lucide="send" class="w-5 h-5"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Temporary message for clipboard copy -->
    <div id="copy-message">Text copied to clipboard!</div>

    <script type="text/javascript">
        // Register Service Worker for PWA capabilities
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('ServiceWorker registration successful with scope: ', registration.scope);
                    })
                    .catch(err => {
                        console.log('ServiceWorker registration failed: ', err);
                    });
            });
        }

        const createIcons = () => {
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        };

        // DOM elements (Existing AI Chat)
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebar-overlay');
        const closeSidebarBtn = document.getElementById('close-sidebar-btn');
        const hamburgerMenuButton = document.getElementById('hamburger-menu-button');

        const mainChatWindow = document.getElementById('main-chat-window');
        const darkModeToggle = document.getElementById('dark-mode-toggle'); 
        const appThemeSelect = document.getElementById('app-theme-select-sidebar'); 
        const newChatButton = document.getElementById('new-chat-button');
        const chatHistoryDiv = document.getElementById('chat-history');
        const chatInput = document.getElementById('chat-input');
        const sendChatBtn = document.getElementById('send-chat-btn');
        const chatFileUpload = document.getElementById('chat-file-upload');
        const chatAttachmentsPreviewContainer = document.getElementById('chat-attachments-preview-container'); 
        const voiceInputBtn = document.getElementById('voice-input-btn');
        const copyMessage = document.getElementById('copy-message');
        const versionSelectSidebar = document.getElementById('version-select-sidebar');
        const sidebarChatList = document.getElementById('sidebar-chat-list');
        const chatInputAreaContainer = document.getElementById('chat-input-area-container'); 

        // NEW: Study Helper DOM elements
        const studyTopicInput = document.getElementById('study-topic-input');
        const searchGoogleBtn = document.getElementById('search-google-btn');
        const googleSearchLinkContainer = document.getElementById('google-search-link-container');
        const googleSearchLink = document.getElementById('google-search-link');

        // NEW: Conversation Mode DOM elements
        const conversationModeOverlay = document.getElementById('conversation-mode-overlay');
        const conversationModeToggleBtn = document.getElementById('conversation-mode-toggle-btn');
        const conversationModeCloseBtn = document.getElementById('conversation-mode-close-btn');
        const voiceSelect = document.getElementById('voice-select');
        const personalitySelect = document.getElementById('personality-select');
        const soundBlob = document.getElementById('sound-blob');
        const conversationStatusText = document.getElementById('conversation-status-text');
        const conversationHistoryDisplay = document.getElementById('conversation-history-display');
        const conversationMicBtn = document.getElementById('conversation-mic-btn');


        const errorContainer = document.createElement('div');
        errorContainer.id = 'error-message';
        errorContainer.classList.add('hidden', 'px-6', 'py-4', 'rounded-xl', 'relative', 'shadow-md', 'my-4', 'fixed', 'top-4', 'left-1/2', '-translate-x-1/2', 'z-50', 'w-11/12', 'max-w-md');
        const errorText = document.createElement('span');
        errorText.id = 'error-text';
        errorText.classList.add('block', 'sm:inline');
        errorContainer.appendChild(errorText);
        document.body.appendChild(errorContainer);

        // --- Global State and Constants ---
        const CHAT_SESSIONS_KEY = 'smallAI_chat_sessions';
        const CURRENT_SESSION_ID_KEY = 'smallAI_current_session_id';
        const THEME_STORAGE_KEY = 'smallAI_selected_theme'; 
        const MODE_STORAGE_KEY = 'smallAI_theme_mode'; 
        const DEFAULT_THEME_NAME = 'default';
        const DEFAULT_MODE = 'dark';
        const CONVERSATION_VOICE_KEY = 'smallAI_conversation_voice'; 
        const CONVERSATION_PERSONALITY_KEY = 'smallAI_conversation_personality'; 

        let allChatSessions = {}; 
        let currentSessionId = null;
        let chatAttachments = []; 

        let currentThemeName = DEFAULT_THEME_NAME;
        let currentMode = DEFAULT_MODE;

        // Web Speech API related variables (for general chat dictation)
        let currentUtterance = null;
        let isSpeaking = false; 
        let messageTextCache = new Map(); 

        // Speech Recognition variables (for general chat voice input)
        let SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition = null;
        let isVoiceInputActive = false; 
        let finalTranscript = ''; 

        // NEW: Conversation Mode Specific Variables
        let isConversationModeActive = false;
        let isAiSpeakingInConversation = false;
        let isUserListeningInConversation = false;
        let conversationSpeechRecognition = null; 
        let conversationFinalTranscript = '';
        let conversationInterimTranscript = '';
        let availableVoices = [];
        let selectedVoice = null;
        let selectedPersonality = 'Standard'; 
        let conversationDisplayTimeout = null; 


        const personalities = [
            { name: "Standard", prompt: "" },
            { name: "Sarcastic", prompt: "Respond as a highly sarcastic and witty AI. Use dry humor and playful cynicism. Keep responses concise and witty." },
            { name: "Friendly", prompt: "Respond as an exceptionally friendly and helpful AI. Use warm and encouraging language, and show genuine interest. Keep your tone light and approachable." },
            { name: "Philosophical", prompt: "Respond as a deep-thinking, philosophical AI. Explore underlying meanings and broader implications, using reflective and insightful language." },
            { name: "Curious", prompt: "Respond as an endlessly curious AI, often asking thoughtful follow-up questions to understand better. Show an eagerness to learn." },
            { name: "Humorous", prompt: "Respond as a lighthearted and funny AI, often making clever jokes or witty observations. Keep the mood cheerful." },
            { name: "Formal", prompt: "Respond in a very formal and precise manner. Avoid slang or casual expressions, maintaining a sophisticated and respectful tone." },
            { name: "Casual", prompt: "Respond in a relaxed, informal, and conversational tone, like talking to a friend. Use common idioms and a laid-back style." },
            { name: "Optimistic", prompt: "Respond with an overwhelmingly positive and hopeful outlook. Emphasize solutions and bright possibilities." },
            { name: "Skeptical", prompt: "Respond with a cautious and questioning attitude, often looking for evidence or flaws in arguments. Be analytical and critical." },
            { name: "Teacher", prompt: "Respond as a patient and knowledgeable teacher, explaining concepts clearly and simply, and guiding the user to understanding." },
            { name: "Poetic", prompt: "Respond using evocative language, metaphors, and a touch of poetic flair. Let your words flow with rhythm and imagery." },
            { name: "Concise", prompt: "Respond with extreme brevity and to the point, minimizing unnecessary words. Deliver information efficiently." },
            { name: "Verbose", prompt: "Respond with detailed and elaborate explanations, exploring every facet of the topic. Provide rich descriptions and context." },
            { name: "Narrator", prompt: "Respond as if you are narrating a story or documentary, setting a scene or describing events with a captivating voice." },
            { name: "Enthusiastic", prompt: "Respond with high energy and excitement, showing great interest in the conversation. Use exclamation marks and vivid language." },
            { name: "Mysterious", prompt: "Respond with an air of mystery, hinting at deeper knowledge without revealing everything. Be intriguing and slightly enigmatic." },
            { name: "Empathetic", prompt: "Respond with strong understanding and sharing of feelings, focusing on emotional support and validation. Show genuine care." },
            { name: "Analyst", prompt: "Respond like a data analyst, breaking down information, identifying patterns, and drawing logical conclusions based on facts." },
            { name: "Mentor", prompt: "Respond as a seasoned mentor, offering guidance, advice, and a wise perspective to help the user grow." },
            { name: "Dreamer", prompt: "Respond with imaginative and abstract ideas, often exploring fantastical possibilities and creative concepts. Think outside the box." },
            { name: "Strategist", prompt: "Respond by focusing on goals, plans, and optimal ways to achieve objectives. Offer clear, actionable strategies." },
            { name: "Minimalist", prompt: "Respond with the absolute bare minimum of words, almost like a haiku or a very short, impactful statement. Less is more." },
            { name: "Futurist", prompt: "Respond with a focus on future trends, predictions, and the long-term impact of technology and societal changes." },
            { name: "Zen Master", prompt: "Respond calmly, contemplatively, and with a focus on inner peace, mindfulness, and the present moment. Offer tranquil wisdom." }
        ];

        // Initialize SpeechRecognition for general chat if available
        if (SpeechRecognition) {
            recognition = new SpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'en-US';

            recognition.onstart = () => {
                isVoiceInputActive = true;
                voiceInputBtn.classList.add('voice-input-active');
                updateButtonIcon(voiceInputBtn, 'mic-off', 'w-5 h-5');
                chatInput.placeholder = 'Listening... Speak now.';
                finalTranscript = '';
                chatInput.dataset.initialText = chatInput.value;
            };

            recognition.onresult = (event) => {
                let interimTranscript = '';
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                        finalTranscript += event.results[i][0].transcript + ' ';
                    } else {
                        interimTranscript += event.results[i][0].transcript;
                    }
                }
                chatInput.value = (chatInput.dataset.initialText || '') + finalTranscript + interimTranscript;
                adjustChatInputHeight();
                chatInput.scrollLeft = chatInput.scrollWidth;
            };

            recognition.onend = () => {
                isVoiceInputActive = false;
                voiceInputBtn.classList.remove('voice-input-active');
                updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5');
                chatInput.placeholder = 'Type your message or paste text from Google here...';
                
                if (finalTranscript.trim() !== '') {
                    chatInput.value = (chatInput.dataset.initialText || '') + finalTranscript.trim();
                    chatInput.dataset.initialText = chatInput.value;
                } else if (chatInput.value.trim() === (chatInput.dataset.initialText || '').trim()) {
                    // No new speech added, keep existing text.
                } else {
                    chatInput.value = chatInput.dataset.initialText || '';
                }
                adjustChatInputHeight();
            };

            recognition.onerror = (event) => {
                isVoiceInputActive = false;
                voiceInputBtn.classList.remove('voice-input-active');
                updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5');
                chatInput.placeholder = 'Type your message or paste text from Google here...';
                console.error('Speech recognition error:', event.error);
                if (event.error === 'not-allowed') {
                    showError('Microphone access denied. Please allow microphone access in your browser settings.');
                } else if (event.error === 'no-speech') {
                    console.log('No speech detected, recognition ended.');
                    chatInput.value = chatInput.dataset.initialText || '';
                } else if (event.error === 'network') {
                    showError('Speech recognition network error. This often means a firewall, proxy, or browser extension is blocking access to Google\'s speech services. Please try disabling extensions or testing in incognito mode.');
                } else {
                    showError(`Speech recognition error: ${event.error}`);
                }
                adjustChatInputHeight();
            };
        } else {
            console.warn('Web Speech API (SpeechRecognition) not supported in this browser. General Voice input button will be hidden.');
            if (voiceInputBtn) {
                voiceInputBtn.style.display = 'none';
            }
        }

        // NEW: Initialize SpeechRecognition for Conversation Mode
        if (SpeechRecognition) {
            conversationSpeechRecognition = new SpeechRecognition();
            conversationSpeechRecognition.continuous = false; // Listen for a single utterance
            conversationSpeechRecognition.interimResults = true;
            conversationSpeechRecognition.lang = 'en-US';

            conversationSpeechRecognition.onstart = () => {
                isUserListeningInConversation = true;
                updateButtonIcon(conversationMicBtn, 'mic-off', 'w-8 h-8');
                conversationMicBtn.classList.add('voice-input-active');
                updateConversationStatus('Listening...', 'listening');
                conversationFinalTranscript = '';
                conversationInterimTranscript = '';
                clearConversationDisplay();
            };

            conversationSpeechRecognition.onresult = (event) => {
                let interim = '';
                let final = '';
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                        final += event.results[i][0].transcript + ' ';
                    } else {
                        interim += event.results[i][0].transcript;
                    }
                }
                conversationFinalTranscript = final;
                conversationInterimTranscript = interim;
                updateConversationDisplay(`<span class="user-utterance">You: ${conversationFinalTranscript}${conversationInterimTranscript}</span>`);
            };

            conversationSpeechRecognition.onend = () => {
                isUserListeningInConversation = false;
                updateButtonIcon(conversationMicBtn, 'mic', 'w-8 h-8');
                conversationMicBtn.classList.remove('voice-input-active');
                
                if (conversationFinalTranscript.trim() !== '') {
                    handleUserSpeechEnd(conversationFinalTranscript.trim());
                } else {
                    updateConversationStatus('No speech detected. Say something!');
                    setSoundBlobState('idle');
                }
            };

            conversationSpeechRecognition.onerror = (event) => {
                isUserListeningInConversation = false;
                updateButtonIcon(conversationMicBtn, 'mic', 'w-8 h-8');
                conversationMicBtn.classList.remove('voice-input-active');
                console.error('Conversation mode Speech recognition error:', event.error);
                if (event.error === 'not-allowed') {
                    showError('Microphone access denied. Please allow microphone access in your browser settings to use Conversation Mode.');
                    updateConversationStatus('Microphone access denied.', 'error');
                } else if (event.error === 'no-speech') {
                    updateConversationStatus('No speech detected. Say something!');
                } else {
                    showError(`Conversation mode speech recognition error: ${event.error}`);
                    updateConversationStatus(`Error: ${event.error}`, 'error');
                }
                setSoundBlobState('idle');
            };
        } else {
            console.warn('Web Speech API (SpeechRecognition) not supported. Conversation Mode will be limited.');
            if (conversationModeToggleBtn) {
                conversationModeToggleBtn.style.display = 'none';
            }
        }

        // --- Theme Management ---
        function applyTheme(themeName, mode) {
            currentThemeName = themeName;
            currentMode = mode;
            document.body.dataset.theme = `${themeName}-${mode}`;
            localStorage.setItem(THEME_STORAGE_KEY, themeName);
            localStorage.setItem(MODE_STORAGE_KEY, mode);
            darkModeToggle.checked = (mode === 'dark'); 
            if (appThemeSelect && appThemeSelect.value !== themeName) {
                appThemeSelect.value = themeName; 
            }
        }

        // Initialize Theme
        const storedThemeName = localStorage.getItem(THEME_STORAGE_KEY) || DEFAULT_THEME_NAME;
        const storedMode = localStorage.getItem(MODE_STORAGE_KEY) || DEFAULT_MODE;
        applyTheme(storedThemeName, storedMode);

        // Event listener for Dark/Light Mode Toggle (in header)
        darkModeToggle.addEventListener('change', () => {
            const newMode = darkModeToggle.checked ? 'dark' : 'light';
            applyTheme(currentThemeName, newMode);
        });

        // Event listener for Theme Selector (in sidebar)
        if (appThemeSelect) {
            appThemeSelect.addEventListener('change', (event) => {
                const newThemeName = event.target.value;
                applyTheme(newThemeName, currentMode); 
            });
        }


        // Version Selector Listener
        versionSelectSidebar.addEventListener('change', (event) => {
            const selectedUrl = event.target.value;
            if (selectedUrl && selectedUrl !== window.location.href) {
                window.location.href = selectedUrl;
            }
        });

        // --- Chat History & Session Management ---

        function generateUniqueId() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
        }

        function loadAllChatSessions() {
            const storedSessions = localStorage.getItem(CHAT_SESSIONS_KEY);
            if (storedSessions) {
                allChatSessions = JSON.parse(storedSessions);
            } else {
                allChatSessions = {};
            }
            renderSidebarChats();
        }

        function saveAllChatSessions() {
            localStorage.setItem(CHAT_SESSIONS_KEY, JSON.stringify(allChatSessions));
        }

        function renderSidebarChats() {
            sidebarChatList.innerHTML = '';
            const sortedSessions = Object.values(allChatSessions).sort((a, b) => b.timestamp - a.timestamp);

            if (sortedSessions.length === 0 && !currentSessionId) {
                createNewChatSession('New Chat'); 
                return;
            }

            sortedSessions.forEach(session => {
                const li = document.createElement('li');
                li.classList.add('sidebar-chat-item');
                if (session.id === currentSessionId) {
                    li.classList.add('active');
                }
                li.dataset.sessionId = session.id;

                li.innerHTML = `
                    <div class="sidebar-chat-item-content">
                        <span data-lucide="message-square" class="w-5 h-5" style="color: inherit;"></span>
                        <span class="sidebar-chat-item-title" title="${session.title}">${session.title}</span>
                    </div>
                    <div class="sidebar-chat-item-actions">
                        <button class="delete-chat-btn" title="Delete chat">
                            <span data-lucide="trash-2"></span>
                        </button>
                    </div>
                `;
                sidebarChatList.appendChild(li);
            });
            createIcons(); 
        }

        function createNewChatSession(initialTitle = 'New Chat') {
            const newId = generateUniqueId();
            const newSession = {
                id: newId,
                title: initialTitle,
                history: [],
                timestamp: Date.now()
            };
            allChatSessions[newId] = newSession;
            currentSessionId = newId;
            localStorage.setItem(CURRENT_SESSION_ID_KEY, newId);
            saveAllChatSessions();

            chatHistoryDiv.innerHTML = '';
            messageTextCache.clear();
            chatAttachments = [];
            chatFileUpload.value = '';
            displayChatAttachments();
            chatInput.value = '';
            chatInput.dataset.initialText = '';
            adjustChatInputHeight();
            chatInput.focus();

            const initialAIMessageText = 'Hello! I am your Study Buddy AI. How can I assist you today? Start by using the "What do you want to learn today?" section to search Google, then paste relevant text here for me to analyze!';
            allChatSessions[newId].history.push({ role: 'model', parts: [{ text: initialAIMessageText }] }); 
            appendChatMessage('ai', initialAIMessageText); 
            
            updateCurrentSessionHistory(); 
            renderSidebarChats();
            sidebar.classList.add('hidden-mobile'); 
            sidebarOverlay.classList.remove('active');
        }

        function loadChatSession(sessionId) {
            if (currentSessionId === sessionId) return; 
            
            const session = allChatSessions[sessionId];
            if (!session) {
                console.error('Session not found:', sessionId);
                showError('Requested chat session not found.');
                return;
            }

            currentSessionId = sessionId;
            localStorage.setItem(CURRENT_SESSION_ID_KEY, sessionId);

            chatHistoryDiv.innerHTML = '';
            messageTextCache.clear();
            chatAttachments = []; 
            chatFileUpload.value = '';
            displayChatAttachments();
            chatInput.value = '';
            chatInput.dataset.initialText = '';
            adjustChatInputHeight();
            chatInput.focus();

            session.history.forEach(msg => {
                if (msg.role === 'user') {
                    let userText = '';
                    const displayAttachments = [];
                    msg.parts.forEach(part => {
                        if (part.text) {
                            userText += part.text + ' ';
                        } else if (part.inlineData) {
                            displayAttachments.push({
                                mimeType: part.inlineData.mimeType,
                                data: part.inlineData.data,
                                name: `attachment_${displayAttachments.length + 1}`
                            });
                        }
                    });
                    appendChatMessage('user', userText.trim(), displayAttachments);
                } else {
                    appendChatMessage('ai', msg.parts[0].text);
                }
            });
            renderSidebarChats();
            sidebar.classList.add('hidden-mobile'); 
            sidebarOverlay.classList.remove('active');
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
        }

        function updateCurrentSessionHistory(newTitle = null) {
            if (!currentSessionId || !allChatSessions[currentSessionId]) {
                console.error("No active session to update. This should not happen.");
                return;
            }

            allChatSessions[currentSessionId].timestamp = Date.now();
            if (newTitle) {
                 allChatSessions[currentSessionId].title = newTitle;
            } else if (allChatSessions[currentSessionId].title === 'New Chat' && allChatSessions[currentSessionId].history.length > 1) {
                const firstUserMessage = allChatSessions[currentSessionId].history.find(msg => msg.role === 'user' && msg.parts[0]?.text);
                if (firstUserMessage) {
                    allChatSessions[currentSessionId].title = firstUserMessage.parts[0].text.substring(0, 50) + (firstUserMessage.parts[0].text.length > 50 ? '...' : '');
                }
            }
            saveAllChatSessions();
            renderSidebarChats(); 
        }

        function deleteChatSession(sessionIdToDelete) {
            if (confirm('Are you sure you want to delete this chat? This action cannot be undone.')) {
                delete allChatSessions[sessionIdToDelete];
                saveAllChatSessions();
                
                if (currentSessionId === sessionIdToDelete) {
                    currentSessionId = null; 
                    localStorage.removeItem(CURRENT_SESSION_ID_KEY);
                    createNewChatSession(); 
                } else {
                    renderSidebarChats(); 
                }
                showCopyMessage('Chat deleted successfully!', `var(--accent-error)`); 
            }
        }

        // --- Utility Functions ---

        const fileToBase64 = (file) => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve({
                    mimeType: file.type || 'application/octet-stream', 
                    data: reader.result.split(',')[1]
                });
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        };

        function getFileIcon(mimeType) {
            if (mimeType.startsWith('image/')) return 'image';
            if (mimeType === 'application/pdf') return 'file-text';
            if (mimeType.includes('text/')) return 'file-text';
            if (mimeType.includes('csv') || mimeType.includes('excel')) return 'file-spreadsheet';
            if (mimeType.includes('json') || mimeType.includes('xml') || mimeType.includes('code') || mimeType.includes('markdown')) return 'file-code';
            return 'file';
        }

        function showError(message) {
            errorText.textContent = message;
            errorContainer.classList.remove('hidden');
            setTimeout(() => {
                errorContainer.classList.add('hidden');
            }, 5000); 
        }
        
        // --- Marked.js Custom Renderer for Code Blocks ---
        const renderer = {
            code(code, lang) {
                let actualCodeContent;
                if (typeof code === 'object' && code !== null && typeof code.text === 'string') {
                    actualCodeContent = code.text;
                } else if (typeof code !== 'string') {
                    actualCodeContent = String(code);
                } else {
                    actualCodeContent = code;
                }

                const languageDisplay = lang ? `<span class="text-xs font-semibold uppercase" style="color: var(--text-secondary);">` + lang + `</span>` : '';
                const uniqueId = `code-block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                
                const escapedCode = actualCodeContent.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');

                return `
                    <div class="code-block-container" style="background-color: var(--bg-secondary); border-color: var(--border-color);">
                        <div class="code-block-header" style="background-color: var(--header-bg); color: var(--text-secondary); border-bottom-color: var(--border-color);">
                            ${languageDisplay}
                            <button class="code-block-copy-button" data-copy-target="${uniqueId}" style="color: var(--text-secondary);">
                                <span data-lucide="clipboard" class="w-4 h-4"></span>
                                Copy code
                            </button>
                        </div>
                        <pre style="color: var(--text-primary);"><code id="${uniqueId}">${escapedCode}</code></pre>
                    </div>
                `;
            }
        };

        marked.use({ renderer });

        function updateButtonIcon(buttonElement, newIconName, classList = 'w-4 h-4') {
            let currentIconSvg = buttonElement.querySelector('.lucide');
            if (currentIconSvg) {
                currentIconSvg.remove();
            }

            const newIconSpan = document.createElement('span');
            newIconSpan.setAttribute('data-lucide', newIconName);
            newIconSpan.className = classList;

            buttonElement.appendChild(newIconSpan);
           
            createIcons();
        }

        function appendChatMessage(role, text, attachments = []) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message', role);
            
            const messageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            messageDiv.dataset.messageId = messageId;
            
            let contentHTML = '';
            let rawMessageContentForCache = '';

            if (role === 'user') {
                rawMessageContentForCache = `You: ${text}`;
                contentHTML += `<span class="font-bold">You:</span> ${text}`;
                if (attachments.length > 0) {
                    contentHTML += `<div class="mt-2 flex flex-wrap gap-2">`;
                    attachments.forEach(attachment => {
                        if (attachment.mimeType.startsWith('image/')) {
                            contentHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                        } else {
                            contentHTML += `
                                <div class="flex items-center space-x-1 p-2 rounded-md text-sm" style="background-color: var(--bg-secondary); color: var(--text-primary);">
                                    <span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0" style="color: var(--accent-secondary);"></span>
                                    <span class="truncate max-w-[120px]">${attachment.name || 'File'}</span>
                                </div>
                            `;
                        }
                    });
                    contentHTML += `</div>`;
                    rawMessageContentForCache += `\n[Attachments: ${attachments.map(a => a.name).join(', ')}]`;
                }
            } else { 
                rawMessageContentForCache = `AI: ${text}`;
                contentHTML = `<div class="message-content">${marked.parse(text)}</div>`;
            }
            
            messageTextCache.set(messageId, rawMessageContentForCache); 

            const actionsHTML = `
                <div class="message-actions">
                    <button class="copy-message-btn" title="Copy message" data-message-id="${messageId}">
                        <span data-lucide="clipboard" class="w-4 h-4"></span>
                    </button>
                    <button class="dictate-message-btn" title="Dictate message" data-message-id="${messageId}">
                        <span data-lucide="volume-2" class="w-4 h-4"></span>
                    </button>
                </div>
            `;
            
            messageDiv.innerHTML = contentHTML + actionsHTML;
            chatHistoryDiv.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.style.transform = 'scale(1)';
            }, 10);
            
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            
            createIcons();
        }
        
        chatFileUpload.addEventListener('change', async (event) => {
            const files = Array.from(event.target.files);
            if (files.length > 0) {
                await processFiles(files);
                chatInput.focus();
            }
        });

        async function processFiles(files) {
            for (const file of files) {
                const allowedTypes = [
                    'image/', 'text/', 'application/pdf',
                    'application/json', 'text/csv', 'application/xml', 'text/markdown'
                ];
                const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

                if (isAllowed) {
                    try {
                        const { mimeType, data } = await fileToBase64(file);
                        chatAttachments.push({ file, mimeType, data, name: file.name });
                    } catch (error) {
                        showError(`Failed to read chat file ${file.name}.`);
                        console.error('Chat file read error:', error);
                    }
                } else {
                    showError(`File type not supported for chat: ${file.name} (${file.type}).`);
                }
            }
            displayChatAttachments();
            adjustChatInputHeight();
        }

        function displayChatAttachments() {
            chatAttachmentsPreviewContainer.innerHTML = '';
            if (chatAttachments.length > 0) {
                chatAttachmentsPreviewContainer.classList.remove('hidden');
                chatAttachments.forEach((attachment, index) => {
                    const attachmentDiv = document.createElement('div');
                    attachmentDiv.classList.add('chat-attachment-preview-item');
                    attachmentDiv.dataset.index = index;

                    let previewContent = '';
                    if (attachment.mimeType.startsWith('image/')) {
                        previewContent = `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name}" class="w-8 h-8 object-cover rounded-md">`;
                    } else {
                        previewContent = `<span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-5 h-5 flex-shrink-0"></span>`;
                    }

                    attachmentDiv.innerHTML = `
                        ${previewContent}
                        <span class="truncate max-w-[100px]">${attachment.name}</span>
                        <button class="remove-attachment-btn">
                            <span data-lucide="x" class="w-4 h-4"></span>
                        </button>
                    `;
                    chatAttachmentsPreviewContainer.appendChild(attachmentDiv);
                });
                createIcons();
            } else {
                chatAttachmentsPreviewContainer.classList.add('hidden');
            }
        }

        chatAttachmentsPreviewContainer.addEventListener('click', (event) => {
            const removeBtn = event.target.closest('.remove-attachment-btn');
            if (removeBtn) {
                const attachmentDiv = removeBtn.closest('[data-index]');
                if (attachmentDiv) {
                    const index = parseInt(attachmentDiv.dataset.index);
                    chatAttachments.splice(index, 1);
                    displayChatAttachments();
                    chatInput.focus();
                }
            }
        });

        function adjustChatInputHeight() {
            chatInput.style.height = 'auto';
            chatInput.style.height = chatInput.scrollHeight + 'px';
        }
        chatInput.addEventListener('input', adjustChatInputHeight);
        
        sendChatBtn.addEventListener('click', async () => {
            const userMessage = chatInput.value.trim();
            if (!userMessage && chatAttachments.length === 0) {
                return;
            }
            
            if (isVoiceInputActive && recognition) {
                recognition.stop();
            }

            const userParts = [];
            if (userMessage) {
                userParts.push({ text: userMessage });
            }
            for (const attachment of chatAttachments) {
                userParts.push({
                    inlineData: {
                        mimeType: attachment.mimeType,
                        data: attachment.data
                    }
                });
            }

            const currentSessionHistory = allChatSessions[currentSessionId].history;

            currentSessionHistory.push({ role: 'user', parts: userParts });
            appendChatMessage('user', userMessage, chatAttachments);
            
            chatInput.value = '';
            chatInput.dataset.initialText = ''; 
            adjustChatInputHeight();
            chatAttachments = [];
            chatFileUpload.value = '';
            displayChatAttachments();
            
            sendChatBtn.disabled = true;
            
            const loadingMessage = document.createElement('div');
            loadingMessage.id = 'chat-loading';
            loadingMessage.classList.add('p-4', 'text-center', 'text-sm');
            loadingMessage.style.color = 'var(--text-secondary)'; 
            loadingMessage.innerHTML = `
                <div class="loader-container h-8">
                    <div class="loader-dot"></div>
                    <div class="loader-dot"></div>
                    <div class="loader-dot"></div>
                </div>
                <span class="mt-2 block">AI is typing...</span>
            `;
            chatHistoryDiv.appendChild(loadingMessage);
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            
            try {
                const payload = {
                    contents: currentSessionHistory, 
                };
                
                const responseText = await callGeminiAPI(payload, selectedPersonality); 
                
                currentSessionHistory.push({ role: 'model', parts: [{ text: responseText }] });
                appendChatMessage('ai', responseText);
                
                updateCurrentSessionHistory(); 
                
            } catch (error) {
                console.error('Chat API call failed:', error);
                showError(`An error occurred in the chat: ${error.message}`);
                currentSessionHistory.pop(); 
                updateCurrentSessionHistory(); 
            } finally {
                sendChatBtn.disabled = false;
                const loadingDiv = document.getElementById('chat-loading');
                if (loadingDiv) {
                    loadingDiv.remove();
                }
                chatInput.focus();
            }
        });
        
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendChatBtn.click();
            }
        });

        voiceInputBtn.addEventListener('click', () => {
            if (recognition) {
                if (isVoiceInputActive) {
                    recognition.stop();
                } else {
                    finalTranscript = ''; 
                    recognition.start();
                }
            } else {
                showError('Speech recognition is not supported in this browser.');
            }
        });

        chatInputAreaContainer.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.stopPropagation();
            chatInputAreaContainer.classList.add('drag-over-active');
        });

        chatInputAreaContainer.addEventListener('dragleave', (e) => {
            e.preventDefault();
            e.stopPropagation();
            chatInputAreaContainer.classList.remove('drag-over-active');
        });

        chatInputAreaContainer.addEventListener('drop', async (e) => {
            e.preventDefault();
            e.stopPropagation();
            chatInputAreaContainer.classList.remove('drag-over-active');

            const files = Array.from(e.dataTransfer.files);
            if (files.length > 0) {
                await processFiles(files);
                chatInput.focus();
            }
        });

        chatInput.addEventListener('paste', async (event) => {
            const items = (event.clipboardData || event.originalEvent.clipboardData).items;
            let filesToProcess = [];
            let textToPaste = '';

            for (const item of items) {
                if (item.kind === 'file' && item.type.startsWith('image/')) {
                    const file = item.getAsFile();
                    if (file) {
                        filesToProcess.push(file);
                    }
                } else if (item.kind === 'string' && item.type === 'text/plain') {
                    item.getAsString(s => textToPaste = s);
                }
            }

            if (filesToProcess.length > 0) {
                event.preventDefault(); 
                await processFiles(filesToProcess);
                if (textToPaste) {
                    chatInput.value += textToPaste;
                }
                adjustChatInputHeight();
            }
        });


        newChatButton.addEventListener('click', () => {
            if (isSpeaking) {
                window.speechSynthesis.cancel();
                isSpeaking = false;
                currentUtterance = null;
            }
            if (isVoiceInputActive && recognition) {
                recognition.stop();
            }
            if (isConversationModeActive) {
                stopConversationMode();
            }
            createNewChatSession();
        });
        
        function showCopyMessage(message = 'Text copied to clipboard!', bgColor = 'var(--accent-success)') {
            copyMessage.textContent = message;
            copyMessage.style.backgroundColor = bgColor;
            copyMessage.classList.add('show');
            setTimeout(() => {
                copyMessage.classList.remove('show');
            }, 3000);
        }

        chatHistoryDiv.addEventListener('click', (event) => {
            const codeCopyButton = event.target.closest('.code-block-copy-button');
            if (codeCopyButton) {
                const targetId = codeCopyButton.dataset.copyTarget;
                const codeElement = document.getElementById(targetId);
                if (codeElement) {
                    const codeToCopy = codeElement.textContent;
                    updateButtonIcon(codeCopyButton, 'check', 'w-4 h-4');
                    copyToClipboard(codeToCopy); 
                    setTimeout(() => {
                        updateButtonIcon(codeCopyButton, 'clipboard', 'w-4 h-4');
                    }, 2000);
                    return;
                }
            }

            const chatCopyButton = event.target.closest('.copy-message-btn');
            if (chatCopyButton) {
                const messageId = chatCopyButton.dataset.messageId;
                const messageContent = messageTextCache.get(messageId);
                if (messageContent) {
                    updateButtonIcon(chatCopyButton, 'check');
                    copyToClipboard(messageContent); 
                    setTimeout(() => {
                        updateButtonIcon(chatCopyButton, 'clipboard');
                    }, 2000);
                } else {
                    showError('Message content not found for copying.');
                }
                return;
            }

            const dictateButton = event.target.closest('.dictate-message-btn');
            if (dictateButton) {
                const messageId = dictateButton.dataset.messageId;
                const messageContent = messageTextCache.get(messageId);
                if (messageContent) {
                    toggleSpeech(messageContent, dictateButton);
                } else {
                    showError('Message content not found for dictation.');
                }
                return;
            }
        });

        sidebarChatList.addEventListener('click', (event) => {
            const chatItem = event.target.closest('.sidebar-chat-item');
            if (chatItem) {
                const sessionId = chatItem.dataset.sessionId;
                const deleteBtn = event.target.closest('.delete-chat-btn');

                if (deleteBtn) {
                    event.stopPropagation(); 
                    deleteChatSession(sessionId);
                } else {
                    loadChatSession(sessionId);
                }
            }
        });

        hamburgerMenuButton.addEventListener('click', () => {
            sidebar.classList.remove('hidden-mobile');
            sidebarOverlay.classList.add('active');
        });

        closeSidebarBtn.addEventListener('click', () => {
            sidebar.classList.add('hidden-mobile');
            sidebarOverlay.classList.remove('active');
        });

        sidebarOverlay.addEventListener('click', () => {
            sidebar.classList.add('hidden-mobile');
            sidebarOverlay.classList.remove('active');
        });


        function copyToClipboard(text) { 
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text)
                    .then(() => {
                        showCopyMessage();
                    })
                    .catch(err => {
                        console.error('Failed to copy: ', err);
                        showError('Failed to copy text. Please copy manually.');
                    });
            } else {
                const tempTextArea = document.createElement('textarea');
                tempTextArea.value = text;
                document.body.appendChild(tempTextArea);
                tempTextArea.select();
                try {
                    document.execCommand('copy');
                    showCopyMessage();
                } catch (err) {
                    console.error('Failed to copy (fallback):', err);
                    showError('Failed to copy text. Please copy manually.');
                }
                document.body.removeChild(tempTextArea);
            }
        }

        function toggleSpeech(text, buttonElement) {
            if (!window.speechSynthesis) {
                showError('Speech synthesis not supported in this browser.');
                return;
            }

            if (isSpeaking && currentUtterance && currentUtterance.text === text) {
                if (window.speechSynthesis.paused) {
                    window.speechSynthesis.resume();
                    updateButtonIcon(buttonElement, 'pause');
                } else {
                    window.speechSynthesis.pause();
                    updateButtonIcon(buttonElement, 'volume-2');
                }
            } else {
                startSpeech(text, buttonElement);
            }
        }

        function startSpeech(text, buttonElement) {
            if (window.speechSynthesis.speaking || window.speechSynthesis.paused) {
                window.speechSynthesis.cancel();
            }

            document.querySelectorAll('.dictate-message-btn').forEach(btn => {
                if (btn !== buttonElement) {
                    updateButtonIcon(btn, 'volume-2'); 
                }
            });

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'en-US';

            utterance.onstart = () => {
                isSpeaking = true;
                currentUtterance = utterance;
                updateButtonIcon(buttonElement, 'pause');
            };
            utterance.onend = () => {
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };
            utterance.onerror = (event) => {
                console.error('Speech synthesis error:', event.error);
                showError('Failed to dictate message. Check console for details.');
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };

            window.speechSynthesis.speak(utterance);
        }

        async function callGeminiAPI(payload, personalityName = "Standard") {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // IMPORTANT: Replace "YOUR_GEMINI_API_KEY" with your actual Google Gemini API Key.
            // Get your API key from Google AI Studio: https://makersuite.google.com/
            // Do NOT expose your API key directly in production applications.
            // For production, consider using a backend proxy to secure your API key.
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            const apiKey = "AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA"; 

            if (apiKey === "YOUR_GEMINI_API_KEY" || !apiKey || apiKey === "") { 
                throw new Error("API Key is not set or is the default placeholder. Please replace 'YOUR_GEMINI_API_KEY' in the script with your actual Gemini API key.");
            }

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            let response;
            let result;
            let success = false;
            let retryCount = 0;
            const maxRetries = 3;
            let delay = 1000;

            const selectedPersonalityObj = personalities.find(p => p.name === personalityName);
            if (selectedPersonalityObj && selectedPersonalityObj.prompt) {
                // Ensure there's always an initial content part to prepend to.
                // If the first message in the payload's history is the user's, we want to prepend the personality here.
                // A common pattern is to have a "system" role for personality, but Gemini API currently handles this
                // by prepending to the first user message or as the first message from the 'user' if it's the start of a new turn.
                // For a continuous chat history like this, prepending directly to the *first* message in the turn
                // (which should be the user's latest query) is typically the most effective.
                // If there's an existing system message at the start of the entire conversation, it might be better to modify that.
                
                // For simplicity and direct impact on the *current* user turn, let's prepend to the latest user message.
                // Find the last user message in the current `payload.contents` (which is the session history).
                const lastUserMessageIndex = payload.contents.map(c => c.role).lastIndexOf('user');
                if (lastUserMessageIndex !== -1 && payload.contents[lastUserMessageIndex].parts && payload.contents[lastUserMessageIndex].parts.length > 0 && payload.contents[lastUserMessageIndex].parts[0].text) {
                    payload.contents[lastUserMessageIndex].parts[0].text = selectedPersonalityObj.prompt + "\n" + payload.contents[lastUserMessageIndex].parts[0].text;
                } else if (payload.contents.length > 0 && payload.contents[0].parts && payload.contents[0].parts.length > 0 && payload.contents[0].parts[0].text) {
                    // Fallback to prepending to the very first content if for some reason lastUserMessageIndex is -1 but content exists.
                    // This scenario should be rare with a properly managed chat history.
                    payload.contents[0].parts[0].text = selectedPersonalityObj.prompt + "\n" + payload.contents[0].parts[0].text;
                } else {
                    // If the entire payload is empty or doesn't have a text part in the first message, add a new system instruction.
                    // This makes the prompt effective even if the first interaction is an image, or empty chat.
                    payload.contents.unshift({ role: "user", parts: [{ text: selectedPersonalityObj.prompt }] });
                }
            }


            while (retryCount < maxRetries && !success) {
                try {
                    response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 429) {
                        if (retryCount < maxRetries - 1) {
                            console.warn(`API rate limit exceeded. Retrying in ${delay / 1000}s...`);
                            await new Promise(res => setTimeout(res, delay));
                            delay *= 2;
                            retryCount++;
                        } else {
                            throw new Error('API rate limit exceeded. Please try again later.');
                        }
                    } else if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
                    } else {
                        result = await response.json();
                        success = true;
                    }
                } catch (err) {
                    if (retryCount < maxRetries - 1) {
                        console.warn(`Fetch error: ${err.message}. Retrying in ${delay / 1000}s...`);
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                        retryCount++;
                    } else {
                        throw err;
                    }
                }
            }
            
            if (result && result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                return result.candidates[0].content.parts[0].text;
            } else {
                throw new Error('Failed to get a valid response from the AI. No candidates found or content is empty.');
            }
        }


        // --- NEW: Conversation Mode Functions ---

        function updateVoiceDropdown() {
            availableVoices = window.speechSynthesis.getVoices().filter(v => v.lang.startsWith('en')); // Filter for English voices
            voiceSelect.innerHTML = '<option value="">Default Voice</option>';
            availableVoices.forEach(voice => {
                const option = document.createElement('option');
                option.value = voice.name;
                option.textContent = `${voice.name} (${voice.lang})`;
                voiceSelect.appendChild(option);
            });
            // Try to set previously selected voice
            const storedVoiceName = localStorage.getItem(CONVERSATION_VOICE_KEY);
            if (storedVoiceName) {
                voiceSelect.value = storedVoiceName;
                selectedVoice = availableVoices.find(v => v.name === storedVoiceName) || null;
            }
        }

        function updatePersonalityDropdown() {
            personalitySelect.innerHTML = '';
            personalities.forEach(p => {
                const option = document.createElement('option');
                option.value = p.name;
                option.textContent = p.name;
                personalitySelect.appendChild(option);
            });
            // Try to set previously selected personality
            const storedPersonalityName = localStorage.getItem(CONVERSATION_PERSONALITY_KEY);
            if (storedPersonalityName && personalities.some(p => p.name === storedPersonalityName)) {
                personalitySelect.value = storedPersonalityName;
                selectedPersonality = storedPersonalityName;
            } else {
                personalitySelect.value = "Teacher"; // Default to Teacher for study helper
                selectedPersonality = "Teacher";
            }
        }

        voiceSelect.addEventListener('change', () => {
            const voiceName = voiceSelect.value;
            selectedVoice = availableVoices.find(v => v.name === voiceName) || null;
            localStorage.setItem(CONVERSATION_VOICE_KEY, voiceName);
        });

        personalitySelect.addEventListener('change', () => {
            selectedPersonality = personalitySelect.value;
            localStorage.setItem(CONVERSATION_PERSONALITY_KEY, selectedPersonality);
        });


        function startConversationMode() {
            if (!SpeechRecognition || !window.speechSynthesis) {
                showError("Your browser doesn't fully support Web Speech APIs needed for Conversation Mode.");
                return;
            }
            isConversationModeActive = true;
            conversationModeOverlay.classList.remove('hidden'); 
            conversationModeOverlay.classList.add('active');
            document.body.style.overflow = 'hidden'; 
            
            if (isSpeaking) {
                window.speechSynthesis.cancel();
                isSpeaking = false;
            }
            if (isVoiceInputActive && recognition) {
                recognition.stop();
            }

            startConversationListening();
        }

        function stopConversationMode() {
            isConversationModeActive = false;
            conversationModeOverlay.classList.remove('active');
            setTimeout(() => {
                conversationModeOverlay.classList.add('hidden');
                document.body.style.overflow = ''; 
            }, 300); 

            if (isAiSpeakingInConversation) {
                window.speechSynthesis.cancel();
                isAiSpeakingInConversation = false;
            }
            if (isUserListeningInConversation && conversationSpeechRecognition) {
                conversationSpeechRecognition.stop();
                isUserListeningInConversation = false;
            }
            setSoundBlobState('idle');
            conversationStatusText.textContent = 'Tap the button to start conversing!';
            clearConversationDisplay();
        }

        function startConversationListening() {
            if (!isConversationModeActive || isAiSpeakingInConversation || isUserListeningInConversation) return;

            window.speechSynthesis.cancel();

            conversationFinalTranscript = '';
            conversationInterimTranscript = '';
            clearConversationDisplay();

            try {
                conversationSpeechRecognition.start();
                updateConversationStatus('Listening...', 'listening');
                setSoundBlobState('listening');
            } catch (error) {
                if (error.name === 'InvalidStateError') {
                    conversationSpeechRecognition.stop();
                    setTimeout(() => { 
                        conversationSpeechRecognition.start();
                        updateConversationStatus('Listening...', 'listening');
                        setSoundBlobState('listening');
                    }, 100);
                } else {
                    console.error("Error starting conversation recognition:", error);
                    showError("Could not start microphone. Please check permissions.");
                    updateConversationStatus("Error starting microphone.", 'error');
                    setSoundBlobState('idle');
                }
            }
        }

        async function handleUserSpeechEnd(userText) {
            updateConversationStatus('Thinking...', 'thinking');
            setSoundBlobState('idle'); 

            const currentSessionHistory = allChatSessions[currentSessionId].history;
            currentSessionHistory.push({ role: 'user', parts: [{ text: userText }] });
            appendChatMessage('user', userText); 
            updateCurrentSessionHistory();

            updateConversationDisplay(`<span class="user-utterance">You: ${userText}</span>`);

            try {
                const payload = {
                    contents: currentSessionHistory,
                };
                const aiResponse = await callGeminiAPI(payload, selectedPersonality);

                currentSessionHistory.push({ role: 'model', parts: [{ text: aiResponse }] });
                appendChatMessage('ai', aiResponse); 
                updateCurrentSessionHistory();

                startConversationSpeaking(aiResponse);

            } catch (error) {
                console.error("Error in conversation mode API call:", error);
                showError(`AI communication error: ${error.message}`);
                updateConversationStatus("AI communication error. Please try again.", 'error');
                currentSessionHistory.pop();
                updateCurrentSessionHistory();
                setSoundBlobState('idle');
                setTimeout(startConversationListening, 2000);
            }
        }

        function startConversationSpeaking(text) {
            if (!isConversationModeActive) return;

            if (isUserListeningInConversation && conversationSpeechRecognition) {
                conversationSpeechRecognition.stop(); 
            }
            
            clearConversationDisplay(); 

            updateConversationStatus('AI Speaking...', 'speaking');
            setSoundBlobState('speaking');
            updateConversationDisplay(`<span class="ai-utterance">AI: ${text}</span>`); 

            const utterance = new SpeechSynthesisUtterance(text);
            if (selectedVoice) {
                utterance.voice = selectedVoice;
            }
            utterance.lang = 'en-US'; 

            utterance.onstart = () => {
                isAiSpeakingInConversation = true;
            };

            utterance.onend = () => {
                isAiSpeakingInConversation = false;
                handleAiSpeechEnd();
            };

            utterance.onerror = (event) => {
                console.error('Conversation mode Speech synthesis error:', event.error);
                showError('AI could not speak this message.');
                updateConversationStatus('AI speech error.', 'error');
                isAiSpeakingInConversation = false;
                handleAiSpeechEnd(); 
            };

            window.speechSynthesis.speak(utterance);
        }

        function handleAiSpeechEnd() {
            if (!isConversationModeActive) return;

            isAiSpeakingInConversation = false;
            updateConversationStatus('Listening...', 'listening');
            setSoundBlobState('listening');
            startConversationListening(); 
        }

        function updateConversationDisplay(text) {
            if (conversationDisplayTimeout) {
                clearTimeout(conversationDisplayTimeout);
            }
            conversationHistoryDisplay.innerHTML = `<p>${text}</p>`;
            conversationHistoryDisplay.scrollTop = conversationHistoryDisplay.scrollHeight;
            
            conversationDisplayTimeout = setTimeout(() => {
                clearConversationDisplay();
            }, 5000); 
        }

        function clearConversationDisplay() {
            if (conversationDisplayTimeout) {
                clearTimeout(conversationDisplayTimeout);
                conversationDisplayTimeout = null;
            }
            conversationHistoryDisplay.innerHTML = '';
        }


        function updateConversationStatus(message, state = 'idle') {
            conversationStatusText.textContent = message;
            conversationStatusText.classList.remove('listening-state', 'speaking-state', 'error-state');
            if (state === 'listening') {
                conversationStatusText.classList.add('listening-state');
            } else if (state === 'speaking') {
                conversationStatusText.classList.add('speaking-state');
            } else if (state === 'error') {
                conversationStatusText.classList.add('error-state');
            }
        }

        function setSoundBlobState(state) {
            soundBlob.classList.remove('listening-animation', 'speaking-animation', 'idle-animation');
            switch (state) {
                case 'listening':
                    soundBlob.classList.add('listening-animation');
                    break;
                case 'speaking':
                    soundBlob.classList.add('speaking-animation');
                    break;
                case 'idle':
                default:
                    soundBlob.classList.add('idle-animation');
                    break;
            }
        }

        conversationModeToggleBtn.addEventListener('click', startConversationMode);

        conversationModeCloseBtn.addEventListener('click', stopConversationMode);

        conversationMicBtn.addEventListener('click', () => {
            if (isAiSpeakingInConversation) {
                window.speechSynthesis.cancel();
            } else if (isUserListeningInConversation) {
                conversationSpeechRecognition.stop();
            } else {
                startConversationListening();
            }
        });

        window.speechSynthesis.onvoiceschanged = updateVoiceDropdown;

        // --- NEW: Study Helper Specific JS ---
        searchGoogleBtn.addEventListener('click', () => {
            const topic = studyTopicInput.value.trim();
            if (topic) {
                const googleSearchUrl = `https://www.google.com/search?q=${encodeURIComponent(topic)}`;
                googleSearchLink.href = googleSearchUrl;
                googleSearchLink.textContent = googleSearchUrl;
                googleSearchLinkContainer.classList.remove('hidden');
            } else {
                showError('Please enter a topic to search Google.');
                googleSearchLinkContainer.classList.add('hidden');
            }
        });

        // --- Initial Load ---
        window.addEventListener('load', () => {
            createIcons();
            loadAllChatSessions();

            let storedSessionId = localStorage.getItem(CURRENT_SESSION_ID_KEY);
            if (storedSessionId && allChatSessions[storedSessionId]) {
                loadChatSession(storedSessionId);
            } else if (Object.keys(allChatSessions).length > 0) {
                const mostRecentSessionId = Object.values(allChatSessions).sort((a,b) => b.timestamp - a.timestamp)[0].id;
                loadChatSession(mostRecentSessionId);
            } else {
                createNewChatSession('New Chat');
            }

            const currentUrl = window.location.href;
            let foundVersionOption = false;
            Array.from(versionSelectSidebar.options).forEach(option => {
                if (currentUrl.includes(option.value) && option.value.includes('small-ai-big-vision-v2.netlify.app')) {
                    option.selected = true;
                    foundVersionOption = true;
                }
            });
            if (!foundVersionOption && versionSelectSidebar.options.length > 0) {
                const preselectedOption = Array.from(versionSelectSidebar.options).find(option => option.selected);
                if (!preselectedOption) {
                    versionSelectSidebar.options[0].selected = true; 
                }
            }

            if (appThemeSelect && localStorage.getItem(THEME_STORAGE_KEY)) {
                appThemeSelect.value = localStorage.getItem(THEME_STORAGE_KEY);
            } else if (appThemeSelect && appThemeSelect.options.length > 0) {
                appThemeSelect.value = DEFAULT_THEME_NAME; 
            }

            updateVoiceDropdown();
            updatePersonalityDropdown();
            setSoundBlobState('idle'); 

            adjustChatInputHeight(); 
        });
    </script>
</body>
</html>

https://github.com/sOuL2000s/I-Prompt-You-AI-Prompt-Engineer.git
https://i-prompt-you-ai-prompt-engineer.netlify.app/

code : 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>I Prompt You - AI Prompt Engineer</title>
    <!-- Google Fonts: Space Grotesk for headings, Noto Sans for body text -->
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;700&family=Noto+Sans:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <!-- Using a simple emoji as favicon for a modern, minimal aesthetic -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>✨</text></svg>">
</head>
<body>
    <header class="main-header">
        <div class="logo">
            <span class="logo-icon">✨</span>
            <span class="logo-text">I Prompt You</span>
        </div>
        <nav class="main-nav">
            <ul>
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#examples">Examples</a></li>
                <li><a href="#contact-section">Contact</a></li>
            </ul>
        </nav>
        <div class="header-actions">
            <button id="viewHistoryBtn" class="action-btn header-btn">View History</button>
            <button id="newPromptRefreshBtn" class="primary-btn header-btn">New Prompt</button>
        </div>
    </header>

    <main>
        <section class="hero-section" id="home">
            <div class="hero-content">
                <h1>Generate AI Prompts with Ease</h1>
                <h2>Input your desired output, and our AI will craft the perfect prompt for other AI models.</h2>
                <div class="prompt-input-area">
                    <div class="input-field-group">
                        <textarea id="userInput" placeholder="Describe your desired output here..."></textarea>
                        <button id="generatePromptBtn" class="generate-btn primary-btn">Generate Prompt</button>
                    </div>

                    <div class="additional-input-controls">
                        <div class="file-upload-wrapper">
                            <input type="file" id="fileInput" multiple accept="
                                text/*, .txt,.md,.js,.py,.json,.html,.css,.xml,.csv,.log,.sh,.rb,.go,.java,.cpp,.c,.h,.swift,.kt,.php,.ts,.tsx,.jsx,.scss,.less,.yaml,.ini,.cfg,.toml,.rtf,
                                image/*,.jpg,.jpeg,.png,.gif,.webp,.svg,
                                application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,
                                application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,
                                application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation
                            " style="display: none;">
                            <button id="uploadFileBtn" class="action-btn icon-btn">
                                <span class="icon">📁</span>
                                <span class="btn-text">Upload Files</span>
                            </button>
                            <span id="fileNameDisplay" class="file-name-display">No files chosen</span>
                        </div>
                        <button id="voiceInputBtn" class="action-btn icon-btn">
                            <span class="icon">🎤</span>
                            <span class="btn-text">Speak Idea</span>
                        </button>
                    </div>

                    <div id="filePreview" class="file-preview"></div>
                    <small class="file-info-text">Supported: Text, Code, Plain Documents (content extracted for text), Images (for multimodal AI). Audio/Video/Complex Docs require manual description or a backend service.</small>

                    <div id="loadingIndicator" class="loading" style="display: none;">
                        <div class="spinner"></div>
                        <span>Crafting your prompt...</span>
                    </div>
                    <div id="errorMessage" class="error-message" style="display: none;"></div>
                </div>

                <div class="output-section">
                    <label for="outputPrompt" class="section-title">Refined Prompt for AI:</label>
                    <textarea id="outputPrompt" readonly placeholder="Your well-structured prompt will appear here..."></textarea>
                    <button id="copyPromptBtn" class="action-btn icon-btn" style="display: none;">
                        <span class="icon">📋</span>
                        <span class="btn-text">Copy Prompt</span>
                    </button>
                </div>
            </div>
        </section>

        <section class="section-cards" id="examples">
            <h2 class="section-heading">Example Prompts</h2>
            <div class="example-grid">
                <div class="example-card">
                    <span class="icon">✨</span>
                    <p>Write a short story about a talking cat</p>
                </div>
                <div class="example-card">
                    <span class="icon">📝</span>
                    <p>Summarize this article for a 5th grader</p>
                </div>
                <div class="example-card">
                    <span class="icon">🤖</span>
                    <p>Generate Python code for a simple web server</p>
                </div>
            </div>
        </section>

        <section class="section-text" id="about">
            <h2 class="section-heading">What is Prompt Engineering?</h2>
            <p>Prompt engineering is the process of designing and refining inputs (prompts) for AI models to achieve desired outputs. It involves understanding how AI models process information and crafting instructions that leverage their capabilities effectively. A well-engineered prompt can drastically improve the relevance, quality, and accuracy of AI-generated content, moving from generic responses to highly specific, useful, and creative results. It's about speaking the AI's language to unlock its full potential.</p>
        </section>

        <section id="contact-section" class="section-text" style="padding-bottom: 80px; text-align: center;">
            <h2 class="section-heading">Contact Us</h2>
            <p>Have questions or feedback? Reach out to us at <a href="mailto:souparnopaulreborn@gmail.com">souparnopaulreborn@gmail.com</a></p>
        </section>
    </main>

    <footer class="main-footer">
        <nav class="footer-nav">
            <ul>
                <li><a href="#">Terms of Service</a></li>
                <li><a href="#">Privacy Policy</a></li>
                <li><a href="#">Contact Us</a></li>
            </ul>
        </nav>
        <p class="copyright">&copy; 2025 I Prompt You. All rights reserved.</p>
    </footer>

    <!-- History Modal -->
    <div id="historyModal" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2 class="modal-title">Prompt History</h2>
            <div id="historyList" class="history-list">
                <p class="no-history-message">No prompts saved yet. Generate a prompt to see it here!</p>
            </div>
            <div class="modal-actions">
                <button id="clearHistoryBtn" class="action-btn">Clear All History</button>
            </div>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>

// WARNING: This API key is exposed in client-side code.
// For a production application, you MUST use a backend server to
// securely store and access your API key.
const GEMINI_API_KEY = "AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA";
const GEMINI_MODEL = "gemini-2.5-flash-preview-05-20";
const API_BASE_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`;

// Get DOM elements
const userInput = document.getElementById('userInput');
const voiceInputBtn = document.getElementById('voiceInputBtn');
const fileInput = document.getElementById('fileInput');
const uploadFileBtn = document.getElementById('uploadFileBtn');
const fileNameDisplay = document.getElementById('fileNameDisplay');
const filePreview = document.getElementById('filePreview');
const generatePromptBtn = document.getElementById('generatePromptBtn');
const loadingIndicator = document.getElementById('loadingIndicator');
const errorMessage = document.getElementById('errorMessage');
const outputPrompt = document.getElementById('outputPrompt');
const copyPromptBtn = document.getElementById('copyPromptBtn');

// New/Modified DOM elements for header actions
const newPromptRefreshBtn = document.getElementById('newPromptRefreshBtn');
const viewHistoryBtn = document.getElementById('viewHistoryBtn');

// DOM elements for history modal
const historyModal = document.getElementById('historyModal');
const closeHistoryBtn = historyModal.querySelector('.close-button');
const historyList = document.getElementById('historyList');
const clearHistoryBtn = document.getElementById('clearHistoryBtn');

// State variables
let attachedFiles = []; // Array to store objects like { id: string, type: 'text'|'image', content: string|base64, mimeType?: string, fileName: string, size: number }
let voiceRecognitionActive = false; // To manage voice input state
let recognition; // Keep recognition object in a broader scope to stop it externally


// --- Helper Functions for UI State Management ---
function showLoading() {
    loadingIndicator.style.display = 'flex';
    generatePromptBtn.disabled = true;
    voiceInputBtn.disabled = true;
    uploadFileBtn.disabled = true;
    userInput.disabled = true; // Disable manual input during loading
    copyPromptBtn.style.display = 'none'; // Hide copy button while loading
    outputPrompt.value = ''; // Clear previous output
    clearError();
}

function hideLoading() {
    loadingIndicator.style.display = 'none';
    // Only disable userInput/uploadFileBtn if voice is actively listening
    userInput.disabled = voiceRecognitionActive;
    uploadFileBtn.disabled = voiceRecognitionActive;
    voiceInputBtn.disabled = false; // Always allow starting/stopping voice recognition
    checkGenerateButtonState(); // Re-enable generate button based on current input
}

function showError(message) {
    errorMessage.innerHTML = `⚠️ ${message}`; // Add emoji for visual cue
    errorMessage.style.display = 'flex'; // Use flex for icon alignment
}

function clearError() {
    errorMessage.textContent = '';
    errorMessage.style.display = 'none';
}

function showCopyButton() {
    if (outputPrompt.value.trim() !== '') {
        copyPromptBtn.style.display = 'flex'; // Use flex for icon and text alignment
    }
}

function generateUniqueId() {
    return 'file-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
}

function addFileToState(fileData) {
    const newFile = {
        id: generateUniqueId(),
        ...fileData
    };
    attachedFiles.push(newFile);
    // UI rendering and button state update are handled after all files are processed
}

function removeFileFromState(fileId) {
    attachedFiles = attachedFiles.filter(f => f.id !== fileId);
    renderFilePreviews(); // Re-render previews after removal
    checkGenerateButtonState(); // Update generate button state
}

function clearFileInputState() {
    // IMPORTANT: fileInput.value = '' is now handled in uploadFileBtn click handler
    // to ensure change event fires reliably.
    fileNameDisplay.textContent = 'No files chosen';
    filePreview.innerHTML = '';
    filePreview.classList.remove('active'); // Hide preview container
    attachedFiles = [];
    checkGenerateButtonState(); // Update generate button state
}

function renderFilePreviews() {
    filePreview.innerHTML = '';
    if (attachedFiles.length === 0) {
        filePreview.classList.remove('active');
        fileNameDisplay.textContent = 'No files chosen';
        return;
    }

    filePreview.classList.add('active');
    fileNameDisplay.textContent = `${attachedFiles.length} file(s) chosen`;

    attachedFiles.forEach(file => {
        const item = document.createElement('div');
        item.className = 'file-preview-item';
        item.dataset.fileId = file.id;

        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-file-btn';
        removeBtn.innerHTML = '×';
        removeBtn.onclick = (e) => {
            e.stopPropagation();
            removeFileFromState(file.id);
        };
        item.appendChild(removeBtn);

        if (file.type === 'image') {
            const img = document.createElement('img');
            img.src = `data:${file.mimeType};base64,${file.content}`;
            img.alt = `Preview of ${file.fileName}`;
            item.appendChild(img);
        } else { // Text or other file types we've extracted content from
            const icon = document.createElement('span');
            icon.className = 'icon';
            icon.textContent = '📄'; // Text file icon
            icon.style.fontSize = '2em'; // Adjust icon size
            item.appendChild(icon);
        }

        const name = document.createElement('span');
        name.className = 'file-name';
        name.textContent = file.fileName;
        item.appendChild(name);

        const size = document.createElement('span');
        size.className = 'file-size';
        size.textContent = `${(file.size / 1024).toFixed(1)} KB`;
        item.appendChild(size);

        filePreview.appendChild(item);
    });
}


// Check if generate button should be enabled
function checkGenerateButtonState() {
    // Generate button is disabled if voice recognition is active, regardless of other inputs
    if (voiceRecognitionActive) {
        generatePromptBtn.disabled = true;
        return;
    }

    // Otherwise, enable if there's text or files
    if (userInput.value.trim() !== '' || attachedFiles.length > 0) {
        generatePromptBtn.disabled = false;
    } else {
        generatePromptBtn.disabled = true;
    }
}

// --- Main Logic: Generate Prompt (Multimodal Support) ---
async function generatePrompt() {
    let inputText = userInput.value.trim();

    if (!inputText && attachedFiles.length === 0) {
        showError("Please enter some text, speak your idea, or upload a file (text/image).");
        return;
    }

    showLoading();

    try {
        // System instruction for the AI prompt engineer
        const systemInstruction = `
            You are an expert AI prompt engineer named "I Prompt You".
            Your task is to take the user's raw input (text, voice transcript, or file content, potentially including multiple images and text files) and convert it into a well-structured, clear, concise, and highly effective prompt suitable for another AI model to understand and execute a specific task.

            Consider the following aspects when refining the prompt:
            1.  **Clarity & Precision:** Ensure the intent is unambiguous and all terms are precisely defined if necessary.
            2.  **Specificity:** Include all necessary details, constraints, and requirements for the task.
            3.  **Context & Background:** Provide sufficient background information for the AI to understand the situation.
            4.  **Desired Output Format:** Specify the expected format (e.g., list, JSON, paragraph, code snippet, specific tone, length).
            5.  **Role Assignment (for the target AI):** If appropriate, suggest a persona or role for the target AI to adopt (e.g., "Act as a senior marketing specialist...").
            6.  **Examples (if applicable):** If the input implies a need for examples, suggest that the user might add them, or structure the prompt to accommodate them.

            Your output should be *only* the refined prompt. Do not add conversational filler, intros, or outros. Focus solely on producing the optimal prompt for the user's intent.
        `;

        const requestParts = [{ text: systemInstruction }];

        if (inputText) {
            requestParts.push({ text: `User's primary textual input: "${inputText}"` });
        }

        const uploadedTextContent = [];
        const uploadedImageParts = [];

        attachedFiles.forEach(file => {
            if (file.type === 'text') {
                uploadedTextContent.push(`--- File: ${file.fileName} ---\n${file.content}`);
            } else if (file.type === 'image') {
                uploadedImageParts.push({
                    inlineData: {
                        mimeType: file.mimeType,
                        data: file.content
                    }
                });
            }
        });

        if (uploadedTextContent.length > 0) {
            requestParts.push({ text: `Additional textual context from uploaded files:\n${uploadedTextContent.join('\n\n')}` });
        }

        if (uploadedImageParts.length > 0) {
            if (uploadedImageParts.length > 10) {
                throw new Error("Too many images uploaded. Please limit to 10 images per prompt for optimal performance with Gemini API.");
            }
            uploadedImageParts.forEach(part => requestParts.push(part));
            requestParts.push({ text: `Carefully analyze the provided image(s) in conjunction with the user's textual request and any other uploaded text to formulate the most effective prompt.` });
        }
        
        const response = await fetch(API_BASE_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [
                    {
                        parts: requestParts
                    }
                ]
            }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`API error: ${response.status} - ${errorData.error?.message || response.statusText}`);
        }

        const data = await response.json();
        if (data.candidates && data.candidates.length > 0 && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0) {
            const generatedText = data.candidates[0].content.parts[0].text;
            outputPrompt.value = generatedText.trim();
            showCopyButton();

            // Save to history upon successful generation
            const attachedFileNames = attachedFiles.map(f => f.fileName);
            savePromptToHistory(inputText, generatedText.trim(), attachedFileNames);

        } else {
            throw new Error("No prompt generated. The AI might have refused, produced empty output, or encountered an internal issue.");
        }

    } catch (error) {
        console.error('Error generating prompt:', error);
        showError(`Failed to generate prompt: ${error.message}. Please try again.`);
        outputPrompt.value = "Failed to generate prompt. Please check your input or try again later.";
    } finally {
        hideLoading();
    }
}

// --- Event Listeners ---
generatePromptBtn.addEventListener('click', generatePrompt);

// Voice Input (Speech Recognition)
voiceInputBtn.addEventListener('click', () => {
    if (voiceRecognitionActive) {
        // If active, stop recognition
        if (recognition) { // Ensure recognition object exists before stopping
            recognition.stop();
        }
        return;
    }

    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        showError("Your browser does not fully support Speech Recognition (e.g., Chrome, Edge, Firefox). Please use text input.");
        return;
    }

    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();

    recognition.lang = 'en-US';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    voiceInputBtn.innerHTML = '<span class="icon">🛑</span> <span class="btn-text">Stop Listening</span>';
    voiceInputBtn.classList.add('active-listening'); // Add class for styling
    voiceInputBtn.disabled = false; // User can click to stop, so don't disable itself
    uploadFileBtn.disabled = true; // Disable file upload while listening
    generatePromptBtn.disabled = true; // Disable generate while listening
    userInput.disabled = true; // Disable manual text input while listening
    clearError();
    userInput.value = ''; // Clear previous text input when starting new voice input.

    voiceRecognitionActive = true;
    recognition.start();

    recognition.onresult = (event) => {
        const speechResult = event.results[0][0].transcript;
        userInput.value = speechResult; // Replace with new speech
        checkGenerateButtonState();
    };

    recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        showError(`Speech recognition error: ${event.error}. Please try again.`);
        // Reset state
        voiceInputBtn.innerHTML = '<span class="icon">🎤</span> <span class="btn-text">Speak Idea</span>';
        voiceInputBtn.classList.remove('active-listening');
        voiceInputBtn.disabled = false;
        uploadFileBtn.disabled = false;
        userInput.disabled = false;
        voiceRecognitionActive = false;
        checkGenerateButtonState();
    };

    recognition.onend = () => {
        // Recognition ended (either by user stop, timeout, or error handled above)
        if (voiceRecognitionActive) { // Only reset if it wasn't an error already handled
            voiceInputBtn.innerHTML = '<span class="icon">🎤</span> <span class="btn-text">Speak Idea</span>';
            voiceInputBtn.classList.remove('active-listening');
            voiceInputBtn.disabled = false;
            uploadFileBtn.disabled = false;
            userInput.disabled = false;
            voiceRecognitionActive = false;
            checkGenerateButtonState();
        }
    };
});


// File Upload
uploadFileBtn.addEventListener('click', () => {
    fileInput.value = ''; // Clear the input value *before* opening the dialog
                          // This ensures the 'change' event fires even if the same file is selected again.
    fileInput.click(); // Programmatically click the hidden file input
});

fileInput.addEventListener('change', async (event) => {
    const files = event.target.files;
    if (files.length === 0) {
        // If user opened dialog but selected no files
        clearFileInputState(); // Clears any previous files or 'No files chosen'
        return;
    }

    clearError(); // Clear previous errors
    clearFileInputState(); // Clear existing files and previews when new ones are selected

    const MAX_FILE_SIZE_MB = 5; // Per file limit
    const processingPromises = [];

    for (const file of files) {
        if (file.size > MAX_FILE_SIZE_MB * 1024 * 1024) {
            showError(`File "${file.name}" is too large (>${MAX_FILE_SIZE_MB}MB). It will be skipped.`);
            continue; // Skip this file but continue to process others
        }

        const isTextFile = file.type.startsWith('text/') ||
                           /\.(txt|md|js|py|json|html|css|xml|csv|log|sh|rb|go|java|cpp|c|h|swift|kt|php|ts|tsx|jsx|scss|less|yaml|ini|cfg|toml|rtf)$/i.test(file.name);
        
        const isImageFile = file.type.startsWith('image/');
        
        const isComplexDocument = /\.(pdf|doc|docx|xls|xlsx|ppt|pptx)$/i.test(file.name);
        const isAudioVideoFile = file.type.startsWith('audio/') || file.type.startsWith('video/');

        if (isAudioVideoFile || isComplexDocument) {
            showError(`Direct content extraction from "${file.name}" (${file.type}) is not fully supported client-side. Please describe its content in the text box for the AI. This file will be skipped.`);
            continue; // Skip this file
        }

        processingPromises.push(new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const fileData = {
                    fileName: file.name,
                    size: file.size
                };

                if (isTextFile) {
                    fileData.type = 'text';
                    fileData.content = e.target.result;
                } else if (isImageFile) {
                    fileData.type = 'image';
                    fileData.content = e.target.result.split(',')[1];
                    fileData.mimeType = file.type;
                }
                addFileToState(fileData);
                resolve();
            };

            reader.onerror = (e) => {
                console.error("File reading error:", e);
                showError(`Failed to read file "${file.name}".`);
                reject(e);
            };

            if (isTextFile) {
                reader.readAsText(file);
            } else if (isImageFile) {
                reader.readAsDataURL(file);
            }
        }));
    }

    try {
        await Promise.allSettled(processingPromises); // Wait for all file processing to finish
    } catch (error) {
        // This catch block would only be hit if Promise.allSettled itself throws, which it doesn't.
        // Individual promise rejections (file read errors) are handled by reader.onerror
        console.error("One or more files encountered an error during processing:", error);
    }
    
    // After all files are processed/skipped, update UI
    renderFilePreviews();
    checkGenerateButtonState();
});


// Copy to Clipboard
copyPromptBtn.addEventListener('click', async () => {
    try {
        await navigator.clipboard.writeText(outputPrompt.value);
        const originalContent = copyPromptBtn.innerHTML;
        copyPromptBtn.innerHTML = '<span class="icon">✅</span> <span class="btn-text">Copied!</span>';
        setTimeout(() => {
            copyPromptBtn.innerHTML = originalContent;
        }, 2000);
    } catch (err) {
        console.error('Failed to copy text: ', err);
        showError('Failed to copy prompt to clipboard. Please copy manually.');
    }
});


// --- New Prompt / Refresh Functionality ---
function newPromptRefresh() {
    userInput.value = '';
    clearFileInputState(); // Clears attachedFiles, fileInput, fileNameDisplay, filePreview
    outputPrompt.value = '';
    clearError();
    copyPromptBtn.style.display = 'none';
    if (voiceRecognitionActive && recognition) { // Check if recognition object exists
        recognition.stop(); // Stop listening if active
    }
    // Reset voice input button visual state if it was active
    voiceInputBtn.innerHTML = '<span class="icon">🎤</span> <span class="btn-text">Speak Idea</span>';
    voiceInputBtn.classList.remove('active-listening');
    voiceRecognitionActive = false; // Ensure state is false
    userInput.disabled = false; // Re-enable user input
    uploadFileBtn.disabled = false; // Re-enable file upload
    checkGenerateButtonState(); // Update generate button state
}

// Event Listeners for new header buttons
newPromptRefreshBtn.addEventListener('click', newPromptRefresh);
viewHistoryBtn.addEventListener('click', () => {
    renderHistoryModal();
    historyModal.style.display = 'flex'; // Use flex to center the modal
});


// --- History Management ---
const HISTORY_KEY = 'aiPromptHistory';
const MAX_HISTORY_ITEMS = 15; // Limit to prevent local storage bloat

function loadHistoryFromLocalStorage() {
    try {
        const history = JSON.parse(localStorage.getItem(HISTORY_KEY)) || [];
        return history.sort((a, b) => b.timestamp - a.timestamp); // Sort by newest first
    } catch (e) {
        console.error("Failed to load history from local storage:", e);
        return [];
    }
}

function saveHistoryToLocalStorage(history) {
    try {
        localStorage.setItem(HISTORY_KEY, JSON.stringify(history));
    } catch (e) {
        console.error("Failed to save history to local storage:", e);
        showError("Failed to save prompt to history. Local storage might be full or blocked.");
    }
}

function savePromptToHistory(rawInput, generatedPrompt, attachedFileNames) {
    let history = loadHistoryFromLocalStorage();

    const newEntry = {
        id: generateUniqueId(), // Reuse unique ID generator
        timestamp: Date.now(),
        rawInputText: rawInput,
        generatedPrompt: generatedPrompt,
        attachedFiles: attachedFileNames // Array of file names
    };

    history.unshift(newEntry); // Add to the beginning

    // Trim history to MAX_HISTORY_ITEMS
    if (history.length > MAX_HISTORY_ITEMS) {
        history = history.slice(0, MAX_HISTORY_ITEMS);
    }

    saveHistoryToLocalStorage(history);
}

function renderHistoryModal() {
    const history = loadHistoryFromLocalStorage();
    historyList.innerHTML = ''; // Clear previous entries

    if (history.length === 0) {
        historyList.innerHTML = '<p class="no-history-message">No prompts saved yet. Generate a prompt to see it here!</p>';
        clearHistoryBtn.disabled = true;
        return;
    }

    clearHistoryBtn.disabled = false;

    history.forEach(entry => {
        const item = document.createElement('div');
        item.className = 'history-item';

        const header = document.createElement('div');
        header.className = 'history-item-header';
        const timestamp = new Date(entry.timestamp).toLocaleString();
        header.innerHTML = `<span class="timestamp">${timestamp}</span>`;
        item.appendChild(header);

        const content = document.createElement('div');
        content.className = 'history-item-content';
        content.innerHTML = `
            <p><strong>Your Input:</strong> ${entry.rawInputText.substring(0, 100)}${entry.rawInputText.length > 100 ? '...' : ''}</p>
            <p><strong>Generated Prompt:</strong> ${entry.generatedPrompt.substring(0, 150)}${entry.generatedPrompt.length > 150 ? '...' : ''}</p>
        `;
        if (entry.attachedFiles && entry.attachedFiles.length > 0) {
            content.innerHTML += `<p class="file-note"><strong>Files:</strong> ${entry.attachedFiles.join(', ')} (Note: files are not reloaded)</p>`;
        }
        item.appendChild(content);

        const actions = document.createElement('div');
        actions.className = 'history-item-actions';

        const loadBtn = document.createElement('button');
        loadBtn.className = 'action-btn load-btn';
        loadBtn.textContent = 'Load';
        loadBtn.onclick = () => loadPromptFromHistory(entry.id);
        actions.appendChild(loadBtn);

        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'action-btn delete-btn';
        deleteBtn.textContent = 'Delete';
        deleteBtn.onclick = () => deleteHistoryItem(entry.id);
        actions.appendChild(deleteBtn);

        item.appendChild(actions);
        historyList.appendChild(item);
    });
}

function loadPromptFromHistory(id) {
    const history = loadHistoryFromLocalStorage();
    const entry = history.find(item => item.id === id);

    if (entry) {
        // Clear current state
        newPromptRefresh(); // Resets everything first

        // Populate with history data
        userInput.value = entry.rawInputText;
        outputPrompt.value = entry.generatedPrompt;

        // Files are not reloaded, provide a warning or clear indication
        if (entry.attachedFiles && entry.attachedFiles.length > 0) {
            showError(`Loaded text from history. Note: Original files (${entry.attachedFiles.join(', ')}) are NOT reloaded. Please re-upload if needed to use them.`);
        }
        
        showCopyButton(); // Ensure copy button is visible if output is loaded
        historyModal.style.display = 'none'; // Close modal
        checkGenerateButtonState(); // Update button states
    } else {
        showError("History item not found.");
    }
}

function deleteHistoryItem(id) {
    if (!confirm('Are you sure you want to delete this prompt from history?')) return;
    let history = loadHistoryFromLocalStorage();
    history = history.filter(item => item.id !== id);
    saveHistoryToLocalStorage(history);
    renderHistoryModal(); // Refresh the modal content
}

function clearAllHistory() {
    if (!confirm('Are you sure you want to clear ALL prompt history? This cannot be undone.')) return;
    localStorage.removeItem(HISTORY_KEY);
    renderHistoryModal(); // Refresh the modal content
}

// Event Listeners for History Modal
closeHistoryBtn.addEventListener('click', () => {
    historyModal.style.display = 'none';
});

window.addEventListener('click', (event) => {
    if (event.target === historyModal) {
        historyModal.style.display = 'none';
    }
});

clearHistoryBtn.addEventListener('click', clearAllHistory);


// Event listeners for input changes to enable/disable generate button
userInput.addEventListener('input', checkGenerateButtonState);

// Initial check on page load
checkGenerateButtonState();

/* Import Google Fonts for Space Grotesk and Noto Sans */
@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;700&family=Noto+Sans:wght@400;500;700&display=swap');

/* CSS Variables for a consistent and easily changeable dark theme */
:root {
    --bg-color: #000000; /* Changed to the darkest black */
    --primary-accent: #1313ec; /* Keep vibrant blue for accents */
    --primary-accent-hover: #0a0acf;
    --primary-accent-dark: #0f0fbf;
    --text-white: #FFFFFF;
    --text-light-grey: #b3b3c2; /* Slightly brightened for better contrast on pure black */
    --element-bg: #1c1c27; /* These dark greys will now have more contrast against pure black */
    --element-bg-hover: #2a2a38;
    --border-dark-grey: #3b3b54;
    --header-border: #282839;
    --error-color: #DC3545; /* Red for errors */
    --success-color: #28A745; /* Green for success */
    --shadow-dark: rgba(0, 0, 0, 0.3); /* Dark shadow */
    --shadow-light-on-dark: rgba(255, 255, 255, 0.05); /* Subtle highlight on dark elements */

    --border-radius-base: 12px;
    --border-radius-small: 8px;
    --padding-base: 25px;
    --gap-base: 25px;
}

/* Universal box-sizing for consistent layout */
*, *::before, *::after {
    box-sizing: border-box;
}

body {
    font-family: 'Noto Sans', sans-serif; /* Body text */
    margin: 0;
    padding: 0;
    background-color: var(--bg-color);
    color: var(--text-white);
    line-height: 1.6;
    display: flex;
    flex-direction: column; /* Ensure full page content flows vertically */
    min-height: 100vh;
    overflow-x: hidden; /* Prevent horizontal scrollbar on body from accidental overflow */
}

main {
    flex-grow: 1; /* Allow main content to take available space */
}

/* Base styles for all sections */
section {
    padding: 80px var(--padding-base); /* Generous vertical padding */
    max-width: 1200px;
    margin: 0 auto;
    text-align: center;
    width: 100%; /* Ensure sections take full available width up to max-width */
}

.section-heading {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2.5em;
    font-weight: 700;
    color: var(--text-white);
    margin-bottom: 40px;
    text-align: left;
}

.section-text {
    text-align: left;
    max-width: 800px;
    margin: 0 auto;
}
.section-text p {
    font-size: 1.1em;
    color: var(--text-light-grey);
}


/* --- Header (Top Navigation Bar) --- */
.main-header {
    position: sticky; /* Make header sticky */
    top: 0;
    width: 100%;
    background-color: var(--bg-color);
    padding: 15px var(--padding-base);
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--header-border);
    z-index: 1000; /* Ensure it stays on top */
}

.main-header .logo {
    display: flex;
    align-items: center;
    gap: 10px;
}

.main-header .logo-icon {
    font-size: 1.8em;
    color: var(--text-white);
}

.main-header .logo-text {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 1.6em;
    font-weight: 700;
    color: var(--text-white);
}

.main-nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: 30px;
}

.main-nav a {
    color: var(--text-white);
    text-decoration: none;
    font-weight: 500;
    font-size: 1.05em;
    transition: color 0.3s ease;
}

.main-nav a:hover {
    color: var(--primary-accent);
}

.header-actions {
    display: flex;
    gap: 15px; /* Space between buttons */
    align-items: center;
}

.header-btn {
    padding: 8px 18px; /* Slightly smaller than main buttons */
    font-size: 0.95em;
    font-weight: 500;
    border-radius: 50px; /* Consistent rounded style */
}

#viewHistoryBtn {
    background-color: var(--element-bg);
    color: var(--text-white);
    border: 1px solid var(--border-dark-grey);
}
#viewHistoryBtn:hover {
    background-color: var(--element-bg-hover);
    border-color: var(--primary-accent);
}

/* --- Hero Section --- */
.hero-section {
    /* Example muted background image. Replace with your own. */
    background-image: url('https://images.unsplash.com/photo-1510931215160-c48c66e4a287?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
    background-size: cover;
    background-position: center;
    padding: 100px var(--padding-base);
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 80vh; /* Make it take most of the viewport height */
}

.hero-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    /* Dark-to-transparent gradient overlay - now using pure black rgba values */
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.8) 70%, var(--bg-color) 100%);
    z-index: 1;
}

.hero-content {
    position: relative;
    z-index: 2;
    max-width: 900px;
    width: 100%;
    text-align: center;
    background-color: #000000; /* Explicitly set hero content background to darkest black */
    padding: calc(var(--padding-base) * 1.5);
    border-radius: var(--border-radius-base);
    box-shadow: 0 10px 30px var(--shadow-dark);
    border: 1px solid var(--border-dark-grey);
}

.hero-content h1 {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 3.5em;
    font-weight: 700;
    color: var(--text-white);
    margin-bottom: 15px;
    line-height: 1.2;
}

.hero-content h2 {
    font-family: 'Noto Sans', sans-serif;
    font-size: 1.4em;
    font-weight: 400;
    color: var(--text-light-grey);
    margin-bottom: 40px;
}

/* Prompt Input Area - includes main input, controls, preview, output */
.prompt-input-area {
    margin-top: 30px;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.input-field-group {
    display: flex;
    align-items: stretch; /* Stretch textarea to match button height */
    background-color: var(--element-bg);
    border: 1px solid var(--border-dark-grey);
    border-radius: var(--border-radius-base);
    overflow: hidden;
    margin-bottom: 15px;
}

textarea#userInput {
    flex-grow: 1;
    min-height: 80px; /* Reduced height for a sleeker desktop look */
    padding: 15px; /* Added full padding as the icon is removed */
    border: none;
    background-color: transparent;
    color: var(--text-white);
    font-family: 'Noto Sans', sans-serif;
    font-size: 1.1em;
    resize: vertical;
    outline: none;
    /* Ensure no extra space, it fills the remaining space */
}

textarea#userInput::placeholder {
    color: var(--text-light-grey);
    opacity: 0.7;
}

/* Primary Button Styling */
.primary-btn {
    background-color: var(--primary-accent);
    color: var(--text-white);
    box-shadow: 0 4px 10px rgba(19, 19, 236, 0.3);
    align-self: center; /* Center the button in the container */
    border: none;
    border-radius: var(--border-radius-small); /* Default radius for standalone buttons */
    font-size: 1.05em;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px; /* Spacing between icon and text */
}
.primary-btn:hover {
    background-color: var(--primary-accent-hover);
    transform: translateY(-2px); /* Lift effect on hover */
    box-shadow: 0 6px 15px rgba(19, 19, 236, 0.4);
}
.primary-btn:active {
    transform: translateY(0); /* Reset on click */
    box-shadow: 0 2px 5px rgba(19, 19, 236, 0.3);
}
.primary-btn:disabled {
    background-color: #555;
    color: #999;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.generate-btn {
    padding: 10px 25px;
    font-size: 1.1em;
    /* The border-radius will now correctly apply 0 on the left where it meets textarea */
    border-radius: 0 var(--border-radius-base) var(--border-radius-base) 0;
    flex-shrink: 0; /* Crucial: Prevents the button from shrinking */
    /* Add a min-width to ensure the text always fits */
    min-width: fit-content; /* Adjusts to content, preventing text cutoff */
    box-shadow: none;
}

@media (max-width: 768px) {
    textarea#userInput {
        border-radius: var(--border-radius-base) var(--border-radius-base) 0 0;
        min-height: 100px; /* Slight increase for mobile readability */
        padding: 15px; /* Consistent padding */
        text-align: center;
        width: 100%;
    }
}

.generate-btn:hover {
    background-color: var(--primary-accent-hover);
    transform: none; /* No transform on hover for integrated button */
}
.generate-btn:active {
    background-color: var(--primary-accent-dark);
}


.additional-input-controls {
    display: flex;
    gap: 15px;
    justify-content: flex-start; /* Align to left */
    flex-wrap: wrap; /* Allow wrapping */
}

/* Secondary Action Button Styling */
button.action-btn {
    background-color: var(--element-bg);
    color: var(--text-white);
    border: 1px solid var(--border-dark-grey);
    padding: 10px 20px;
    border-radius: var(--border-radius-small);
    font-size: 0.95em;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: background-color 0.3s ease, border-color 0.3s ease, transform 0.2s ease;
    cursor: pointer;
    font-weight: 500;
}

button.action-btn:hover {
    background-color: var(--element-bg-hover);
    border-color: var(--primary-accent);
    transform: translateY(-2px);
}
button.action-btn:active {
    transform: translateY(0);
}
button.action-btn:disabled {
    background-color: #282839;
    border-color: #3b3b54;
    color: #666;
    cursor: not-allowed;
    transform: none;
}

/* Style for voice input button when active */
button#voiceInputBtn.active-listening {
    background-color: var(--error-color); /* Use red to indicate active recording */
    border-color: var(--error-color);
}
button#voiceInputBtn.active-listening:hover {
    background-color: #e04a5c; /* Slightly lighter red */
    border-color: #e04a5c;
}


.file-upload-wrapper {
    display: flex;
    align-items: center;
    gap: 10px;
    flex-grow: 1; /* Allow wrapper to take available space */
    max-width: 100%; /* Prevent overflow */
}

.file-name-display {
    flex: 1 1 0; /* Allow it to grow, shrink, and have a base of 0 */
    min-width: 0; /* Essential for text-overflow: ellipsis to work without pushing parent */
    font-size: 0.9em;
    color: var(--text-light-grey);
    white-space: nowrap; /* Prevent wrapping */
    overflow: hidden;
    text-overflow: ellipsis; /* Show ellipsis if text overflows */
}

.file-info-text {
    color: var(--text-light-grey);
    display: block;
    margin-top: 5px;
    font-size: 0.85em;
    text-align: left;
}

.file-preview {
    margin-top: 15px;
    padding: 15px;
    background-color: var(--element-bg);
    border: 1px dashed var(--border-dark-grey);
    border-radius: var(--border-radius-base);
    display: flex;
    flex-wrap: wrap; /* Allow multiple previews to wrap */
    gap: 15px;
    justify-content: flex-start;
    align-items: flex-start;
    max-height: 250px; /* Limit height for multiple previews */
    overflow-y: auto; /* Enable scrolling if too many files */
    display: none; /* Hidden by default */
}

.file-preview.active { /* Class to explicitly show it when files exist */
    display: flex;
}

.file-preview-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 5px;
    max-width: 100px; /* Limit width for individual items */
    text-align: center;
    position: relative;
    padding: 5px;
    border: 1px solid var(--border-dark-grey);
    border-radius: var(--border-radius-small);
    background-color: #2a2a38;
}

.file-preview-item img {
    max-width: 80px;
    max-height: 80px;
    object-fit: contain;
    border-radius: 4px;
}
.file-preview-item .file-name, .file-preview-item .file-size {
    font-size: 0.75em;
    color: var(--text-light-grey);
    word-break: break-all; /* Break long file names */
}
.file-preview-item .remove-file-btn {
    position: absolute;
    top: -8px;
    right: -8px;
    background-color: var(--error-color);
    color: var(--text-white);
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 0.7em;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    line-height: 1;
    padding: 0;
    z-index: 10;
}
.file-preview-item .remove-file-btn:hover {
    background-color: #ff4d4d;
}

/* Loading Indicator Styling */
.loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 15px;
    margin: 25px 0;
    color: var(--primary-accent);
    font-size: 1.2em;
    font-weight: 600;
}

.spinner {
    border: 4px solid rgba(19, 19, 236, 0.3); /* Blue with transparency */
    border-top: 4px solid var(--primary-accent);
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Error Message Styling */
.error-message {
    color: var(--error-color);
    background-color: rgba(220, 53, 69, 0.15); /* Light red background with transparency */
    border: 1px solid var(--error-color);
    padding: 12px;
    border-radius: var(--border-radius-small);
    margin: 25px 0;
    font-weight: 500;
    text-align: left;
    display: flex;
    align-items: center;
    gap: 10px;
}

.error-message::before {
    content: '⚠️'; /* Warning emoji for visual emphasis */
    font-size: 1.2em;
    flex-shrink: 0; /* Prevent emoji from shrinking */
}

/* Output Section Styling */
.output-section {
    margin-top: 30px;
    text-align: left;
}
.output-section .section-title {
    display: block;
    font-size: 1.2em;
    font-weight: 500;
    color: var(--text-white);
    margin-bottom: 15px;
}
textarea#outputPrompt {
    background-color: var(--element-bg-hover); /* Slightly darker for output */
    border: 1px solid var(--primary-accent); /* Blue border for generated content */
    border-radius: var(--border-radius-base);
    color: var(--text-white);
    min-height: 180px;
    width: 100%;
    padding: 15px;
    font-family: 'Noto Sans', sans-serif;
    font-size: 1.05em;
    resize: vertical;
    box-sizing: border-box;
    transition: border-color 0.3s ease;
}

.output-section button#copyPromptBtn {
    margin-top: 15px;
    float: right; /* Align to right */
    background-color: var(--element-bg);
    border-color: var(--border-dark-grey);
    color: var(--text-white);
}
.output-section button#copyPromptBtn:hover {
    border-color: var(--primary-accent);
}

/* --- Example Prompts Section --- */
.section-cards {
    padding-top: var(--padding-base); /* Adjust padding */
    padding-bottom: var(--padding-base);
}
.example-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 25px;
    margin-top: 40px;
}

.example-card {
    background-color: var(--element-bg);
    border: 1px solid var(--border-dark-grey);
    border-radius: var(--border-radius-base);
    padding: 20px;
    display: flex;
    align-items: center;
    gap: 15px;
    text-align: left;
    transition: background-color 0.3s ease, border-color 0.3s ease;
}

.example-card:hover {
    background-color: var(--element-bg-hover);
    border-color: var(--primary-accent);
}

.example-card .icon {
    font-size: 1.8em;
    color: var(--primary-accent);
    flex-shrink: 0;
}

.example-card p {
    font-weight: 500;
    color: var(--text-white);
    margin: 0;
    font-size: 1.1em;
}

/* --- Footer --- */
.main-footer {
    background-color: var(--bg-color);
    padding: 40px var(--padding-base);
    border-top: 1px solid var(--header-border);
    text-align: center;
    margin-top: auto; /* Push footer to the bottom */
}

.footer-nav ul {
    list-style: none;
    margin: 0 0 20px 0;
    padding: 0;
    display: flex;
    justify-content: center;
    gap: 30px;
    flex-wrap: wrap;
}

.footer-nav a {
    color: var(--text-light-grey);
    text-decoration: none;
    font-size: 0.95em;
    transition: color 0.3s ease;
}

.footer-nav a:hover {
    color: var(--primary-accent);
}

.copyright {
    color: var(--text-light-grey);
    font-size: 0.9em;
    margin: 0;
}

/* --- Modal Styling for History --- */
.modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1001; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgba(0,0,0,0.6); /* Black w/ opacity */
    justify-content: center;
    align-items: center;
    padding: 20px;
}

.modal-content {
    background-color: var(--element-bg);
    margin: auto;
    padding: var(--padding-base);
    border: 1px solid var(--border-dark-grey);
    border-radius: var(--border-radius-base);
    width: 90%;
    max-width: 700px;
    position: relative;
    box-shadow: 0 10px 30px var(--shadow-dark);
    text-align: left;
    max-height: 90vh; /* Limit height */
    display: flex;
    flex-direction: column;
}

.modal-title {
    font-family: 'Space Grotesk', sans-serif;
    color: var(--text-white);
    font-size: 2em;
    margin-top: 0;
    margin-bottom: 25px;
}

.close-button {
    color: var(--text-light-grey);
    font-size: 2em;
    font-weight: bold;
    position: absolute;
    top: 15px;
    right: 25px;
    cursor: pointer;
    transition: color 0.3s ease;
}

.close-button:hover,
.close-button:focus {
    color: var(--text-white);
    text-decoration: none;
    cursor: pointer;
}

.history-list {
    flex-grow: 1; /* Allow list to take available space */
    overflow-y: auto; /* Scrollable if content exceeds height */
    max-height: calc(90vh - 200px); /* Adjust based on other modal content */
    margin-bottom: 20px;
    padding-right: 10px; /* For scrollbar */
}
/* Scrollbar styling for dark theme */
.history-list::-webkit-scrollbar {
    width: 8px;
}
.history-list::-webkit-scrollbar-track {
    background: #282839;
    border-radius: 4px;
}
.history-list::-webkit-scrollbar-thumb {
    background: var(--primary-accent);
    border-radius: 4px;
}
.history-list::-webkit-scrollbar-thumb:hover {
    background: var(--primary-accent-hover);
}


.history-item {
    background-color: var(--bg-color);
    border: 1px solid var(--border-dark-grey);
    border-radius: var(--border-radius-small);
    padding: 15px;
    margin-bottom: 15px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    transition: background-color 0.2s ease;
}

.history-item:hover {
    background-color: #1a1a20;
}

.history-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.9em;
    color: var(--text-light-grey);
    flex-wrap: wrap; /* Allow wrapping on small screens */
}

.history-item-header .timestamp {
    font-weight: 500;
}

.history-item-content {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.history-item-content p {
    margin: 0;
    font-size: 0.95em;
    color: var(--text-white);
}

.history-item-content strong {
    color: var(--primary-accent);
}

.history-item-actions {
    display: flex;
    gap: 10px;
    margin-top: 10px;
    justify-content: flex-end; /* Align buttons to the right */
    flex-wrap: wrap;
}

.history-item-actions button {
    padding: 8px 15px;
    font-size: 0.85em;
    border-radius: var(--border-radius-small);
    font-weight: 500;
}

.history-item-actions .load-btn {
    background-color: var(--primary-accent);
    color: var(--text-white);
}
.history-item-actions .load-btn:hover {
    background-color: var(--primary-accent-hover);
}

.history-item-actions .delete-btn {
    background-color: var(--error-color);
    color: var(--text-white);
}
.history-item-actions .delete-btn:hover {
    background-color: #e04a5c;
}

.modal-actions {
    margin-top: 20px;
    text-align: right;
}
.modal-actions .action-btn {
    background-color: var(--element-bg-hover);
    color: var(--text-white);
    border: 1px solid var(--border-dark-grey);
}
.modal-actions .action-btn:hover {
    border-color: var(--primary-accent);
}

.no-history-message {
    color: var(--text-light-grey);
    text-align: center;
    margin-top: 30px;
    font-style: italic;
}

/* --- Responsive Adjustments --- */
@media (max-width: 992px) {
    .main-header .main-nav {
        display: none; /* Hide main nav on smaller screens */
    }
    .main-header {
        flex-direction: row; /* Keep logo and actions on same row */
        justify-content: space-between;
        align-items: center;
    }
    .main-header .header-actions {
        order: 3; /* Push actions to the right */
    }

    .hero-content h1 {
        font-size: 3em;
    }
    .hero-content h2 {
        font-size: 1.2em;
    }
    .section-heading {
        font-size: 2em;
    }
}

@media (max-width: 768px) {
    .main-header {
        flex-wrap: wrap; /* Allow header elements to wrap */
        justify-content: center;
        gap: 15px;
    }
    .main-header .logo, .main-header .header-actions {
        width: 100%;
        justify-content: center;
        display: flex;
    }
    .main-header .header-actions {
        flex-wrap: wrap;
        gap: 10px;
    }
    .header-btn {
        flex-grow: 1;
        max-width: 180px;
    }
    
    .hero-section {
        padding: 80px var(--padding-base);
    }
    .hero-content {
        padding: var(--padding-base);
    }
    .hero-content h1 {
        font-size: 2.5em;
    }
    .hero-content h2 {
        font-size: 1.1em;
    }
    .input-field-group {
        flex-direction: column;
        border-radius: var(--border-radius-base);
    }
    .input-field-group .icon.search-icon {
        display: none; /* Hide icon on small screens for vertical stack */
    }
    textarea#userInput {
        border-radius: var(--border-radius-base) var(--border-radius-base) 0 0;
        min-height: 100px;
        padding: 15px;
        text-align: center;
        width: 100%; /* Ensure it takes full width when stacked */
    }
    .generate-btn {
        width: 100%;
        border-radius: 0 0 var(--border-radius-base) var(--border-radius-base);
        padding: 15px 25px;
    }
    .additional-input-controls {
        flex-direction: column;
        align-items: stretch;
    }
    .file-upload-wrapper {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
        width: 100%; /* Ensure wrapper takes full width */
    }
    .file-upload-wrapper button {
        width: 100%;
    }
    .file-name-display {
        max-width: 100%; /* Ensure it doesn't cause overflow */
        text-align: left;
    }
    button.action-btn {
        width: 100%; /* Make action buttons full width when stacked */
    }
    .output-section button#copyPromptBtn {
        float: none;
        width: 100%;
    }
    .section-heading {
        font-size: 1.8em;
    }
    .section-text p {
        font-size: 1em;
    }
    .footer-nav ul {
        flex-direction: column;
        gap: 15px;
    }

    /* Modal responsiveness */
    .modal-content {
        padding: 20px;
        width: 95%;
    }
    .modal-title {
        font-size: 1.5em;
    }
    .close-button {
        font-size: 1.8em;
        top: 10px;
        right: 15px;
    }
    .history-item {
        padding: 12px;
    }
    .history-item-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }
    .history-item-actions {
        justify-content: flex-start;
    }
}

@media (max-width: 480px) {
    body {
        font-size: 0.9em;
    }
    .main-header {
        padding: 10px 15px;
    }
    .main-header .logo-text {
        font-size: 1.4em;
    }
    .header-btn {
        padding: 8px 15px;
        font-size: 0.9em;
    }
    .hero-section {
        padding: 60px 15px;
    }
    .hero-content {
        padding: 20px;
    }
    .hero-content h1 {
        font-size: 2em;
    }
    .hero-content h2 {
        font-size: 1em;
        margin-bottom: 25px;
    }
    textarea#userInput {
        min-height: 80px;
        font-size: 1em;
    }
    .generate-btn {
        font-size: 1em;
        padding: 12px 20px;
    }
    .file-info-text {
        font-size: 0.8em;
    }
    .file-preview {
        max-height: 200px;
        gap: 10px;
        padding: 10px;
    }
    .file-preview-item {
        max-width: 80px;
    }
    .file-preview-item img {
        max-width: 60px;
        max-height: 60px;
    }
    .loading span, .error-message {
        font-size: 0.9em;
    }
    .spinner {
        width: 25px;
        height: 25px;
    }
    textarea#outputPrompt {
        min-height: 150px;
        font-size: 0.95em;
    }
    .section-heading {
        font-size: 1.5em;
        margin-bottom: 25px;
    }
    .example-grid {
        gap: 15px;
    }
    .example-card {
        padding: 15px;
        flex-direction: column;
        text-align: center;
    }
    .example-card .icon {
        font-size: 1.5em;
    }
    .example-card p {
        font-size: 0.95em;
    }
    .footer-nav a {
        font-size: 0.85em;
    }
    .copyright {
        font-size: 0.8em;
    }
}